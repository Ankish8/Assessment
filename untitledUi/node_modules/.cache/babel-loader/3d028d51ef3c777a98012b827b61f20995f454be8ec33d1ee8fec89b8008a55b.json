{"ast":null,"code":"import { defineProperty as e } from \"../../../_virtual/_rollupPluginBabelHelpers.js\";\nimport t from \"react\";\nimport { camelCase as s } from \"lodash-es\";\nimport { getTestId as r, ComponentDefaultTestId as i } from \"../../tests/testIds.js\";\nimport l from \"classnames\";\nimport { SkeletonType as o, SKELETON_SIZES as a, TextSkeletonSize as m, SKELETON_CUSTOM_SIZE as p } from \"./SkeletonConstants.js\";\nimport { getStyle as d } from \"../../helpers/typesciptCssModulesHelper.js\";\nimport { withStaticPropsWithoutForwardRef as c } from \"../../types/withStaticProps.js\";\nimport \"../../utils/colors-vars-map.js\";\nimport n from \"./Skeleton.module.scss.js\";\nvar u = c(function (a) {\n  var c = a.type,\n    u = void 0 === c ? \"rectangle\" : c,\n    f = a.size,\n    h = void 0 === f ? \"custom\" : f,\n    v = a.className,\n    j = a.wrapperClassName,\n    y = a.width,\n    g = a.height,\n    N = a.fullWidth,\n    w = void 0 !== N && N,\n    E = a.id,\n    S = a[\"data-testid\"],\n    b = Object.values(o).includes(u) ? u : \"rectangle\",\n    k = Object.values(m).includes(h) ? h : p;\n  return t.createElement(\"div\", {\n    id: E,\n    className: l(n.skeleton, j, e({}, n.fullWidth, w)),\n    \"data-testid\": S || r(i.SKELETON, E)\n  }, t.createElement(\"div\", {\n    className: l(n[b], d(n, s(b + \"-\" + k)), v, e({}, n.fullWidth, w)),\n    style: {\n      width: y,\n      height: g\n    }\n  }));\n}, {\n  types: o,\n  sizes: a\n});\nexport { u as default };","map":{"version":3,"names":["u","c","a","type","f","size","h","v","className","j","wrapperClassName","y","width","g","height","N","fullWidth","w","E","id","S","b","Object","values","o","includes","k","m","p","t","createElement","l","n","skeleton","e","r","i","SKELETON","d","s","style","types","sizes","default"],"sources":["/Users/ankish/Downloads/MA/MAPIT/untitledUi/node_modules/@vibe/core/src/components/Skeleton/Skeleton.tsx"],"sourcesContent":["import React from \"react\";\nimport { camelCase } from \"lodash-es\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport {\n  SKELETON_SIZES,\n  SkeletonType as SkeletonTypeEnum,\n  SKELETON_CUSTOM_SIZE,\n  TextSkeletonSize as TextSkeletonSizeEnum\n} from \"./SkeletonConstants\";\n\nimport { SkeletonType, SkeletonSizeType } from \"./Skelton.types\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { VibeComponentProps, withStaticPropsWithoutForwardRef } from \"../../types\";\nimport styles from \"./Skeleton.module.scss\";\n\nexport interface SkeletonProps extends VibeComponentProps {\n  /**\n   * The type of skeleton.\n   */\n  type?: SkeletonType;\n  /**\n   * The predefined size of the skeleton.\n   */\n  size?: SkeletonSizeType;\n  /**\n   * The width of the skeleton in pixels.\n   */\n  width?: number;\n  /**\n   * The height of the skeleton in pixels.\n   */\n  height?: number;\n  /**\n   * Class name applied to the wrapper element.\n   */\n  wrapperClassName?: string;\n  /**\n   * If true, the skeleton will take up the full width of its container.\n   */\n  fullWidth?: boolean;\n}\n\nconst Skeleton = ({\n  type = \"rectangle\",\n  size = \"custom\",\n  className,\n  wrapperClassName,\n  width,\n  height,\n  fullWidth = false,\n  id,\n  \"data-testid\": dataTestId\n}: SkeletonProps) => {\n  const skeletonType = (Object.values(SkeletonTypeEnum) as string[]).includes(type) ? type : \"rectangle\";\n\n  // Skeleton has sizes only for text type, other types support only custom size\n  const skeletonSize = (Object.values(TextSkeletonSizeEnum) as string[]).includes(size) ? size : SKELETON_CUSTOM_SIZE;\n\n  return (\n    <div\n      id={id}\n      className={cx(styles.skeleton, wrapperClassName, { [styles.fullWidth]: fullWidth })}\n      data-testid={dataTestId || getTestId(ComponentDefaultTestId.SKELETON, id)}\n    >\n      <div\n        className={cx(styles[skeletonType], getStyle(styles, camelCase(skeletonType + \"-\" + skeletonSize)), className, {\n          [styles.fullWidth]: fullWidth\n        })}\n        style={{ width, height }}\n      />\n    </div>\n  );\n};\n\ninterface SkeletonStaticProps {\n  types: typeof SkeletonTypeEnum;\n  sizes: typeof SKELETON_SIZES;\n}\n\nexport default withStaticPropsWithoutForwardRef<SkeletonProps, SkeletonStaticProps>(Skeleton, {\n  types: SkeletonTypeEnum,\n  sizes: SKELETON_SIZES\n});\n"],"mappings":";;;;;;;;;;AA2CA,IAqCeA,CAAA,GAAAC,CAAA,CArCE,UAAHC,CAAA;EAUM,IAAAD,CAAA,GAAAC,CAAA,CATlBC,IAAA;IAAAH,CAAA,QAAO,MAAHC,CAAA,GAAG,cAAWA,CAAA;IAAAG,CAAA,GAAAF,CAAA,CAClBG,IAAA;IAAAC,CAAA,QAAO,MAAHF,CAAA,GAAG,WAAQA,CAAA;IACfG,CAAA,GAASL,CAAA,CAATM,SAAA;IACAC,CAAA,GAAgBP,CAAA,CAAhBQ,gBAAA;IACAC,CAAA,GAAKT,CAAA,CAALU,KAAA;IACAC,CAAA,GAAMX,CAAA,CAANY,MAAA;IAAMC,CAAA,GAAAb,CAAA,CACNc,SAAA;IAAAC,CAAA,QAAY,MAAHF,CAAA,IAAQA,CAAA;IACjBG,CAAA,GAAEhB,CAAA,CAAFiB,EAAA;IACeC,CAAA,GAAUlB,CAAA,CAAzB;IAEMmB,CAAA,GAAgBC,MAAA,CAAOC,MAAA,CAAOC,CAAA,EAA+BC,QAAA,CAASzB,CAAA,IAAQA,CAAA,GAAO;IAGrF0B,CAAA,GAAgBJ,MAAA,CAAOC,MAAA,CAAOI,CAAA,EAAmCF,QAAA,CAASnB,CAAA,IAAQA,CAAA,GAAOsB,CAAA;EAE/F,OACEC,CAAA,CACEC,aAAA;IAAAX,EAAA,EAAID,CAAA;IACJV,SAAA,EAAWuB,CAAA,CAAGC,CAAA,CAAOC,QAAA,EAAUxB,CAAA,EAAgByB,CAAA,KAAKF,CAAA,CAAOhB,SAAA,EAAYC,CAAA;IAC1D,eAAAG,CAAA,IAAce,CAAA,CAAUC,CAAA,CAAuBC,QAAA,EAAUnB,CAAA;EAAA,GAEtEW,CAAA,CACEC,aAAA;IAAAtB,SAAA,EAAWuB,CAAA,CAAGC,CAAA,CAAOX,CAAA,GAAeiB,CAAA,CAASN,CAAA,EAAQO,CAAA,CAAUlB,CAAA,GAAe,MAAMK,CAAA,IAAgBnB,CAAA,EAAS2B,CAAA,CAC1G,IAAAF,CAAA,CAAOhB,SAAA,EAAYC,CAAA;IAEtBuB,KAAA,EAAO;MAAE5B,KAAA,EAAAD,CAAA;MAAOG,MAAA,EAAAD;IAAA;EAAA,GAIxB;AAAA,GAO8F;EAC5F4B,KAAA,EAAOjB,CAAA;EACPkB,KAAA,EAAOxC;AAAA;AAAA,SAAAF,CAAA,IAAA2C,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}