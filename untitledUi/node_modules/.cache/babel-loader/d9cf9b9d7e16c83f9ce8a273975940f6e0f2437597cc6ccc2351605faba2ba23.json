{"ast":null,"code":"import { inherits as e, createClass as o, classCallCheck as t, callSuper as i } from \"../../../_virtual/_rollupPluginBabelHelpers.js\";\nimport { isFunction as n, camelCase as s } from \"lodash-es\";\nimport a from \"classnames\";\nimport r, { isValidElement as l, PureComponent as p } from \"react\";\nimport h from \"../Dialog/Dialog.js\";\nimport { HideShowEvent as m, AnimationType as d } from \"../Dialog/DialogConstants.js\";\nimport { TooltipPositions as c, TooltipTheme as T } from \"./TooltipConstants.js\";\nimport { getStyle as u } from \"../../helpers/typesciptCssModulesHelper.js\";\nimport g from \"./Tooltip.module.scss.js\";\nimport { getTestId as w, ComponentDefaultTestId as f } from \"../../tests/testIds.js\";\nimport S from \"../Icon/Icon.js\";\nimport y from \"../Flex/Flex.js\";\nvar D = {\n    lastTooltipHideTS: null,\n    openTooltipsCount: 0\n  },\n  v = function (m) {\n    function d(e) {\n      var o;\n      return t(this, d), (o = i(this, d, [e])).renderTooltipContent = o.renderTooltipContent.bind(o), o.getShowDelay = o.getShowDelay.bind(o), o.onTooltipShow = o.onTooltipShow.bind(o), o.onTooltipHide = o.onTooltipHide.bind(o), o.wasShown = !1, o;\n    }\n    return e(d, p), o(d, [{\n      key: \"renderTooltipContent\",\n      value: function () {\n        var e,\n          o = this.props,\n          t = o.theme,\n          i = o.content,\n          p = o.className,\n          h = o.style,\n          m = o.maxWidth,\n          d = o.title,\n          c = o.image,\n          T = o.icon,\n          w = o.dir;\n        return i ? (n(i) ? e = i() : (l(i) || \"string\" == typeof i && i || Array.isArray(i) && i.length > 0) && (e = i), e ? r.createElement(\"div\", {\n          style: m ? Object.assign(Object.assign({}, h), {\n            \"--tooltip-max-width\": \"\".concat(m, \"px\")\n          }) : h,\n          className: a(g.tooltip, u(g, s(t)), p),\n          dir: w\n        }, c && r.createElement(\"img\", {\n          className: g.image,\n          src: c,\n          alt: \"\"\n        }), r.createElement(\"div\", {\n          className: a(g.content)\n        }, d && r.createElement(y, {\n          gap: \"xs\"\n        }, T && r.createElement(S, {\n          iconSize: \"20\",\n          icon: T\n        }), r.createElement(\"div\", {\n          className: g.title\n        }, d)), e)) : null) : null;\n      }\n    }, {\n      key: \"onTooltipShow\",\n      value: function () {\n        if (!this.wasShown) {\n          var e = this.props.onTooltipShow;\n          D.openTooltipsCount++, this.wasShown = !0, e && e();\n        }\n      }\n    }, {\n      key: \"onTooltipHide\",\n      value: function () {\n        if (this.wasShown) {\n          var e = this.props.onTooltipHide;\n          D.lastTooltipHideTS = Date.now(), D.openTooltipsCount--, this.wasShown = !1, e && e();\n        }\n      }\n    }, {\n      key: \"getTimeSinceLastTooltip\",\n      value: function () {\n        return D.openTooltipsCount > 0 ? 0 : D.lastTooltipHideTS ? Date.now() - D.lastTooltipHideTS : 1 / 0;\n      }\n    }, {\n      key: \"getShowDelay\",\n      value: function () {\n        var e = this.props,\n          o = e.showDelay,\n          t = e.immediateShowDelay,\n          i = this.getTimeSinceLastTooltip();\n        return (0 === t || t) && 1500 > i ? {\n          showDelay: t,\n          preventAnimation: !0\n        } : {\n          showDelay: o,\n          preventAnimation: !1\n        };\n      }\n    }, {\n      key: \"render\",\n      value: function () {\n        var e = this.props,\n          o = e.children,\n          t = e.theme,\n          i = e.tip,\n          n = e.arrowClassName,\n          s = e.id,\n          l = e[\"data-testid\"],\n          p = e.position;\n        if (!o && !e.forceRenderWithoutChildren) return null;\n        if (e.withoutDialog) return this.renderTooltipContent();\n        var m = this.renderTooltipContent,\n          d = Object.assign(Object.assign({}, this.props), {\n            position: p,\n            \"data-testid\": l || w(f.TOOLTIP, s),\n            tooltip: i,\n            content: m,\n            tooltipClassName: a(g.arrow, u(g, t), n),\n            onDialogDidHide: this.onTooltipHide,\n            onDialogDidShow: this.onTooltipShow,\n            getDynamicShowDelay: this.getShowDelay\n          });\n        return r.createElement(h, Object.assign({}, d, {\n          animationType: \"expand\"\n        }), o);\n      }\n    }]);\n  }();\nv.positions = c, v.hideShowTriggers = m, v.themes = T, v.animationTypes = d, v.defaultProps = {\n  moveBy: {\n    main: 4,\n    secondary: 0\n  },\n  theme: \"dark\",\n  position: \"top\",\n  hideDelay: 100,\n  showDelay: 300,\n  disableDialogSlide: !0,\n  animationType: d.EXPAND,\n  withoutDialog: !1,\n  tip: !0,\n  hideWhenReferenceHidden: !1,\n  modifiers: [],\n  showTrigger: v.hideShowTriggers.MOUSE_ENTER,\n  hideTrigger: v.hideShowTriggers.MOUSE_LEAVE,\n  showOnDialogEnter: !0,\n  referenceWrapperClassName: \"\",\n  addKeyboardHideShowTriggersByDefault: !0,\n  open: !1\n};\nexport { v as default };","map":{"version":3,"names":["D","lastTooltipHideTS","openTooltipsCount","v","m","d","e","o","t","i","renderTooltipContent","bind","getShowDelay","onTooltipShow","onTooltipHide","wasShown","p","key","value","props","theme","content","className","h","style","maxWidth","title","c","image","T","icon","w","dir","n","l","Array","isArray","length","r","createElement","Object","assign","concat","a","g","tooltip","u","s","src","alt","y","gap","S","iconSize","Date","now","showDelay","immediateShowDelay","getTimeSinceLastTooltip","preventAnimation","children","tip","arrowClassName","id","position","forceRenderWithoutChildren","withoutDialog","f","TOOLTIP","tooltipClassName","arrow","onDialogDidHide","onDialogDidShow","getDynamicShowDelay","animationType","positions","hideShowTriggers","themes","animationTypes","defaultProps","moveBy","main","secondary","hideDelay","disableDialogSlide","EXPAND","hideWhenReferenceHidden","modifiers","showTrigger","MOUSE_ENTER","hideTrigger","MOUSE_LEAVE","showOnDialogEnter","referenceWrapperClassName","addKeyboardHideShowTriggersByDefault","open","default"],"sources":["/Users/ankish/Downloads/MA/MAPIT/untitledUi/node_modules/@vibe/core/src/components/Tooltip/Tooltip.tsx"],"sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport { camelCase, isFunction } from \"lodash-es\";\nimport cx from \"classnames\";\nimport React, { CSSProperties, isValidElement, PureComponent, ReactElement } from \"react\";\nimport { Modifier } from \"react-popper\";\nimport Dialog from \"../Dialog/Dialog\";\nimport { DialogAnimationType, DialogTriggerEvent } from \"../Dialog/Dialog.types\";\nimport { HideShowEvent as HideShowEventEnum, AnimationType as AnimationTypeEnum } from \"../Dialog/DialogConstants\";\nimport VibeComponentProps from \"../../types/VibeComponentProps\";\nimport { TooltipTheme as TooltipThemeEnum, TooltipPositions as TooltipPositionsEnum } from \"./TooltipConstants\";\nimport { ElementContent } from \"../../types/ElementContent\";\nimport { MoveBy } from \"../../types/MoveBy\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport styles from \"./Tooltip.module.scss\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport { SubIcon } from \"../../types\";\nimport Icon from \"../Icon/Icon\";\nimport Flex from \"../Flex/Flex\";\nimport { TooltipPositions, TooltipTheme } from \"./Tooltip.types\";\n\nexport type TooltipProps = TooltipBaseProps & (TooltipWithChildrenProps | TooltipWithoutChildrenProps);\n\ninterface TooltipWithoutChildrenProps {\n  /**\n   * If true, the tooltip will be rendered even if there are no children.\n   */\n  forceRenderWithoutChildren: boolean;\n  /**\n   * The children elements that the tooltip is attached to.\n   */\n  children?: ReactElement | Array<ReactElement>;\n}\n\ninterface TooltipWithChildrenProps {\n  /**\n   * If true, the tooltip will be rendered even if there are no children.\n   */\n  forceRenderWithoutChildren?: boolean;\n  /**\n   * The children elements that the tooltip is attached to.\n   */\n  children: ReactElement | Array<ReactElement>;\n}\n\n// TODO TS-migration extend DialogProps, once Dialog is migrated to TS\ninterface TooltipBaseProps extends VibeComponentProps {\n  /**\n   * The content displayed inside the tooltip.\n   */\n  content: ElementContent;\n  /**\n   * Inline styles applied to the tooltip container.\n   */\n  style?: CSSProperties;\n  /**\n   * Class name applied to the tooltip arrow.\n   */\n  arrowClassName?: string;\n  /**\n   * Offset values for positioning adjustments.\n   */\n  moveBy?: MoveBy;\n  /**\n   * The theme of the tooltip.\n   */\n  theme?: TooltipTheme;\n  /**\n   * Function to get the container where the tooltip should be rendered.\n   */\n  getContainer?: () => HTMLElement;\n  /**\n   * Delay in milliseconds before hiding the tooltip.\n   */\n  hideDelay?: number;\n  /**\n   * Delay in milliseconds before showing the tooltip.\n   */\n  showDelay?: number;\n  /**\n   * If true, disables the slide animation of the tooltip.\n   */\n  disableDialogSlide?: boolean;\n  /**\n   * The animation type used for showing/hiding the tooltip.\n   */\n  animationType?: DialogAnimationType;\n  /**\n   * If true, renders the tooltip without a dialog.\n   */\n  withoutDialog?: boolean;\n  /**\n   * The CSS selector of the container where the tooltip should be rendered.\n   */\n  containerSelector?: string;\n  /**\n   * Delay in milliseconds before showing the tooltip immediately.\n   */\n  immediateShowDelay?: number;\n  /**\n   * If false, hides the arrow of the tooltip.\n   */\n  tip?: boolean;\n  /**\n   * If true, the tooltip is shown when the component mounts.\n   */\n  shouldShowOnMount?: boolean;\n  /**\n   * If true, hides the tooltip when the reference element is hidden.\n   */\n  hideWhenReferenceHidden?: boolean;\n  /**\n   * Callback fired when the tooltip is hidden.\n   */\n  onTooltipHide?: () => void;\n  /**\n   * Callback fired when the tooltip is shown.\n   */\n  onTooltipShow?: () => void;\n  /**\n   * Custom Popper.js modifiers.\n   * https://popper.js.org/docs/v2/modifiers/\n   */\n  modifiers?: Array<Modifier<unknown>>;\n  /**\n   * The placement of the tooltip relative to the reference element.\n   */\n  position?: TooltipPositions;\n  /**\n   * Events that trigger showing the tooltip.\n   */\n  showTrigger?: DialogTriggerEvent | Array<DialogTriggerEvent>;\n  /**\n   * Events that trigger hiding the tooltip.\n   */\n  hideTrigger?: DialogTriggerEvent | Array<DialogTriggerEvent>;\n  /**\n   * If true, prevents closing the tooltip when the mouse enters it.\n   */\n  showOnDialogEnter?: boolean;\n  /**\n   * Class name applied to the reference wrapper element.\n   */\n  referenceWrapperClassName?: string;\n  /**\n   * If true, keyboard focus/blur events behave like mouse enter/leave.\n   */\n  addKeyboardHideShowTriggersByDefault?: boolean;\n  /**\n   * If true, controls the open state of the tooltip.\n   */\n  open?: boolean;\n  /**\n   * The z-index applied to the tooltip.\n   */\n  zIndex?: number;\n  /**\n   * The title of the tooltip.\n   */\n  title?: string;\n  /**\n   * The image displayed inside the tooltip.\n   */\n  image?: string;\n  /**\n   * The icon displayed next to the title.\n   */\n  icon?: SubIcon;\n  /**\n   * The maximum width of the tooltip.\n   */\n  maxWidth?: number;\n  /**\n   * The text direction of the tooltip: \"ltr\", \"rtl\", or \"auto\".\n   */\n  dir?: \"ltr\" | \"rtl\" | \"auto\";\n}\n// When last tooltip was shown in the last 1.5 second - the next tooltip will be shown immediately\nconst IMMEDIATE_SHOW_THRESHOLD_MS = 1500;\n\n// Shared state across multiple tooltip instances (i.e last tooltip shown time)\nconst globalState: { lastTooltipHideTS: number; openTooltipsCount: number } = {\n  lastTooltipHideTS: null,\n  openTooltipsCount: 0\n};\n\nexport default class Tooltip extends PureComponent<TooltipProps> {\n  wasShown: boolean;\n  static positions = TooltipPositionsEnum;\n  static hideShowTriggers = HideShowEventEnum;\n  static themes = TooltipThemeEnum;\n  static animationTypes = AnimationTypeEnum;\n  static defaultProps = {\n    moveBy: { main: 4, secondary: 0 },\n    theme: \"dark\",\n    position: \"top\",\n    hideDelay: 100,\n    showDelay: 300,\n    disableDialogSlide: true,\n    animationType: AnimationTypeEnum.EXPAND,\n    withoutDialog: false,\n    tip: true,\n    hideWhenReferenceHidden: false,\n    modifiers: new Array<Modifier<unknown>>(),\n    showTrigger: Tooltip.hideShowTriggers.MOUSE_ENTER,\n    hideTrigger: Tooltip.hideShowTriggers.MOUSE_LEAVE,\n    showOnDialogEnter: true,\n    referenceWrapperClassName: \"\",\n    addKeyboardHideShowTriggersByDefault: true,\n    open: false\n  };\n  constructor(props: TooltipProps) {\n    super(props);\n    this.renderTooltipContent = this.renderTooltipContent.bind(this);\n    this.getShowDelay = this.getShowDelay.bind(this);\n    this.onTooltipShow = this.onTooltipShow.bind(this);\n    this.onTooltipHide = this.onTooltipHide.bind(this);\n\n    this.wasShown = false;\n  }\n\n  renderTooltipContent() {\n    const { theme, content, className, style, maxWidth, title, image, icon, dir } = this.props;\n    if (!content) {\n      // don't render empty tooltip\n      return null;\n    }\n    let contentValue;\n    if (isFunction(content)) {\n      contentValue = content();\n    } else if (isValidElement(content)) {\n      contentValue = content;\n    } else if (typeof content === \"string\" && content) {\n      contentValue = content;\n    } else if (Array.isArray(content) && content.length > 0) {\n      // allow array of elements\n      contentValue = content;\n    }\n\n    if (!contentValue) {\n      return null;\n    }\n\n    return (\n      <div\n        style={maxWidth ? ({ ...style, \"--tooltip-max-width\": `${maxWidth}px` } as CSSProperties) : style}\n        className={cx(styles.tooltip, getStyle(styles, camelCase(theme)), className)}\n        dir={dir}\n      >\n        {image && <img className={styles.image} src={image} alt=\"\" />}\n        <div className={cx(styles.content)}>\n          {title && (\n            <Flex gap=\"xs\">\n              {icon && <Icon iconSize=\"20\" icon={icon} />}\n              <div className={styles.title}>{title}</div>\n            </Flex>\n          )}\n          {contentValue}\n        </div>\n      </div>\n    );\n  }\n\n  onTooltipShow() {\n    if (!this.wasShown) {\n      const { onTooltipShow } = this.props;\n      globalState.openTooltipsCount++;\n      this.wasShown = true;\n      onTooltipShow && onTooltipShow();\n    }\n  }\n\n  onTooltipHide() {\n    if (this.wasShown) {\n      const { onTooltipHide } = this.props;\n      globalState.lastTooltipHideTS = Date.now();\n      globalState.openTooltipsCount--;\n      this.wasShown = false;\n      onTooltipHide && onTooltipHide();\n    }\n  }\n\n  getTimeSinceLastTooltip() {\n    if (globalState.openTooltipsCount > 0) {\n      return 0;\n    }\n    return globalState.lastTooltipHideTS ? Date.now() - globalState.lastTooltipHideTS : Infinity;\n  }\n\n  getShowDelay() {\n    const { showDelay, immediateShowDelay } = this.props;\n    const timeSinceLastTooltip = this.getTimeSinceLastTooltip();\n    if ((immediateShowDelay === 0 || immediateShowDelay) && timeSinceLastTooltip < IMMEDIATE_SHOW_THRESHOLD_MS) {\n      // showing the tooltip immediately (without animation)\n      return {\n        showDelay: immediateShowDelay,\n        preventAnimation: true\n      };\n    }\n    return {\n      showDelay,\n      preventAnimation: false\n    };\n  }\n\n  render() {\n    const {\n      withoutDialog,\n      children,\n      forceRenderWithoutChildren,\n      theme,\n      tip,\n      arrowClassName,\n      id,\n      \"data-testid\": dataTestId,\n      position\n    } = this.props;\n\n    if (!children && !forceRenderWithoutChildren) {\n      return null;\n    }\n\n    if (withoutDialog) {\n      return this.renderTooltipContent();\n    }\n\n    const content = this.renderTooltipContent;\n    const dialogProps = {\n      ...this.props,\n      position: position,\n      \"data-testid\": dataTestId || getTestId(ComponentDefaultTestId.TOOLTIP, id),\n      tooltip: tip,\n      content,\n      tooltipClassName: cx(styles.arrow, getStyle(styles, theme), arrowClassName),\n      onDialogDidHide: this.onTooltipHide,\n      onDialogDidShow: this.onTooltipShow,\n      getDynamicShowDelay: this.getShowDelay\n    };\n    return (\n      <Dialog {...dialogProps} animationType=\"expand\">\n        {children}\n      </Dialog>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}