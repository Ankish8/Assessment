{"ast":null,"code":"import { slicedToArray as e } from \"../../../_virtual/_rollupPluginBabelHelpers.js\";\nimport o, { useState as t, useRef as r, useMemo as n, useCallback as i } from \"react\";\nimport l from \"../Tooltip/Tooltip.js\";\nimport a from \"./AvatarGroupCounterTooltipContent.js\";\nimport { useTooltipContentTabNavigation as s } from \"./AvatarGroupCounterTooltipHelper.js\";\nimport { AVATAR_GROUP_COUNTER_TOOLTIP_SHOW_DELAY as u } from \"./AvatarGroupConstants.js\";\nvar c = function (c) {\n  var p = c.focusPrevPlaceholderRef,\n    f = c.focusNextPlaceholderRef,\n    d = c.counterContainerRef,\n    m = c.children,\n    v = void 0 === m ? [] : m,\n    T = c.avatars,\n    C = void 0 === T ? [] : T,\n    h = c.type,\n    g = c.className,\n    P = c.counterTooltipCustomProps,\n    R = c.counterTooltipIsVirtualizedList,\n    b = void 0 !== R && R,\n    j = t(!1),\n    y = e(j, 2),\n    A = y[0],\n    N = y[1],\n    V = r(null),\n    x = n(function () {\n      return (null == P ? void 0 : P.content) || o.createElement(a, {\n        avatars: C,\n        type: h,\n        className: g,\n        isVirtualizedList: b,\n        tooltipContentContainerRef: V\n      });\n    }, [C, g, null == P ? void 0 : P.content, b, h]);\n  s({\n    counterContainerRef: d,\n    tooltipContentContainerRef: V,\n    focusPrevPlaceholderRef: p,\n    focusNextPlaceholderRef: f,\n    setIsKeyboardTooltipVisible: N,\n    isKeyboardTooltipVisible: A\n  });\n  var E = i(function () {\n    N(!1);\n  }, []);\n  return (null == C ? void 0 : C.length) || (null == P ? void 0 : P.content) ? o.createElement(l, Object.assign({\n    open: A,\n    hideDelay: u,\n    showTrigger: [\"mouseenter\"],\n    hideTrigger: [\"mouseleave\"],\n    onTooltipHide: E\n  }, P || {}, {\n    content: x\n  }), v) : o.createElement(o.Fragment, null, v);\n};\nexport { c as default };","map":{"version":3,"names":["c","AvatarGroupCounterTooltipContainer","p","focusPrevPlaceholderRef","f","focusNextPlaceholderRef","d","counterContainerRef","m","children","v","T","avatars","C","h","type","g","className","P","counterTooltipCustomProps","R","counterTooltipIsVirtualizedList","b","j","t","y","e","A","N","V","r","x","n","content","o","createElement","a","isVirtualizedList","tooltipContentContainerRef","s","setIsKeyboardTooltipVisible","isKeyboardTooltipVisible","E","i","length","l","Object","assign","open","hideDelay","u","showTrigger","hideTrigger","onTooltipHide","Fragment","default"],"sources":["/Users/ankish/Downloads/MA/MAPIT/untitledUi/node_modules/@vibe/core/src/components/AvatarGroup/AvatarGroupCounterTooltipContainer.tsx"],"sourcesContent":["import React, { ReactElement, RefObject, useCallback, useMemo, useRef, useState } from \"react\";\nimport Tooltip, { TooltipProps } from \"../Tooltip/Tooltip\";\nimport { AvatarProps } from \"../Avatar/Avatar\";\nimport AvatarGroupCounterTooltipContent from \"./AvatarGroupCounterTooltipContent\";\nimport { useTooltipContentTabNavigation } from \"./AvatarGroupCounterTooltipHelper\";\nimport VibeComponentProps from \"../../types/VibeComponentProps\";\nimport { AvatarType } from \"../Avatar/Avatar.types\";\nimport { AVATAR_GROUP_COUNTER_TOOLTIP_SHOW_DELAY } from \"./AvatarGroupConstants\";\n\nexport interface AvatarGroupCounterTooltipContainerProps extends VibeComponentProps {\n  /**\n   * The type of avatars displayed in the tooltip.\n   */\n  type?: AvatarType;\n  /**\n   * The counter element and focus placeholders.\n   */\n  children?: ReactElement[];\n  /**\n   * The list of avatars displayed inside the tooltip.\n   */\n  avatars?: ReactElement<AvatarProps>[];\n  /**\n   * Props passed to the Tooltip component. See full options in the [Tooltip documentation](https://vibe.monday.com/?path=/docs/components-tooltip--docs).\n   */\n  counterTooltipCustomProps?: Partial<TooltipProps>;\n  /**\n   * If true, the tooltip uses a virtualized list for performance optimization.\n   */\n  counterTooltipIsVirtualizedList?: boolean;\n  /**\n   * Ref for the element before the tooltip content, used for keyboard navigation.\n   */\n  focusPrevPlaceholderRef?: RefObject<HTMLDivElement>;\n  /**\n   * Ref for the element after the tooltip content, used for keyboard navigation.\n   */\n  focusNextPlaceholderRef?: RefObject<HTMLDivElement>;\n  /**\n   * Ref for the counter container element.\n   */\n  counterContainerRef?: RefObject<HTMLDivElement>;\n}\n\nconst AvatarGroupCounterTooltipContainer: React.FC<AvatarGroupCounterTooltipContainerProps> = ({\n  focusPrevPlaceholderRef,\n  focusNextPlaceholderRef,\n  counterContainerRef,\n  children = [],\n  avatars = [],\n  type,\n  className,\n  counterTooltipCustomProps,\n  counterTooltipIsVirtualizedList = false\n}) => {\n  const [isKeyboardTooltipVisible, setIsKeyboardTooltipVisible] = useState(false);\n  const tooltipContentContainerRef = useRef(null);\n  const tooltipContent = useMemo(\n    () =>\n      counterTooltipCustomProps?.content || (\n        <AvatarGroupCounterTooltipContent\n          avatars={avatars}\n          type={type}\n          className={className}\n          isVirtualizedList={counterTooltipIsVirtualizedList}\n          tooltipContentContainerRef={tooltipContentContainerRef}\n        />\n      ),\n    [avatars, className, counterTooltipCustomProps?.content, counterTooltipIsVirtualizedList, type]\n  );\n\n  useTooltipContentTabNavigation({\n    counterContainerRef,\n    tooltipContentContainerRef,\n    focusPrevPlaceholderRef,\n    focusNextPlaceholderRef,\n    setIsKeyboardTooltipVisible,\n    isKeyboardTooltipVisible\n  });\n\n  // Tooltip props\n  const onHide = useCallback(() => {\n    setIsKeyboardTooltipVisible(false);\n  }, []);\n\n  if (!avatars?.length && !counterTooltipCustomProps?.content) {\n    return <>{children}</>;\n  }\n  return (\n    <Tooltip\n      open={isKeyboardTooltipVisible}\n      hideDelay={AVATAR_GROUP_COUNTER_TOOLTIP_SHOW_DELAY}\n      showTrigger={[\"mouseenter\"]}\n      hideTrigger={[\"mouseleave\"]}\n      onTooltipHide={onHide}\n      {...(counterTooltipCustomProps || {})}\n      content={tooltipContent}\n    >\n      {children}\n    </Tooltip>\n  );\n};\n\nexport default AvatarGroupCounterTooltipContainer;\n"],"mappings":";;;;;;AA4CA,IAAMA,CAAA,GAAwF,SAAAC,CAAtDD,CAAA;EAUnC,IATHE,CAAA,GAAuBF,CAAA,CAAvBG,uBAAA;IACAC,CAAA,GAAuBJ,CAAA,CAAvBK,uBAAA;IACAC,CAAA,GAAmBN,CAAA,CAAnBO,mBAAA;IAAmBC,CAAA,GAAAR,CAAA,CACnBS,QAAA;IAAAC,CAAA,QAAW,MAAHF,CAAA,GAAG,KAAEA,CAAA;IAAAG,CAAA,GAAAX,CAAA,CACbY,OAAA;IAAAC,CAAA,QAAU,MAAHF,CAAA,GAAG,KAAEA,CAAA;IACZG,CAAA,GAAId,CAAA,CAAJe,IAAA;IACAC,CAAA,GAAShB,CAAA,CAATiB,SAAA;IACAC,CAAA,GAAyBlB,CAAA,CAAzBmB,yBAAA;IAAyBC,CAAA,GAAApB,CAAA,CACzBqB,+BAAA;IAAAC,CAAA,QAAkC,MAAHF,CAAA,IAAQA,CAAA;IAEvCG,CAAA,GAAgEC,CAAA,EAAS;IAAMC,CAAA,GAAAC,CAAA,CAAAH,CAAA;IAAxEI,CAAA,GAAwBF,CAAA;IAAEG,CAAA,GAA2BH,CAAA;IACtDI,CAAA,GAA6BC,CAAA,CAAO;IACpCC,CAAA,GAAiBC,CAAA,CACrB;MAAA,QACE,QAAAd,CAAA,QAAyB,IAAzBA,CAAA,CAA2Be,OAAA,KACzBC,CAAA,CAAAC,aAAA,CAACC,CAAA,EAAgC;QAC/BxB,OAAA,EAASC,CAAA;QACTE,IAAA,EAAMD,CAAA;QACNG,SAAA,EAAWD,CAAA;QACXqB,iBAAA,EAAmBf,CAAA;QACnBgB,0BAAA,EAA4BT;MAAA,EAGlC;IAAA,IAAChB,CAAA,EAASG,CAAA,EAAW,QAAAE,CAAA,YAAAA,CAAA,CAA2Be,OAAA,EAASX,CAAA,EAAiCR,CAAA;EAG5FyB,CAAA,CAA+B;IAC7BhC,mBAAA,EAAAD,CAAA;IACAgC,0BAAA,EAAAT,CAAA;IACA1B,uBAAA,EAAAD,CAAA;IACAG,uBAAA,EAAAD,CAAA;IACAoC,2BAAA,EAAAZ,CAAA;IACAa,wBAAA,EAAAd;EAAA;EAIF,IAAMe,CAAA,GAASC,CAAA,CAAY;IACzBf,CAAA,EAA4B,EAC7B;EAAA,GAAE;EAEH,QAAK,QAAAf,CAAA,YAAAA,CAAA,CAAS+B,MAAA,MAAW,QAAA1B,CAAA,YAAAA,CAAA,CAA2Be,OAAA,IAIlDC,CAAA,CAACC,aAAA,CAAAU,CAAA,EAAAC,MAAA,CAAAC,MAAA;IACCC,IAAA,EAAMrB,CAAA;IACNsB,SAAA,EAAWC,CAAA;IACXC,WAAA,EAAa,CAAC;IACdC,WAAA,EAAa,CAAC;IACdC,aAAA,EAAeX;EAAA,GACVxB,CAAA,IAA6B,IAAG;IACrCe,OAAA,EAASF;EAAA,IAERrB,CAAA,IAZIwB,CAAA,CAAAC,aAAA,CAAAD,CAAA,CAAAoB,QAAA,QAAG5C,CAAA,CAed;AAAA;AAAA,SAAAV,CAAA,IAAAuD,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}