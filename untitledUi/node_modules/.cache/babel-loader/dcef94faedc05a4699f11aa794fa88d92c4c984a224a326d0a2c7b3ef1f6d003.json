{"ast":null,"code":"import { typeof as t, defineProperty as e } from \"../../../../_virtual/_rollupPluginBabelHelpers.js\";\nimport r, { forwardRef as s } from \"react\";\nimport a from \"../../Text/Text.js\";\nimport l from \"./TableCell.module.scss.js\";\nimport o from \"classnames\";\nimport { getTestId as i } from \"../../../tests/testIds.js\";\nimport { ComponentDefaultTestId as m } from \"../../../tests/constants.js\";\nvar n = s(function (s, n) {\n  var c = s.sticky,\n    d = s.id,\n    p = s.className,\n    f = s[\"data-testid\"],\n    u = s.children,\n    y = 1 === r.Children.count(u),\n    j = t(r.Children.toArray(u)[0]),\n    C = \"string\" === j || \"number\" === j;\n  return r.createElement(\"div\", {\n    ref: n,\n    id: d,\n    className: o(l.tableCell, e({}, l.sticky, c), p),\n    \"data-testid\": f || i(m.TABLE_CELL, d),\n    role: \"cell\"\n  }, y && C ? r.createElement(a, {\n    type: \"text2\",\n    color: \"primary\"\n  }, u) : u);\n});\nexport { n as default };","map":{"version":3,"names":["n","s","c","sticky","d","id","p","className","f","u","children","y","r","Children","count","j","t","toArray","C","createElement","ref","o","l","tableCell","e","i","m","TABLE_CELL","role","a","type","color","default"],"sources":["/Users/ankish/Downloads/MA/MAPIT/untitledUi/node_modules/@vibe/core/src/components/Table/TableCell/TableCell.tsx"],"sourcesContent":["import React, { forwardRef } from \"react\";\nimport { VibeComponentProps } from \"../../../types\";\nimport Text from \"../../Text/Text\";\nimport styles from \"./TableCell.module.scss\";\nimport cx from \"classnames\";\nimport { getTestId } from \"../../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../../tests/constants\";\n\nexport interface TableCellProps extends VibeComponentProps {\n  /**\n   * The content inside the table cell.\n   */\n  children?: React.ReactNode;\n  /**\n   * If true, makes the cell sticky (typically used for frozen columns).\n   */\n  sticky?: boolean;\n}\n\nconst TableCell = forwardRef(\n  (\n    { sticky, id, className, \"data-testid\": dataTestId, children }: TableCellProps,\n    ref: React.ForwardedRef<HTMLDivElement>\n  ) => {\n    const isSingleChild = React.Children.count(children) === 1;\n    const typeOfFirstChild = typeof React.Children.toArray(children)[0];\n    const isFirstChildString = typeOfFirstChild === \"string\" || typeOfFirstChild === \"number\";\n\n    return (\n      <div\n        ref={ref}\n        id={id}\n        className={cx(styles.tableCell, { [styles.sticky]: sticky }, className)}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.TABLE_CELL, id)}\n        role=\"cell\"\n      >\n        {isSingleChild && isFirstChildString ? (\n          <Text type=\"text2\" color=\"primary\">\n            {children}\n          </Text>\n        ) : (\n          children\n        )}\n      </div>\n    );\n  }\n);\n\nexport default TableCell;\n"],"mappings":";;;;;;;AAmBM,IAAAA,CAAA,GAAYC,CAAA,CAChB,UAAAA,CAAA,EAEED,CAAA;EACE,IAFAE,CAAA,GAAMD,CAAA,CAANE,MAAA;IAAQC,CAAA,GAAEH,CAAA,CAAFI,EAAA;IAAIC,CAAA,GAASL,CAAA,CAATM,SAAA;IAA0BC,CAAA,GAAUP,CAAA,CAAzB;IAA2BQ,CAAA,GAAQR,CAAA,CAARS,QAAA;IAG9CC,CAAA,GAAmD,MAAnCC,CAAA,CAAMC,QAAA,CAASC,KAAA,CAAML,CAAA;IACrCM,CAAA,GAAgBC,CAAA,CAAUJ,CAAA,CAAMC,QAAA,CAASI,OAAA,CAAQR,CAAA,EAAU;IAC3DS,CAAA,GAA0C,aAArBH,CAAA,IAAsD,aAArBA,CAAA;EAE5D,OACEH,CAAA,CAAAO,aAAA;IACEC,GAAA,EAAKpB,CAAA;IACLK,EAAA,EAAID,CAAA;IACJG,SAAA,EAAWc,CAAA,CAAGC,CAAA,CAAOC,SAAA,EAASC,CAAA,CAAK,IAAAF,CAAA,CAAOnB,MAAA,EAASD,CAAA,GAAUI,CAAA;IAChD,eAAAE,CAAA,IAAciB,CAAA,CAAUC,CAAA,CAAuBC,UAAA,EAAYvB,CAAA;IACxEwB,IAAA,EAAK;EAAA,GAEJjB,CAAA,IAAiBO,CAAA,GAChBN,CAAA,CAAAO,aAAA,CAACU,CAAA,EAAK;IAAAC,IAAA,EAAK;IAAQC,KAAA,EAAM;EAAA,GACtBtB,CAAA,IAGHA,CAAA,CAIR;AAAA;AAAA,SAAAT,CAAA,IAAAgC,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}