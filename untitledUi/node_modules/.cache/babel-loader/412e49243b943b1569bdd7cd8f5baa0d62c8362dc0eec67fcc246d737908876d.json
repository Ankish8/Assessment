{"ast":null,"code":"var e = function (e, r, n) {\n    var t = e.reduce(function (e, t) {\n      var o,\n        u = t.categoryId;\n      return u ? ((null === (o = r[u]) || void 0 === o ? void 0 : o.onlyShowOnSearch) && !n || (e[u] ? e[u].push(t) : e[u] = [t]), e) : e;\n    }, {});\n    return Object.keys(r).reduce(function (e, r) {\n      return t[r] && (e[r] = t[r]), e;\n    }, {});\n  },\n  r = function (e, r) {\n    return r.filter(function (r) {\n      return !e || r.label.toLowerCase().includes(e.toLowerCase());\n    });\n  };\nexport { r as defaultFilter, e as getOptionsByCategories };","map":{"version":3,"names":["e","getOptionsByCategories","r","n","t","reduce","o","u","categoryId","onlyShowOnSearch","push","Object","keys","defaultFilter","filter","label","toLowerCase","includes"],"sources":["/Users/ankish/Downloads/MA/MAPIT/untitledUi/node_modules/@vibe/core/src/components/Combobox/ComboboxService.ts"],"sourcesContent":["import { IComboboxCategoryMap, IComboboxOption } from \"./components/ComboboxConstants\";\n\ntype OptionsByCategories = {\n  [key: string]: Array<IComboboxOption>;\n};\n\nexport const getOptionsByCategories = (\n  options: IComboboxOption[],\n  categories: IComboboxCategoryMap,\n  filterValue: string\n): OptionsByCategories => {\n  const optionsByCategories = options.reduce((result: OptionsByCategories, option) => {\n    const categoryId = option.categoryId;\n    // skipping if the option doesn't have a category\n    if (!categoryId) return result;\n    if (categories[categoryId]?.onlyShowOnSearch && !filterValue) return result;\n\n    if (result[categoryId]) {\n      result[categoryId].push(option);\n    } else {\n      result[categoryId] = [option];\n    }\n\n    return result;\n  }, {});\n\n  // reorder the keys according to the categories order\n  return Object.keys(categories).reduce((result: OptionsByCategories, categoryId) => {\n    if (optionsByCategories[categoryId]) result[categoryId] = optionsByCategories[categoryId];\n\n    return result;\n  }, {});\n};\n\nexport const defaultFilter = (filterValue: string, options: IComboboxOption[]) =>\n  options.filter(\n    ({ label }: { label: string }) => !filterValue || label.toLowerCase().includes(filterValue.toLowerCase())\n  );\n"],"mappings":"AAMO,IAAMA,CAAA,GAAyB,SAAAC,CACpCD,CAAA,EACAE,CAAA,EACAC,CAAA;IAEA,IAAMC,CAAA,GAAsBJ,CAAA,CAAQK,MAAA,CAAO,UAACL,CAAA,EAA6BI,CAAA;MAAA,IAAAE,CAAA;QACjEC,CAAA,GAAaH,CAAA,CAAOI,UAAA;MAE1B,OAAKD,CAAA,KACuB,UAAxBD,CAAA,GAAAJ,CAAA,CAAWK,CAAA,WAAa,MAAAD,CAAA,YAAAA,CAAA,CAAAG,gBAAA,MAAqBN,CAAA,KAE7CH,CAAA,CAAOO,CAAA,IACTP,CAAA,CAAOO,CAAA,EAAYG,IAAA,CAAKN,CAAA,IAExBJ,CAAA,CAAOO,CAAA,IAAc,CAACH,CAAA,IAL6CJ,CAAA,IAD7CA,CAUzB;IAAA,GAAE,CAAE;IAGL,OAAOW,MAAA,CAAOC,IAAA,CAAKV,CAAA,EAAYG,MAAA,CAAO,UAACL,CAAA,EAA6BE,CAAA;MAGlE,OAFIE,CAAA,CAAoBF,CAAA,MAAaF,CAAA,CAAOE,CAAA,IAAcE,CAAA,CAAoBF,CAAA,IAEvEF,CACR;IAAA,GAAE,CAAE,EACP;EAAA;EAEaE,CAAA,GAAgB,SAAAW,CAACb,CAAA,EAAqBE,CAAA;IAA0B,OAC3EA,CAAA,CAAQY,MAAA,CACN,UAAAZ,CAAA;MAAQ,QAA2BF,CAAA,IAA3BE,CAAA,CAALa,KAAA,CAAqDC,WAAA,GAAcC,QAAA,CAASjB,CAAA,CAAYgB,WAAA;IAAA,EAC5F;EAAA;AAAA,SAAAd,CAAA,IAAAW,aAAA,EAAAb,CAAA,IAAAC,sBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}