{"ast":null,"code":"import { typeof as t } from \"../../../_virtual/_rollupPluginBabelHelpers.js\";\nimport { getTestId as o, ComponentDefaultTestId as e } from \"../../tests/testIds.js\";\nimport s from \"classnames\";\nimport r, { forwardRef as i } from \"react\";\nimport a from \"../../hooks/useMergeRef.js\";\nimport { IconType as n } from \"./IconConstants.js\";\nimport c from \"./CustomSvgIcon/CustomSvgIcon.js\";\nimport l from \"./FontIcon/FontIcon.js\";\nimport m from \"./hooks/useIconProps.js\";\nimport { withStaticProps as d } from \"../../types/withStaticProps.js\";\nimport \"../../utils/colors-vars-map.js\";\nimport { ComponentVibeId as p } from \"../../tests/constants.js\";\nvar u = d(i(function (i, n) {\n  var d = i.id,\n    u = i.icon,\n    f = void 0 === u ? \"\" : u,\n    C = i.iconType,\n    j = void 0 === C ? \"svg\" : C,\n    v = i.iconSize,\n    b = void 0 === v ? 16 : v,\n    g = i.ignoreFocusStyle,\n    I = i.tabindex,\n    y = i.style,\n    N = i.useCurrentColor,\n    O = void 0 !== N && N,\n    k = i.customColor,\n    S = i[\"data-testid\"],\n    x = m({\n      iconLabel: i.iconLabel,\n      className: i.className,\n      isDecorationOnly: i.ariaHidden,\n      ignoreFocusStyle: void 0 !== g && g,\n      externalTabIndex: I && +I\n    }),\n    F = x.screenReaderAccessProps,\n    P = x.onClickCallback,\n    h = x.computedClassName,\n    E = a(n, x.iconRef);\n  if (!f) return null;\n  var R = \"function\" == typeof f,\n    T = S || o(e.ICON, d);\n  return \"svg\" === j || R || \"object\" === t(f) ? function (t, s) {\n    return r.createElement(t, Object.assign({}, s, {\n      \"data-testid\": s[\"data-testid\"] || o(e.ICON, s.id),\n      \"data-vibe\": p.ICON\n    }));\n  }(f, Object.assign(Object.assign({\n    id: d\n  }, F), {\n    ref: R ? void 0 : E,\n    size: \"\" + b,\n    className: h,\n    style: y,\n    \"data-testid\": T\n  })) : \"src\" === j ? r.createElement(c, Object.assign({\n    id: d,\n    src: f\n  }, F, {\n    className: s(h),\n    onClick: P,\n    replaceToCurrentColor: O,\n    customColor: k,\n    \"data-testid\": T\n  })) : r.createElement(l, Object.assign({\n    id: d\n  }, F, {\n    className: s(h),\n    onClick: P,\n    ref: E,\n    icon: f,\n    \"data-testid\": T\n  }));\n}), {\n  type: n\n});\nexport { u as default };","map":{"version":3,"names":["u","d","i","n","id","icon","f","C","iconType","j","v","iconSize","b","g","ignoreFocusStyle","I","tabindex","y","style","N","useCurrentColor","O","k","customColor","S","x","m","iconLabel","className","isDecorationOnly","ariaHidden","externalTabIndex","F","screenReaderAccessProps","P","onClickCallback","h","computedClassName","E","a","iconRef","R","T","o","e","ICON","t","s","r","createElement","Object","assign","p","ref","size","c","src","onClick","replaceToCurrentColor","l","type","default"],"sources":["/Users/ankish/Downloads/MA/MAPIT/untitledUi/node_modules/@vibe/core/src/components/Icon/Icon.tsx"],"sourcesContent":["import { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React, { CSSProperties, forwardRef, Ref } from \"react\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport { IconType as IconTypeEnum } from \"./IconConstants\";\nimport { IconType } from \"./Icon.types\";\nimport CustomSvgIcon from \"./CustomSvgIcon/CustomSvgIcon\";\nimport FontIcon from \"./FontIcon/FontIcon\";\nimport useIconProps from \"./hooks/useIconProps\";\nimport { VibeComponentProps, SubIcon, withStaticProps } from \"../../types\";\nimport { ComponentVibeId } from \"../../tests/constants\";\n\nexport interface IconSubComponentProps {\n  /**\n   * Ref for the icon component.\n   */\n  ref?: Ref<HTMLElement>;\n  /**\n   * The ID of the icon component.\n   */\n  id?: string;\n  /**\n   * The size of the icon.\n   */\n  size?: string | number;\n  /**\n   * Class name applied to the icon.\n   */\n  className?: string;\n  /**\n   * Inline styles applied to the icon.\n   */\n  style?: CSSProperties;\n  /**\n   * Test ID for testing purposes.\n   */\n  \"data-testid\"?: string;\n}\n\nfunction renderIcon(Icon: SubIcon, props: IconSubComponentProps) {\n  const dataTestId = props[\"data-testid\"];\n  return (\n    <Icon\n      {...props}\n      data-testid={dataTestId || getTestId(ComponentDefaultTestId.ICON, props.id)}\n      data-vibe={ComponentVibeId.ICON}\n    />\n  );\n}\n\nexport interface IconProps extends VibeComponentProps {\n  /**\n   * The icon name, component, or source URL.\n   */\n  icon: SubIcon;\n  /**\n   * The accessible label for the icon.\n   */\n  iconLabel?: string;\n  /**\n   * The type of the icon: `svg`, `font`, or `src` (external source).\n   */\n  iconType?: IconType;\n  /**\n   * The size of the icon.\n   */\n  iconSize?: number | string;\n  /**\n   * If true, removes focus styles from the icon.\n   */\n  ignoreFocusStyle?: boolean;\n  /**\n   * The tab index of the icon for keyboard navigation.\n   */\n  tabindex?: number | string;\n  /**\n   * If true, hides the icon from screen readers.\n   */\n  ariaHidden?: boolean;\n  /**\n   * Inline styles applied to the icon.\n   */\n  style?: React.CSSProperties;\n  /**\n   * If true, replaces `fill` property with `currentColor` when using an `src` icon.\n   */\n  useCurrentColor?: boolean;\n  /**\n   * Overrides the default color with a custom color.\n   */\n  customColor?: string;\n}\n\nconst Icon = forwardRef(\n  (\n    {\n      /**\n       * component id\n       */\n      id,\n      className,\n      icon = \"\",\n      iconLabel,\n      iconType = \"svg\",\n      iconSize = 16,\n      ignoreFocusStyle = false,\n      tabindex: externalTabIndex,\n      ariaHidden,\n      style,\n      useCurrentColor = false,\n      customColor,\n      \"data-testid\": dataTestId\n    }: IconProps,\n    ref: React.ForwardedRef<HTMLElement>\n  ) => {\n    const overrideExternalTabIndex = externalTabIndex && +externalTabIndex;\n    const { screenReaderAccessProps, onClickCallback, computedClassName, iconRef } = useIconProps({\n      iconLabel,\n      className,\n      isDecorationOnly: ariaHidden,\n      ignoreFocusStyle,\n      externalTabIndex: overrideExternalTabIndex\n    });\n\n    const mergedRef = useMergeRef(ref, iconRef);\n\n    if (!icon) {\n      return null;\n    }\n\n    const isFunctionType = typeof icon === \"function\";\n    const overrideDataTestId = dataTestId || getTestId(ComponentDefaultTestId.ICON, id);\n\n    if (iconType === \"svg\" || isFunctionType || typeof icon === \"object\") {\n      return renderIcon(icon, {\n        id,\n        ...screenReaderAccessProps,\n        ref: isFunctionType ? undefined : mergedRef,\n        size: iconSize.toString(),\n        className: computedClassName,\n        style,\n        \"data-testid\": overrideDataTestId\n      });\n    }\n    if (iconType === \"src\") {\n      return (\n        <CustomSvgIcon\n          id={id}\n          src={icon}\n          {...screenReaderAccessProps}\n          className={cx(computedClassName)}\n          onClick={onClickCallback}\n          replaceToCurrentColor={useCurrentColor}\n          customColor={customColor}\n          data-testid={overrideDataTestId}\n        />\n      );\n    }\n    return (\n      <FontIcon\n        id={id}\n        {...screenReaderAccessProps}\n        className={cx(computedClassName)}\n        onClick={onClickCallback}\n        ref={mergedRef}\n        icon={icon}\n        data-testid={overrideDataTestId}\n      />\n    );\n  }\n);\n\ninterface IconStaticProps {\n  type: typeof IconTypeEnum;\n}\n\nexport default withStaticProps<IconProps, IconStaticProps>(Icon, {\n  type: IconTypeEnum\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}