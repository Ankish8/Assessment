{"ast":null,"code":"import { useMemo as e } from \"react\";\nimport r from \"../../hooks/useIsOverflowing/useIsOverflowing.js\";\nimport n from \"./Typography.module.scss.js\";\nfunction s(r) {\n  var s = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;\n  return e(function () {\n    var e, i;\n    return r && (e = s > 1 ? n.multiLineEllipsis : n.singleLineEllipsis, s > 1 && (i = {\n      \"--text-clamp-lines\": \"\" + s\n    })), {\n      class: e,\n      style: i\n    };\n  }, [r, s]);\n}\nfunction i(e, n, s, i, t, o, l) {\n  var c = r({\n    ref: s ? e : null,\n    ignoreHeightOverflow: o,\n    tolerance: l\n  });\n  return !n && s && c ? Object.assign(Object.assign({}, i), {\n    content: t\n  }) : {};\n}\nexport { s as useEllipsisClass, i as useTooltipProps };","map":{"version":3,"names":["s","r","arguments","length","e","i","n","multiLineEllipsis","singleLineEllipsis","class","style","t","o","l","c","ref","ignoreHeightOverflow","tolerance","Object","assign","content","useEllipsisClass","useTooltipProps"],"sources":["/Users/ankish/Downloads/MA/MAPIT/untitledUi/node_modules/@vibe/core/src/components/Typography/TypographyHooks.tsx"],"sourcesContent":["import { MutableRefObject, useMemo } from \"react\";\nimport { ElementContent } from \"../../types\";\nimport useIsOverflowing from \"../../hooks/useIsOverflowing/useIsOverflowing\";\nimport { TooltipProps } from \"../Tooltip/Tooltip\";\nimport styles from \"./Typography.module.scss\";\n\nexport function useEllipsisClass(ellipsis: boolean, maxLines = 1) {\n  const result = useMemo(() => {\n    let ellipsisClass: string;\n    let style: Record<string, string>;\n    // If component contains ellipsis return the fit ellipsis class\n    if (ellipsis) {\n      ellipsisClass = maxLines > 1 ? styles.multiLineEllipsis : styles.singleLineEllipsis;\n      if (maxLines > 1) {\n        // not relevant for single line ellipsis\n        style = { \"--text-clamp-lines\": maxLines.toString() };\n      }\n    }\n\n    return { class: ellipsisClass, style };\n  }, [ellipsis, maxLines]);\n  return result;\n}\n\nexport function useTooltipProps(\n  ref: MutableRefObject<HTMLElement>,\n  withoutTooltip: boolean,\n  ellipsis: boolean,\n  tooltipProps: Partial<TooltipProps>,\n  children: ElementContent,\n  ignoreHeightOverflow: boolean,\n  overflowTolerance: number\n) {\n  const isOverflowing = useIsOverflowing({\n    ref: ellipsis ? ref : null,\n    ignoreHeightOverflow,\n    tolerance: overflowTolerance\n  });\n  const isTooltipRendered = !withoutTooltip && ellipsis && isOverflowing;\n  return isTooltipRendered ? { ...tooltipProps, content: children } : {};\n}\n"],"mappings":";;;SAMgBA,EAAiBC,CAAA;EAA+B,IAAZD,CAAA,GAAQE,SAAA,CAAAC,MAAA,mBAAAD,SAAA,MAAAA,SAAA,MAAG;EAe7D,OAdeE,CAAA,CAAQ;IACrB,IAAIA,CAAA,EACAC,CAAA;IAUJ,OARIJ,CAAA,KACFG,CAAA,GAAgBJ,CAAA,GAAW,IAAIM,CAAA,CAAOC,iBAAA,GAAoBD,CAAA,CAAOE,kBAAA,EAC7DR,CAAA,GAAW,MAEbK,CAAA,GAAQ;MAAE,sBAAsB,KAAAL;IAAA,KAI7B;MAAES,KAAA,EAAOL,CAAA;MAAeM,KAAA,EAAAL;IAAA,CACjC;EAAA,GAAG,CAACJ,CAAA,EAAUD,CAAA,EAEhB;AAAA;AAEgB,SAAAK,EACdD,CAAA,EACAE,CAAA,EACAN,CAAA,EACAK,CAAA,EACAM,CAAA,EACAC,CAAA,EACAC,CAAA;EAEA,IAAMC,CAAA,GAAgBb,CAAA,CAAiB;IACrCc,GAAA,EAAKf,CAAA,GAAWI,CAAA,GAAM;IACtBY,oBAAA,EAAAJ,CAAA;IACAK,SAAA,EAAWJ;EAAA;EAGb,QAD2BP,CAAA,IAAkBN,CAAA,IAAYc,CAAA,GAC/BI,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAMd,CAAA,GAAY;IAAEe,OAAA,EAAST;EAAA,KAAa,EACtE;AAAA;AAAA,SAAAX,CAAA,IAAAqB,gBAAA,EAAAhB,CAAA,IAAAiB,eAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}