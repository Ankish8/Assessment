{"ast":null,"code":"import o from \"classnames\";\nimport r, { forwardRef as e, useRef as t, useCallback as i } from \"react\";\nimport { BaseSizes as s } from \"../../constants/sizes.js\";\nimport l from \"../../hooks/useMergeRef.js\";\nimport c from \"../DialogContentContainer/DialogContentContainer.js\";\nimport { ColorStyle as n } from \"../../utils/colors-vars-map.js\";\nimport a from \"./components/ColorPickerContent/ColorPickerContent.js\";\nimport { ColorShapes as m, DEFAULT_NUMBER_OF_COLORS_IN_LINE as d } from \"./ColorPickerConstants.js\";\nimport { calculateColorPickerDialogWidth as C } from \"./services/ColorPickerStyleService.js\";\nimport { withStaticProps as u } from \"../../types/withStaticProps.js\";\nimport { NOOP as f } from \"../../utils/function-utils.js\";\nimport { getTestId as p, ComponentDefaultTestId as v } from \"../../tests/testIds.js\";\nimport I from \"./ColorPicker.module.scss.js\";\nimport { ComponentVibeId as S } from \"../../tests/constants.js\";\nimport k from \"../../../icons/dist/react/NoColor.js\";\nvar h = u(e(function (e, s) {\n  var n = e.className,\n    m = e.onSave,\n    u = void 0 === m ? f : m,\n    h = e.value,\n    j = void 0 === h ? \"\" : h,\n    P = e.noColorText,\n    L = e.colorStyle,\n    g = void 0 === L ? \"regular\" : L,\n    R = e.ColorIndicatorIcon,\n    y = e.SelectedIndicatorIcon,\n    O = e.shouldRenderIndicatorWithoutBackground,\n    b = e.NoColorIcon,\n    M = void 0 === b ? k : b,\n    N = e.isBlackListMode,\n    w = void 0 === N || N,\n    z = e.colorsList,\n    D = void 0 === z ? [] : z,\n    B = e.isMultiselect,\n    E = e.colorSize,\n    T = void 0 === E ? \"medium\" : E,\n    x = e.numberOfColorsInLine,\n    K = void 0 === x ? d : x,\n    U = e.focusOnMount,\n    W = e.colorShape,\n    _ = void 0 === W ? \"square\" : W,\n    q = e.forceUseRawColorList,\n    V = e.showColorNameTooltip,\n    A = e.id,\n    F = e[\"data-testid\"],\n    G = t(null),\n    H = l(s, G),\n    J = i(u, [u]),\n    Q = C(T, K);\n  return r.createElement(c, {\n    ref: H,\n    className: o(I.colorPicker, I.colorPickerDialogContent, n),\n    ariaLabelledby: \"Color Picker Dialog\",\n    ariaDescribedby: \"Pick color\",\n    style: {\n      width: Q\n    }\n  }, r.createElement(a, {\n    onValueChange: J,\n    value: j,\n    noColorText: P,\n    shouldRenderIndicatorWithoutBackground: R && O,\n    colorStyle: g,\n    ColorIndicatorIcon: R,\n    SelectedIndicatorIcon: y,\n    NoColorIcon: M,\n    colorsList: D,\n    isBlackListMode: w,\n    isMultiselect: B,\n    colorSize: T,\n    numberOfColorsInLine: K,\n    focusOnMount: U,\n    colorShape: _,\n    forceUseRawColorList: q,\n    showColorNameTooltip: V,\n    id: A,\n    \"data-testid\": F || p(v.COLOR_PICKER, A),\n    \"data-vibe\": S.COLOR_PICKER\n  }));\n}), {\n  sizes: s,\n  colorStyles: n,\n  colorSizes: s,\n  colorShapes: m\n});\nexport { h as default };","map":{"version":3,"names":["h","u","e","s","n","className","m","onSave","f","value","j","P","noColorText","L","colorStyle","g","R","ColorIndicatorIcon","y","SelectedIndicatorIcon","O","shouldRenderIndicatorWithoutBackground","b","NoColorIcon","M","k","N","isBlackListMode","w","z","colorsList","D","B","isMultiselect","E","colorSize","T","x","numberOfColorsInLine","K","d","U","focusOnMount","W","colorShape","_","q","forceUseRawColorList","V","showColorNameTooltip","A","id","F","G","t","H","l","J","i","Q","C","r","createElement","c","ref","o","I","colorPicker","colorPickerDialogContent","ariaLabelledby","ariaDescribedby","style","width","a","onValueChange","p","v","COLOR_PICKER","S","sizes","colorStyles","colorSizes","colorShapes","default"],"sources":["/Users/ankish/Downloads/MA/MAPIT/untitledUi/node_modules/@vibe/core/src/components/ColorPicker/ColorPicker.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport React, { forwardRef, useCallback, useRef } from \"react\";\nimport { BaseSizes } from \"../../constants\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport DialogContentContainer from \"../DialogContentContainer/DialogContentContainer\";\nimport { ColorStyle as ColorStyleEnum } from \"../../utils/colors-vars-map\";\nimport { NoColor } from \"@vibe/icons\";\nimport ColorPickerContent from \"./components/ColorPickerContent/ColorPickerContent\";\nimport { ColorShapes as ColorShapesEnum, DEFAULT_NUMBER_OF_COLORS_IN_LINE } from \"./ColorPickerConstants\";\nimport { ColorShapes, ColorPickerSizes, ColorPickerValue, ColorPickerArrayValueOnly } from \"./ColorPicker.types\";\nimport { calculateColorPickerDialogWidth } from \"./services/ColorPickerStyleService\";\nimport { VibeComponentProps, SubIcon, withStaticProps } from \"../../types\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport styles from \"./ColorPicker.module.scss\";\nimport { ColorStyle } from \"../../types/Colors\";\nimport { ComponentVibeId } from \"../../tests/constants\";\n\nexport interface ColorPickerProps extends VibeComponentProps {\n  /**\n   * The selected color(s).\n   */\n  value?: ColorPickerValue;\n  /**\n   * Callback fired when the selected color(s) change.\n   */\n  onSave?: (value: ColorPickerArrayValueOnly) => void;\n  /**\n   * Icon displayed as an indicator inside the color.\n   */\n  ColorIndicatorIcon?: SubIcon;\n  /**\n   * Icon displayed when a color is selected.\n   */\n  SelectedIndicatorIcon?: SubIcon;\n  /**\n   * Icon used for clearing the color selection.\n   */\n  NoColorIcon?: SubIcon;\n  /**\n   * The style applied to the colors.\n   */\n  colorStyle?: ColorStyle;\n  /**\n   * Text displayed for the \"no color\" option.\n   */\n  noColorText?: string;\n  /**\n   * If true, renders the color indicator without a background.\n   */\n  shouldRenderIndicatorWithoutBackground?: boolean;\n  /**\n   * If true, treats the color list as a blacklist rather than a whitelist.\n   */\n  isBlackListMode?: boolean;\n  /**\n   * The list of colors available for selection.\n   */\n  colorsList?: ColorPickerArrayValueOnly;\n  /**\n   * If true, allows selecting multiple colors.\n   */\n  isMultiselect?: boolean;\n  /**\n   * The size of the color items.\n   */\n  colorSize?: ColorPickerSizes;\n  /**\n   * The number of colors displayed per row.\n   */\n  numberOfColorsInLine?: number;\n  /**\n   * If true, the first color is focused when the component mounts.\n   */\n  focusOnMount?: boolean;\n  /**\n   * The shape of the color items.\n   */\n  colorShape?: ColorShapes;\n  /**\n   * Used to force the component render the colorList prop as is. Usually, this flag should not be used. It's intended only for edge cases.\n   * Usually, only \"monday colors\" will be rendered (unless blacklist mode is used). This flag will override this behavior.\n   */\n  forceUseRawColorList?: boolean;\n  /**\n   * Used to enable color name tooltip on each color in the component.\n   * When \"tooltipContentByColor\" is supplied, it will override the color name tooltip.\n   *\n   */\n  showColorNameTooltip?: boolean;\n}\n\nconst ColorPicker = forwardRef(\n  (\n    {\n      className,\n      onSave = NOOP,\n      value = \"\",\n      noColorText,\n      colorStyle = \"regular\",\n      ColorIndicatorIcon,\n      SelectedIndicatorIcon,\n      shouldRenderIndicatorWithoutBackground,\n      NoColorIcon = NoColor,\n      isBlackListMode = true,\n      colorsList = [],\n      isMultiselect,\n      colorSize = \"medium\",\n      numberOfColorsInLine = DEFAULT_NUMBER_OF_COLORS_IN_LINE,\n      focusOnMount,\n      colorShape = \"square\",\n      forceUseRawColorList,\n      showColorNameTooltip,\n      id,\n      \"data-testid\": dataTestId\n    }: ColorPickerProps,\n    ref: React.ForwardedRef<HTMLElement>\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    const onChange = useCallback(onSave, [onSave]);\n\n    const width = calculateColorPickerDialogWidth(colorSize as BaseSizes, numberOfColorsInLine);\n\n    return (\n      <DialogContentContainer\n        ref={mergedRef}\n        className={cx(styles.colorPicker, styles.colorPickerDialogContent, className)}\n        ariaLabelledby=\"Color Picker Dialog\"\n        ariaDescribedby=\"Pick color\"\n        style={{ width }}\n      >\n        <ColorPickerContent\n          onValueChange={onChange}\n          value={value}\n          noColorText={noColorText}\n          shouldRenderIndicatorWithoutBackground={ColorIndicatorIcon && shouldRenderIndicatorWithoutBackground}\n          colorStyle={colorStyle}\n          ColorIndicatorIcon={ColorIndicatorIcon}\n          SelectedIndicatorIcon={SelectedIndicatorIcon}\n          NoColorIcon={NoColorIcon}\n          colorsList={colorsList}\n          isBlackListMode={isBlackListMode}\n          isMultiselect={isMultiselect}\n          colorSize={colorSize}\n          numberOfColorsInLine={numberOfColorsInLine}\n          focusOnMount={focusOnMount}\n          colorShape={colorShape}\n          forceUseRawColorList={forceUseRawColorList}\n          showColorNameTooltip={showColorNameTooltip}\n          id={id}\n          data-testid={dataTestId || getTestId(ComponentDefaultTestId.COLOR_PICKER, id)}\n          data-vibe={ComponentVibeId.COLOR_PICKER}\n        />\n      </DialogContentContainer>\n    );\n  }\n);\n\ninterface ColorPickerStaticProps {\n  sizes: typeof BaseSizes;\n  colorStyles: typeof ColorStyleEnum;\n  colorSizes: typeof BaseSizes;\n  colorShapes: typeof ColorShapesEnum;\n}\n\nexport default withStaticProps<ColorPickerProps, ColorPickerStaticProps>(ColorPicker, {\n  sizes: BaseSizes,\n  colorStyles: ColorStyleEnum,\n  colorSizes: BaseSizes,\n  colorShapes: ColorShapesEnum\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}