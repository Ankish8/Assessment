{"ast":null,"code":"import t, { forwardRef as s, useRef as a } from \"react\";\nimport r from \"classnames\";\nimport e from \"../../hooks/useMergeRef.js\";\nimport { withStaticProps as m } from \"../../types/withStaticProps.js\";\nimport \"../../utils/colors-vars-map.js\";\nimport o from \"../Avatar/Avatar.js\";\nimport { ListItemComponentType as i } from \"../ListItem/ListItemConstants.js\";\nimport l from \"./ListItemAvatar.module.scss.js\";\nvar c = m(s(function (s, m) {\n  var i = s.className,\n    c = s.id,\n    p = s.src,\n    n = s.avatarClassName,\n    f = s.component,\n    v = void 0 === f ? \"div\" : f,\n    d = a(null),\n    u = e(m, d);\n  return t.createElement(v, {\n    ref: u,\n    className: r(l.listItemAvatar, i),\n    id: c,\n    \"aria-hidden\": \"true\"\n  }, t.createElement(o, {\n    src: p,\n    type: \"img\",\n    size: \"small\",\n    className: r(l.avatar, n)\n  }));\n}), {\n  components: i\n});\nexport { c as default };","map":{"version":3,"names":["c","m","s","i","className","id","p","src","n","avatarClassName","f","component","v","d","a","u","e","t","createElement","ref","r","l","listItemAvatar","o","type","size","avatar","components","default"],"sources":["/Users/ankish/Downloads/MA/MAPIT/untitledUi/node_modules/@vibe/core/src/components/ListItemAvatar/ListItemAvatar.tsx"],"sourcesContent":["import React, { forwardRef, useRef } from \"react\";\nimport cx from \"classnames\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport { VibeComponentProps, withStaticProps } from \"../../types\";\nimport Avatar from \"../Avatar/Avatar\";\nimport { ListItemComponentType as ListItemComponentTypeEnum } from \"../ListItem/ListItemConstants\";\nimport { ListItemElement } from \"../ListItem\";\nimport styles from \"./ListItemAvatar.module.scss\";\n\nexport interface ListItemAvatarProps extends VibeComponentProps {\n  /**\n   * The HTML element used for the list item avatar.\n   */\n  component?: ListItemElement;\n  /**\n   * The source URL of the avatar image.\n   */\n  src?: string;\n  /**\n   * Class name applied to the avatar.\n   */\n  avatarClassName?: string;\n}\n\nconst ListItemAvatar = forwardRef(\n  (\n    { className, id, src, avatarClassName, component: Component = \"div\" }: ListItemAvatarProps,\n    ref: React.ForwardedRef<HTMLElement>\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    return (\n      <Component ref={mergedRef} className={cx(styles.listItemAvatar, className)} id={id} aria-hidden=\"true\">\n        <Avatar src={src} type=\"img\" size=\"small\" className={cx(styles.avatar, avatarClassName)} />\n      </Component>\n    );\n  }\n);\n\ninterface ListItemAvatarStaticProps {\n  components: typeof ListItemComponentTypeEnum;\n}\n\nexport default withStaticProps<ListItemAvatarProps, ListItemAvatarStaticProps>(ListItemAvatar, {\n  components: ListItemComponentTypeEnum\n});\n"],"mappings":";;;;;;;;AAwBA,IAoBeA,CAAA,GAAAC,CAAA,CApBQC,CAAA,CACrB,UAAAA,CAAA,EAEED,CAAA;EACE,IAFAE,CAAA,GAASD,CAAA,CAATE,SAAA;IAAWJ,CAAA,GAAEE,CAAA,CAAFG,EAAA;IAAIC,CAAA,GAAGJ,CAAA,CAAHK,GAAA;IAAKC,CAAA,GAAeN,CAAA,CAAfO,eAAA;IAAeC,CAAA,GAAAR,CAAA,CAAES,SAAA;IAAWC,CAAA,QAAY,MAAHF,CAAA,GAAG,QAAKA,CAAA;IAG7DG,CAAA,GAAeC,CAAA,CAAO;IACtBC,CAAA,GAAYC,CAAA,CAAYf,CAAA,EAAKY,CAAA;EAEnC,OACEI,CAAA,CAAAC,aAAA,CAACN,CAAA,EAAS;IAACO,GAAA,EAAKJ,CAAA;IAAWX,SAAA,EAAWgB,CAAA,CAAGC,CAAA,CAAOC,cAAA,EAAgBnB,CAAA;IAAYE,EAAA,EAAIL,CAAA;IAAE,eAAc;EAAA,GAC9FiB,CAAA,CAACC,aAAA,CAAAK,CAAA,EAAO;IAAAhB,GAAA,EAAKD,CAAA;IAAKkB,IAAA,EAAK;IAAMC,IAAA,EAAK;IAAQrB,SAAA,EAAWgB,CAAA,CAAGC,CAAA,CAAOK,MAAA,EAAQlB,CAAA;EAAA,GAG7E;AAAA,IAO6F;EAC7FmB,UAAA,EAAYxB;AAAA;AAAA,SAAAH,CAAA,IAAA4B,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}