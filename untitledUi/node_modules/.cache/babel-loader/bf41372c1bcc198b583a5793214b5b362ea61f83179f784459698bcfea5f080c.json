{"ast":null,"code":"import { slicedToArray as e } from \"../../../_virtual/_rollupPluginBabelHelpers.js\";\nimport r from \"classnames\";\nimport t, { useState as o, useMemo as s, useEffect as m } from \"react\";\nimport { SystemTheme as i, ThemeColor as n } from \"./ThemeProviderConstants.js\";\nimport { generateRandomAlphaString as a, isAnySystemThemeClassNameOnBody as c, addSystemThemeClassNameToBody as l, removeSystemThemeClassNameFromBody as d, shouldGenerateTheme as u, generateThemeCssOverride as f } from \"./ThemeProviderUtils.js\";\nimport p from \"../../hooks/ssr/useIsomorphicLayoutEffect.js\";\nimport { withStaticPropsWithoutForwardRef as h } from \"../../types/withStaticProps.js\";\nimport \"../../utils/colors-vars-map.js\";\nvar v = h(function (i) {\n  var n = i.themeConfig,\n    h = i.children,\n    v = i.themeClassSpecifier,\n    y = i.systemTheme,\n    T = i.className,\n    j = o(!1),\n    C = e(j, 2),\n    g = C[0],\n    P = C[1],\n    E = s(function () {\n      return v || a();\n    }, [v]);\n  return p(function () {\n    if (y && !c()) return l(y), function () {\n      d(y);\n    };\n  }, [y]), m(function () {\n    if (u(n)) {\n      if (!document.getElementById(n.name)) {\n        var e = document.createElement(\"style\");\n        e.type = \"text/css\", e.id = n.name;\n        var r = f(n, E);\n        try {\n          e.appendChild(document.createTextNode(r)), document.head.appendChild(e), P(!0);\n        } catch (e) {\n          console.error(\"vibe ThemeProvider: error inserting theme-generated css - \", e);\n        }\n        return function () {\n          document.head.removeChild(e);\n        };\n      }\n      P(!0);\n    }\n  }, [E, n]), !g && u(n) ? null : t.createElement(\"div\", {\n    className: r(null == n ? void 0 : n.name, E, T)\n  }, h);\n}, {\n  systemThemes: i,\n  colors: n\n});\nexport { v as default };","map":{"version":3,"names":["v","h","i","n","themeConfig","children","themeClassSpecifier","y","systemTheme","T","className","j","o","C","e","g","P","E","s","a","p","c","l","d","m","u","document","getElementById","name","createElement","type","id","r","f","appendChild","createTextNode","head","console","error","removeChild","t","systemThemes","colors","default"],"sources":["/Users/ankish/Downloads/MA/MAPIT/untitledUi/node_modules/@vibe/core/src/components/ThemeProvider/ThemeProvider.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport React, { ReactElement, useEffect, useMemo, useState } from \"react\";\nimport { SystemTheme as SystemThemeEnum, Theme, ThemeColor as ThemeColorEnum } from \"./ThemeProviderConstants\";\nimport { SystemTheme } from \"./ThemeProvider.types\";\nimport {\n  addSystemThemeClassNameToBody,\n  generateRandomAlphaString,\n  generateThemeCssOverride,\n  isAnySystemThemeClassNameOnBody,\n  removeSystemThemeClassNameFromBody,\n  shouldGenerateTheme\n} from \"./ThemeProviderUtils\";\nimport useIsomorphicLayoutEffect from \"../../hooks/ssr/useIsomorphicLayoutEffect\";\nimport { withStaticPropsWithoutForwardRef } from \"../../types\";\n\nexport interface ThemeProviderProps {\n  /**\n   * The theme configuration to apply. It consists of a `name` (a unique CSS class name added to the children)\n   * and an object of color overrides for each system theme.\n   */\n  themeConfig?: Theme;\n  /**\n   * The children to be rendered with the applied theme.\n   */\n  children: ReactElement;\n  /**\n   * A string added to the theme name selector to make it more specific, in case `themeConfig.name`\n   * collides with another class name.\n   */\n  themeClassSpecifier?: string;\n  /**\n   * The system theme to apply to the `body` element on mount,\n   * if there is no system theme class name on the body already.\n   */\n  systemTheme?: SystemTheme;\n  /**\n   * Class name applied to the wrapping `div`.\n   */\n  className?: string;\n}\n\nconst ThemeProvider = ({\n  themeConfig,\n  children,\n  themeClassSpecifier: customThemeClassSpecifier,\n  systemTheme,\n  className\n}: ThemeProviderProps) => {\n  const [stylesLoaded, setStylesLoaded] = useState(false);\n  const themeClassSpecifier = useMemo(\n    () => customThemeClassSpecifier || generateRandomAlphaString(),\n    [customThemeClassSpecifier]\n  );\n\n  // Add the systemTheme class name to the body on mount\n  useIsomorphicLayoutEffect(() => {\n    if (!systemTheme) {\n      return;\n    }\n\n    if (isAnySystemThemeClassNameOnBody()) {\n      // If there is already a systemTheme class name on the body, we don't want to override it\n      return;\n    }\n\n    addSystemThemeClassNameToBody(systemTheme);\n\n    return () => {\n      // Cleanup the systemTheme class name from the body on ThemeProvider unmount\n      removeSystemThemeClassNameFromBody(systemTheme);\n    };\n  }, [systemTheme]);\n\n  useEffect(() => {\n    if (!shouldGenerateTheme(themeConfig)) {\n      return;\n    }\n    if (document.getElementById(themeConfig.name)) {\n      setStylesLoaded(true);\n      return;\n    }\n\n    const styleElement = document.createElement(\"style\");\n    styleElement.type = \"text/css\";\n    styleElement.id = themeConfig.name;\n    const themeCssOverride = generateThemeCssOverride(themeConfig, themeClassSpecifier);\n\n    try {\n      styleElement.appendChild(document.createTextNode(themeCssOverride));\n      document.head.appendChild(styleElement);\n      setStylesLoaded(true);\n    } catch (error) {\n      console.error(\"vibe ThemeProvider: error inserting theme-generated css - \", error);\n    }\n\n    return () => {\n      document.head.removeChild(styleElement);\n    };\n  }, [themeClassSpecifier, themeConfig]);\n\n  if (!stylesLoaded && shouldGenerateTheme(themeConfig)) {\n    // Waiting for styles to load before children render\n    return null;\n  }\n\n  // Pass the theme name as a class to the div wrapping children - to scope the effect of the theme\n  return <div className={cx(themeConfig?.name, themeClassSpecifier, className)}>{children}</div>;\n};\n\ninterface ThemeProviderStaticProps {\n  systemThemes: typeof SystemThemeEnum;\n  colors: typeof ThemeColorEnum;\n}\n\nexport default withStaticPropsWithoutForwardRef<ThemeProviderProps, ThemeProviderStaticProps>(ThemeProvider, {\n  systemThemes: SystemThemeEnum,\n  colors: ThemeColorEnum\n});\n"],"mappings":";;;;;;;;AAyCA,IAyEeA,CAAA,GAAAC,CAAA,CAzEO,UAAHC,CAAA;EAMM,IALvBC,CAAA,GAAWD,CAAA,CAAXE,WAAA;IACAH,CAAA,GAAQC,CAAA,CAARG,QAAA;IACqBL,CAAA,GAAyBE,CAAA,CAA9CI,mBAAA;IACAC,CAAA,GAAWL,CAAA,CAAXM,WAAA;IACAC,CAAA,GAASP,CAAA,CAATQ,SAAA;IAEAC,CAAA,GAAwCC,CAAA,EAAS;IAAMC,CAAA,GAAAC,CAAA,CAAAH,CAAA;IAAhDI,CAAA,GAAYF,CAAA;IAAEG,CAAA,GAAeH,CAAA;IAC9BI,CAAA,GAAsBC,CAAA,CAC1B;MAAA,OAAMlB,CAAA,IAA6BmB,CAAA;IAAA,GACnC,CAACnB,CAAA;EAiDH,OA7CAoB,CAAA,CAA0B;IACxB,IAAKb,CAAA,KAIDc,CAAA,IAOJ,OAFAC,CAAA,CAA8Bf,CAAA,GAEvB;MAELgB,CAAA,CAAmChB,CAAA;IAAA,CAEvC;EAAA,GAAG,CAACA,CAAA,IAEJiB,CAAA,CAAU;IACR,IAAKC,CAAA,CAAoBtB,CAAA,GAAzB;MAGA,KAAIuB,QAAA,CAASC,cAAA,CAAexB,CAAA,CAAYyB,IAAA,GAAxC;QAKA,IAAMd,CAAA,GAAeY,QAAA,CAASG,aAAA,CAAc;QAC5Cf,CAAA,CAAagB,IAAA,GAAO,YACpBhB,CAAA,CAAaiB,EAAA,GAAK5B,CAAA,CAAYyB,IAAA;QAC9B,IAAMI,CAAA,GAAmBC,CAAA,CAAyB9B,CAAA,EAAac,CAAA;QAE/D;UACEH,CAAA,CAAaoB,WAAA,CAAYR,QAAA,CAASS,cAAA,CAAeH,CAAA,IACjDN,QAAA,CAASU,IAAA,CAAKF,WAAA,CAAYpB,CAAA,GAC1BE,CAAA,EAAgB,EACjB;QAAA,CAAC,QAAOF,CAAA;UACPuB,OAAA,CAAQC,KAAA,CAAM,8DAA8DxB,CAAA,CAC7E;QAAA;QAED,OAAO;UACLY,QAAA,CAASU,IAAA,CAAKG,WAAA,CAAYzB,CAAA;QAAA,CAhB3B;MAAA;MAFCE,CAAA,EAAgB,EAFjB;IAAA;EAsBH,GAAG,CAACC,CAAA,EAAqBd,CAAA,KAEpBY,CAAA,IAAgBU,CAAA,CAAoBtB,CAAA,IAEhC,OAIFqC,CAAA,CAAAX,aAAA;IAAKnB,SAAA,EAAWsB,CAAA,CAAG,QAAA7B,CAAA,YAAAA,CAAA,CAAayB,IAAA,EAAMX,CAAA,EAAqBR,CAAA;EAAA,GAAaR,CAAA,CACjF;AAAA,GAO6G;EAC3GwC,YAAA,EAAcvC,CAAA;EACdwC,MAAA,EAAQvC;AAAA;AAAA,SAAAH,CAAA,IAAA2C,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}