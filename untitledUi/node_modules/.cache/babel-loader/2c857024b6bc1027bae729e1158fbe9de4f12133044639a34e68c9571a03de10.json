{"ast":null,"code":"import e, { forwardRef as t, useRef as o, useMemo as s, Fragment as r } from \"react\";\nimport a from \"classnames\";\nimport { noop as i } from \"lodash-es\";\nimport n from \"../../hooks/useMergeRef.js\";\nimport d from \"../Tooltip/Tooltip.js\";\nimport c from \"../Icon/Icon.js\";\nimport { getWidthHeight as l } from \"./services/IconButton-helpers.js\";\nimport { withStaticProps as m } from \"../../types/withStaticProps.js\";\nimport \"../../utils/colors-vars-map.js\";\nimport { getTestId as p } from \"../../tests/testIds.js\";\nimport { ComponentDefaultTestId as u, ComponentVibeId as f } from \"../../tests/constants.js\";\nimport v from \"../Button/Button.js\";\nimport { BUTTON_ICON_SIZE as b, SMALL_BUTTON_ICON_SIZE as j } from \"../Button/ButtonConstants.js\";\nimport { getStyle as g } from \"../../helpers/typesciptCssModulesHelper.js\";\nimport C from \"./IconButton.module.scss.js\";\nimport y from \"../../../icons/dist/react/AddSmall.js\";\nvar N = m(t(function (t, m) {\n  var N = t.className,\n    B = t.wrapperClassName,\n    I = t.iconClassName,\n    h = t.id,\n    x = t.icon,\n    O = void 0 === x ? y : x,\n    T = t.size,\n    k = void 0 === T ? \"medium\" : T,\n    E = t.tooltipProps,\n    P = void 0 === E ? {} : E,\n    S = t.tooltipContent,\n    w = t.ariaLabeledBy,\n    z = t.ariaLabel,\n    L = t.ariaHasPopup,\n    F = t.ariaExpanded,\n    H = t.ariaControls,\n    M = t[\"aria-describedby\"],\n    R = t[\"aria-hidden\"],\n    U = t[\"aria-pressed\"],\n    W = t.hideTooltip,\n    _ = void 0 !== W && W,\n    A = t.kind,\n    q = void 0 === A ? \"tertiary\" : A,\n    D = t.active,\n    G = t.disabled,\n    J = void 0 !== G && G,\n    K = t.disabledReason,\n    Q = t.onClick,\n    V = void 0 === Q ? i : Q,\n    X = t.color,\n    Y = t[\"data-testid\"],\n    Z = t.insetFocus,\n    $ = void 0 !== Z && Z,\n    ee = t.tabIndex,\n    te = t.loading,\n    oe = void 0 !== te && te,\n    se = o(null),\n    re = n(m, se),\n    ae = s(function () {\n      return (null == P ? void 0 : P.content) || S;\n    }, [null == P ? void 0 : P.content, S]),\n    ie = s(function () {\n      return z || (\"string\" == typeof ae ? ae : void 0);\n    }, [z, ae]),\n    ne = s(function () {\n      switch (k) {\n        case \"xxs\":\n        case \"xs\":\n          return j;\n        case \"small\":\n        case \"medium\":\n        case \"large\":\n          return b;\n        default:\n          return 24;\n      }\n    }, [k]),\n    de = s(function () {\n      var e = {\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        padding: 0\n      };\n      return k && (e = Object.assign(Object.assign({}, e), l(k))), e;\n    }, [k]),\n    ce = s(function () {\n      return _ ? null : J && K ? K : ae || z;\n    }, [_, J, K, ae, z]),\n    le = B ? \"div\" : r,\n    me = s(function () {\n      return B ? {\n        className: a(B, C.wrapper)\n      } : {};\n    }, [B]);\n  return e.createElement(le, Object.assign({}, me), e.createElement(d, Object.assign({}, P, {\n    content: ce,\n    referenceWrapperClassName: C.referenceWrapper\n  }), e.createElement(v, {\n    onClick: V,\n    disabled: J,\n    color: X,\n    kind: q,\n    ariaLabeledBy: w,\n    ariaLabel: ie,\n    ariaHasPopup: L,\n    ariaExpanded: F,\n    ariaControls: H,\n    \"aria-describedby\": M,\n    \"aria-hidden\": R,\n    \"aria-pressed\": U,\n    ref: re,\n    id: h,\n    \"data-testid\": Y || p(u.ICON_BUTTON, h),\n    \"data-vibe\": f.ICON_BUTTON,\n    noSidePadding: !0,\n    active: D,\n    className: N,\n    style: de,\n    insetFocus: $,\n    tabIndex: ee,\n    loading: oe,\n    loaderClassName: a(C.loader, g(C, k))\n  }, e.createElement(c, {\n    icon: O,\n    iconType: \"svg\",\n    iconSize: ne,\n    ignoreFocusStyle: !0,\n    className: I\n  }))));\n}), {\n  sizes: v.sizes,\n  kinds: v.kinds,\n  colors: v.colors\n});\nexport { N as default };","map":{"version":3,"names":["N","m","t","className","B","wrapperClassName","I","iconClassName","h","id","x","icon","O","y","T","size","k","E","tooltipProps","P","S","tooltipContent","w","ariaLabeledBy","z","ariaLabel","L","ariaHasPopup","F","ariaExpanded","H","ariaControls","M","R","U","W","hideTooltip","_","A","kind","q","D","active","G","disabled","J","K","disabledReason","Q","onClick","V","i","X","color","Y","Z","insetFocus","$","ee","tabIndex","te","loading","oe","se","o","re","n","ae","s","content","ie","ne","j","b","de","e","justifyContent","alignItems","padding","Object","assign","l","ce","le","r","me","a","C","wrapper","createElement","d","referenceWrapperClassName","referenceWrapper","v","ref","p","u","ICON_BUTTON","f","noSidePadding","style","loaderClassName","loader","g","c","iconType","iconSize","ignoreFocusStyle","sizes","kinds","colors","default"],"sources":["/Users/ankish/Downloads/MA/MAPIT/untitledUi/node_modules/@vibe/core/src/components/IconButton/IconButton.tsx"],"sourcesContent":["import React, { AriaAttributes, forwardRef, Fragment, useMemo, useRef } from \"react\";\nimport cx from \"classnames\";\nimport { noop as NOOP } from \"lodash-es\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport Tooltip, { TooltipProps } from \"../Tooltip/Tooltip\";\nimport Icon from \"../Icon/Icon\";\nimport { AddSmall } from \"@vibe/icons\";\nimport { getWidthHeight, Size } from \"./services/IconButton-helpers\";\nimport { SubIcon, VibeComponentProps, withStaticProps } from \"../../types\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId, ComponentVibeId } from \"../../tests/constants\";\nimport Button from \"../Button/Button\";\nimport { BUTTON_ICON_SIZE, SMALL_BUTTON_ICON_SIZE } from \"../Button/ButtonConstants\";\nimport { ButtonColor, ButtonType } from \"../Button\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport styles from \"./IconButton.module.scss\";\n\nexport interface IconButtonProps extends VibeComponentProps {\n  /**\n   * Callback fired when the button is clicked.\n   */\n  onClick?: (event: React.MouseEvent) => void;\n  /**\n   * Class name applied to the button wrapper.\n   */\n  wrapperClassName?: string;\n  /**\n   * Class name applied to the icon.\n   */\n  iconClassName?: string;\n  /**\n   * The icon displayed inside the button.\n   */\n  icon?: SubIcon;\n  /**\n   * The ID of the element that labels this button.\n   */\n  ariaLabeledBy?: string;\n  /**\n   * The ARIA label for accessibility.\n   */\n  ariaLabel?: string;\n  /**\n   * If true, indicates that the button controls a popup.\n   */\n  ariaHasPopup?: React.HTMLProps<HTMLButtonElement>[\"aria-haspopup\"];\n  /**\n   * If true, indicates that the associated popup is open.\n   */\n  ariaExpanded?: boolean;\n  /**\n   * The ID of the region controlled by the button.\n   */\n  ariaControls?: string;\n  /**\n   * ID of the element describing the button.\n   */\n  \"aria-describedby\"?: AriaAttributes[\"aria-describedby\"];\n  /**\n   * If true, hides the button from assistive technologies.\n   */\n  \"aria-hidden\"?: AriaAttributes[\"aria-hidden\"];\n  /**\n   * Indicates the current \"pressed\" state of toggle buttons.\n   */\n  \"aria-pressed\"?: AriaAttributes[\"aria-pressed\"];\n  /**\n   * The size of the button.\n   */\n  size?: Size;\n  /**\n   * If true, hides the tooltip.\n   */\n  hideTooltip?: boolean;\n  /**\n   * Props for the Tooltip component.\n   */\n  tooltipProps?: Partial<TooltipProps>;\n  /**\n   * Tooltip content displayed on hover.\n   */\n  tooltipContent?: string;\n  /**\n   * The button variant.\n   */\n  kind?: ButtonType;\n  /**\n   * If true, the button is in an active state.\n   */\n  active?: boolean;\n  /**\n   * The color of the button.\n   */\n  color?: ButtonColor;\n  /**\n   * If true, the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If disabled, this message will be displayed in the tooltip.\n   */\n  disabledReason?: string;\n  /**\n   * If true, the focus indicator is displayed inside the button instead of around it.\n   */\n  insetFocus?: boolean;\n  /**\n   * The tab order of the button.\n   */\n  tabIndex?: number;\n  /**\n   * If true, a loader replaces the icon.\n   */\n  loading?: boolean;\n}\n\nconst IconButton = forwardRef(\n  (\n    {\n      className,\n      wrapperClassName,\n      iconClassName,\n      id,\n      icon = AddSmall,\n      size = \"medium\",\n      tooltipProps = {} as TooltipProps,\n      tooltipContent,\n      ariaLabeledBy,\n      ariaLabel,\n      ariaHasPopup,\n      ariaExpanded,\n      ariaControls,\n      \"aria-describedby\": ariaDescribedBy,\n      \"aria-hidden\": ariaHidden,\n      \"aria-pressed\": ariaPressed,\n      hideTooltip = false,\n      kind = \"tertiary\",\n      active,\n      disabled = false,\n      disabledReason,\n      onClick = NOOP,\n      color,\n      \"data-testid\": dataTestId,\n      insetFocus = false,\n      tabIndex,\n      loading = false\n    }: IconButtonProps,\n    ref: React.ForwardedRef<HTMLElement>\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    const overrideTooltipContent = useMemo(\n      () => tooltipProps?.content || tooltipContent,\n      [tooltipProps?.content, tooltipContent]\n    );\n\n    const buttonAriaLabel = useMemo(() => {\n      if (ariaLabel) return ariaLabel;\n      if (typeof overrideTooltipContent === \"string\") return overrideTooltipContent;\n      return undefined;\n    }, [ariaLabel, overrideTooltipContent]);\n\n    const iconSize = useMemo(() => {\n      switch (size) {\n        case \"xxs\":\n        case \"xs\":\n          return SMALL_BUTTON_ICON_SIZE;\n        case \"small\":\n        case \"medium\":\n        case \"large\":\n          return BUTTON_ICON_SIZE;\n        default:\n          return 24;\n      }\n    }, [size]);\n\n    const overrideStyle = useMemo(() => {\n      let style = {\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        padding: 0\n      } as React.CSSProperties;\n\n      if (size) {\n        style = { ...style, ...getWidthHeight(size) };\n      }\n      return style;\n    }, [size]);\n\n    const calculatedTooltipContent = useMemo(() => {\n      if (hideTooltip) return null;\n      if (disabled && disabledReason) return disabledReason;\n      if (overrideTooltipContent) return overrideTooltipContent as never;\n      return ariaLabel;\n    }, [hideTooltip, disabled, disabledReason, overrideTooltipContent, ariaLabel]);\n\n    const IconButtonWrapper = wrapperClassName ? \"div\" : Fragment;\n    const iconButtonWrapperProps = useMemo(() => {\n      return wrapperClassName ? { className: cx(wrapperClassName, styles.wrapper) } : {};\n    }, [wrapperClassName]);\n\n    return (\n      <IconButtonWrapper {...iconButtonWrapperProps}>\n        <Tooltip\n          {...tooltipProps}\n          content={calculatedTooltipContent}\n          referenceWrapperClassName={styles.referenceWrapper}\n        >\n          <Button\n            onClick={onClick}\n            disabled={disabled}\n            color={color}\n            kind={kind}\n            ariaLabeledBy={ariaLabeledBy}\n            ariaLabel={buttonAriaLabel}\n            ariaHasPopup={ariaHasPopup}\n            ariaExpanded={ariaExpanded}\n            ariaControls={ariaControls}\n            aria-describedby={ariaDescribedBy}\n            aria-hidden={ariaHidden}\n            aria-pressed={ariaPressed}\n            ref={mergedRef}\n            id={id}\n            data-testid={dataTestId || getTestId(ComponentDefaultTestId.ICON_BUTTON, id)}\n            data-vibe={ComponentVibeId.ICON_BUTTON}\n            noSidePadding\n            active={active}\n            className={className}\n            style={overrideStyle}\n            insetFocus={insetFocus}\n            tabIndex={tabIndex}\n            loading={loading}\n            loaderClassName={cx(styles.loader, getStyle(styles, size))}\n          >\n            <Icon icon={icon} iconType=\"svg\" iconSize={iconSize} ignoreFocusStyle className={iconClassName} />\n          </Button>\n        </Tooltip>\n      </IconButtonWrapper>\n    );\n  }\n);\n\ninterface IconButtonStaticProps {\n  sizes: typeof Button.sizes;\n  kinds: typeof Button.kinds;\n  colors: typeof Button.colors;\n}\n\nexport default withStaticProps<IconButtonProps, IconButtonStaticProps>(IconButton, {\n  sizes: Button.sizes,\n  kinds: Button.kinds,\n  colors: Button.colors\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}