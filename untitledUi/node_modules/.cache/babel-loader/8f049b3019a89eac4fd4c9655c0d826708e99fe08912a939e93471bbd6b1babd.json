{"ast":null,"code":"import { __rest as e } from \"../../../../_virtual/_tslib.js\";\nimport o, { forwardRef as t, useRef as i, useMemo as s } from \"react\";\nimport l from \"../../Tooltip/Tooltip.js\";\nimport n from \"../../Icon/Icon.js\";\nimport r from \"../../../hooks/useIsOverflowing/useIsOverflowing.js\";\nimport { withStaticProps as a } from \"../../../types/withStaticProps.js\";\nimport \"../../../utils/colors-vars-map.js\";\nimport p from \"../../Label/Label.js\";\nimport c from \"./MenuItem.module.scss.js\";\nimport m from \"./components/BaseMenuItem/BaseMenuItem.js\";\nimport d from \"./components/MenuItemIcon/MenuItemIcon.js\";\nimport { TooltipPositions as u } from \"../../Tooltip/TooltipConstants.js\";\nvar f = t(function (t, n) {\n  var a = t.className,\n    u = t.iconWrapperClassName,\n    f = t.title,\n    b = void 0 === f ? \"\" : f,\n    v = t.label,\n    j = void 0 === v ? \"\" : v,\n    y = t.icon,\n    I = void 0 === y ? \"\" : y,\n    g = t.iconType,\n    C = t.iconBackgroundColor,\n    h = t.disabled,\n    k = void 0 !== h && h,\n    w = t.disableReason,\n    M = t.selected,\n    N = void 0 !== M && M,\n    T = t.key,\n    E = t.children,\n    P = t.tooltipContent,\n    O = t.tooltipPosition,\n    B = void 0 === O ? \"right\" : O,\n    S = t.tooltipShowDelay,\n    D = void 0 === S ? 300 : S,\n    x = t.tooltipProps,\n    L = t[\"aria-label\"],\n    R = e(t, [\"className\", \"iconWrapperClassName\", \"title\", \"label\", \"icon\", \"iconType\", \"iconBackgroundColor\", \"disabled\", \"disableReason\", \"selected\", \"key\", \"children\", \"tooltipContent\", \"tooltipPosition\", \"tooltipShowDelay\", \"tooltipProps\", \"aria-label\"]),\n    W = i(),\n    _ = null != L ? L : b,\n    V = r({\n      ref: W\n    }) || k || P,\n    q = s(function () {\n      return k ? w : P || b;\n    }, [w, k, b, P]),\n    z = s(function () {\n      if (j) return \"string\" == typeof j ? o.createElement(p, {\n        kind: \"line\",\n        text: j\n      }) : o.isValidElement(j) && j.type === p ? j : void 0;\n    }, [j]);\n  return o.createElement(l, Object.assign({\n    content: V ? q : null,\n    position: B,\n    showDelay: D\n  }, x), o.createElement(m, Object.assign({\n    key: T,\n    ref: n,\n    subMenu: E,\n    className: a,\n    disabled: k,\n    selected: N\n  }, R), !!I && o.createElement(d, {\n    icon: I,\n    type: g,\n    label: _,\n    disabled: k,\n    selected: N,\n    backgroundColor: C,\n    wrapperClassName: u\n  }), o.createElement(\"div\", {\n    ref: W,\n    className: c.title\n  }, b), z));\n});\nObject.assign(f, {\n  isSelectable: !0,\n  isMenuChild: !0\n});\nvar b = a(f, {\n  iconType: n.type,\n  tooltipPositions: u\n});\nexport { b as default };","map":{"version":3,"names":["f","t","n","a","className","u","iconWrapperClassName","title","b","v","label","j","y","icon","I","g","iconType","C","iconBackgroundColor","h","disabled","k","w","disableReason","M","selected","N","T","key","E","children","P","tooltipContent","O","tooltipPosition","B","S","tooltipShowDelay","D","x","tooltipProps","L","R","e","W","i","_","V","r","ref","q","s","z","o","createElement","p","kind","text","isValidElement","type","l","Object","assign","content","position","showDelay","m","subMenu","d","backgroundColor","wrapperClassName","c","isSelectable","isMenuChild","tooltipPositions","default"],"sources":["/Users/ankish/Downloads/MA/MAPIT/untitledUi/node_modules/@vibe/core/src/components/Menu/MenuItem/MenuItem.tsx"],"sourcesContent":["import React, { AriaAttributes, ForwardedRef, ReactElement, forwardRef, useMemo, useRef } from \"react\";\nimport Tooltip, { TooltipProps } from \"../../../components/Tooltip/Tooltip\";\nimport Icon from \"../../../components/Icon/Icon\";\nimport useIsOverflowing from \"../../../hooks/useIsOverflowing/useIsOverflowing\";\nimport { SubIcon, VibeComponentProps, withStaticProps } from \"../../../types\";\nimport { IconType } from \"../../Icon\";\nimport { CloseMenuOption, MenuChild } from \"../Menu/MenuConstants\";\nimport Label from \"../../Label/Label\";\nimport styles from \"./MenuItem.module.scss\";\nimport BaseMenuItem from \"./components/BaseMenuItem/BaseMenuItem\";\nimport MenuItemIcon from \"./components/MenuItemIcon/MenuItemIcon\";\nimport { TooltipPositions } from \"../../Tooltip/Tooltip.types\";\nimport { TooltipPositions as TooltipPositionsEnum } from \"../../Tooltip/TooltipConstants\";\nimport { SubmenuPosition } from \"./MenuItem.types\";\n\nexport interface MenuItemProps extends VibeComponentProps {\n  /**\n   * The title of the menu item.\n   */\n  title?: string;\n  /**\n   * The label displayed alongside the title.\n   */\n  label?: string | React.ReactElement<typeof Label>;\n  /**\n   * The icon displayed in the menu item.\n   */\n  icon?: SubIcon;\n  /**\n   * The type of icon.\n   */\n  iconType?: IconType;\n  /**\n   * The background color of the icon.\n   */\n  iconBackgroundColor?: string;\n  /**\n   * If true, the menu item is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * The reason for disabling the item, shown in a tooltip.\n   */\n  disableReason?: string;\n  /**\n   * If true, the menu item is selected.\n   */\n  selected?: boolean;\n  /**\n   * Callback fired when the menu item is clicked.\n   */\n  onClick?: (event: React.MouseEvent | React.KeyboardEvent) => void;\n  /**\n   * The active item index in the menu.\n   */\n  activeItemIndex?: number;\n  /**\n   * Callback to set the active item index.\n   */\n  setActiveItemIndex?: (index: number) => void;\n  /**\n   * The index of the menu item.\n   */\n  index?: number;\n  /**\n   * The key of the menu item.\n   */\n  key?: string;\n  /**\n   * If true, the parent menu is visible.\n   */\n  isParentMenuVisible?: boolean;\n  /**\n   * Callback to reset the open submenu index.\n   */\n  resetOpenSubMenuIndex?: () => void;\n  /**\n   * If true, a submenu is open.\n   */\n  hasOpenSubMenu?: boolean;\n  /**\n   * Callback to open or close a submenu by index.\n   */\n  setSubMenuIsOpenByIndex?: (index: number, isOpen: boolean) => void;\n  /**\n   * If true, document event listeners are used for handling interactions.\n   */\n  useDocumentEventListeners?: boolean;\n  /**\n   * The tooltip content for the menu item.\n   */\n  tooltipContent?: string;\n  /**\n   * The position of the tooltip.\n   */\n  tooltipPosition?: TooltipPositions;\n  /**\n   * The delay in milliseconds before the tooltip shows.\n   */\n  tooltipShowDelay?: number;\n  /**\n   * Additional props for customizing the tooltip.\n   */\n  tooltipProps?: Partial<TooltipProps>;\n  /**\n   * Callback fired when the mouse leaves the item.\n   */\n  onMouseLeave?: (event: React.MouseEvent) => void;\n  /**\n   * Callback fired when the mouse enters the item.\n   */\n  onMouseEnter?: (event: React.MouseEvent) => void;\n  /**\n   * Class name applied to the icon wrapper.\n   */\n  iconWrapperClassName?: string;\n  /**\n   * If true, the menu item starts as selected.\n   */\n  isInitialSelectedState?: boolean;\n  /**\n   * If true, the menu scrolls to ensure visibility.\n   */\n  shouldScrollMenu?: boolean;\n  /**\n   * Function to close the menu with a given option.\n   */\n  closeMenu?: (option: CloseMenuOption) => void;\n  /**\n   * Reference to the menu container.\n   */\n  menuRef?: React.RefObject<HTMLElement>;\n  /**\n   * The submenu items, if applicable.\n   */\n  children?: MenuChild | MenuChild[];\n  /**\n   * If true, enables a split menu item interaction where the main area triggers an action,\n   * while the icon button opens the submenu.\n   */\n  splitMenuItem?: boolean;\n  /**\n   * The label of the menu item for accessibility.\n   */\n  \"aria-label\"?: AriaAttributes[\"aria-label\"];\n  /**\n   * The position of a submenu relative to the menu item.\n   */\n  submenuPosition?: SubmenuPosition;\n  /**\n   * If true, automatically repositions the submenu when its content changes.\n   */\n  autoAdjustOnSubMenuContentResize?: boolean;\n}\n\nexport interface MenuItemTitleComponentProps extends Omit<MenuItemProps, \"title\"> {\n  title: ReactElement;\n  \"aria-label\": NonNullable<AriaAttributes[\"aria-label\"]>;\n}\n\nconst MenuItem = forwardRef(\n  (\n    {\n      className,\n      iconWrapperClassName,\n      title = \"\",\n      label = \"\",\n      icon = \"\",\n      iconType,\n      iconBackgroundColor,\n      disabled = false,\n      disableReason,\n      selected = false,\n      key,\n      children,\n      tooltipContent,\n      tooltipPosition = \"right\",\n      tooltipShowDelay = 300,\n      tooltipProps,\n      \"aria-label\": ariaLabel,\n      ...baseMenuProps\n    }: MenuItemProps | MenuItemTitleComponentProps,\n    ref: ForwardedRef<HTMLElement>\n  ) => {\n    const titleRef = useRef();\n\n    // if \"title\" is a component ariaLabel is mandatory\n    const iconLabel = ariaLabel ?? (title as string);\n\n    const isTitleHoveredAndOverflowing = useIsOverflowing({ ref: titleRef });\n    const shouldShowTooltip = isTitleHoveredAndOverflowing || disabled || tooltipContent;\n\n    const finalTooltipContent = useMemo(() => {\n      if (disabled) return disableReason;\n      if (tooltipContent) return tooltipContent;\n      return title;\n    }, [disableReason, disabled, title, tooltipContent]);\n\n    const renderLabel = useMemo(() => {\n      if (!label) return;\n      if (typeof label === \"string\") {\n        return <Label kind=\"line\" text={label} />;\n      }\n      if (React.isValidElement(label) && label.type === Label) {\n        return label;\n      }\n    }, [label]);\n\n    return (\n      <Tooltip\n        content={shouldShowTooltip ? finalTooltipContent : null}\n        position={tooltipPosition}\n        showDelay={tooltipShowDelay}\n        {...tooltipProps}\n      >\n        <BaseMenuItem\n          key={key}\n          ref={ref}\n          subMenu={children}\n          className={className}\n          disabled={disabled}\n          selected={selected}\n          {...baseMenuProps}\n        >\n          {Boolean(icon) && (\n            <MenuItemIcon\n              icon={icon}\n              type={iconType}\n              label={iconLabel}\n              disabled={disabled}\n              selected={selected}\n              backgroundColor={iconBackgroundColor}\n              wrapperClassName={iconWrapperClassName}\n            />\n          )}\n          <div ref={titleRef} className={styles.title}>\n            {title}\n          </div>\n          {renderLabel}\n        </BaseMenuItem>\n      </Tooltip>\n    );\n  }\n);\n\nObject.assign(MenuItem, {\n  isSelectable: true,\n  isMenuChild: true\n});\n\ninterface MenuItemStaticProps {\n  iconType: typeof Icon.type;\n  tooltipPositions: typeof TooltipPositionsEnum;\n}\n\nexport default withStaticProps<MenuItemProps | MenuItemTitleComponentProps, MenuItemStaticProps>(MenuItem, {\n  iconType: Icon.type,\n  tooltipPositions: TooltipPositionsEnum\n});\n"],"mappings":";;;;;;;;;;;;AAgKA,IAAMA,CAAA,GAAWC,CAAA,CACf,UACEA,CAAA,EAoBAC,CAAA;EAAA,IAnBEC,CAAA,GAgBuBF,CAAA,CAhBvBG,SAAA;IACAC,CAAA,GAeuBJ,CAAA,CAfvBK,oBAAA;IAAoBN,CAAA,GAeGC,CAAA,CAdvBM,KAAA;IAAAC,CAAA,QAAQ,MAAHR,CAAA,GAAG,KAAEA,CAAA;IAAAS,CAAA,GAcaR,CAAA,CAbvBS,KAAA;IAAAC,CAAA,QAAQ,MAAHF,CAAA,GAAG,KAAEA,CAAA;IAAAG,CAAA,GAaaX,CAAA,CAZvBY,IAAA;IAAAC,CAAA,QAAO,MAAHF,CAAA,GAAG,KAAEA,CAAA;IACTG,CAAA,GAWuBd,CAAA,CAXvBe,QAAA;IACAC,CAAA,GAUuBhB,CAAA,CAVvBiB,mBAAA;IAAmBC,CAAA,GAUIlB,CAAA,CATvBmB,QAAA;IAAAC,CAAA,QAAW,MAAHF,CAAA,IAAQA,CAAA;IAChBG,CAAA,GAQuBrB,CAAA,CARvBsB,aAAA;IAAaC,CAAA,GAQUvB,CAAA,CAPvBwB,QAAA;IAAAC,CAAA,QAAW,MAAHF,CAAA,IAAQA,CAAA;IAChBG,CAAA,GAMuB1B,CAAA,CANvB2B,GAAA;IACAC,CAAA,GAKuB5B,CAAA,CALvB6B,QAAA;IACAC,CAAA,GAIuB9B,CAAA,CAJvB+B,cAAA;IAAcC,CAAA,GAIShC,CAAA,CAHvBiC,eAAA;IAAAC,CAAA,QAAkB,MAAHF,CAAA,GAAG,UAAOA,CAAA;IAAAG,CAAA,GAGFnC,CAAA,CAFvBoC,gBAAA;IAAAC,CAAA,QAAmB,MAAHF,CAAA,GAAG,MAAGA,CAAA;IACtBG,CAAA,GACuBtC,CAAA,CADvBuC,YAAA;IACcC,CAAA,GAASxC,CAAA,CAAvB;IACGyC,CAAA,GAlBLC,CAAA,CAAA1C,CAAA;IAsBM2C,CAAA,GAAWC,CAAA;IAGXC,CAAA,GAAY,QAAAL,CAAA,GAAAA,CAAA,GAAcjC,CAAA;IAG1BuC,CAAA,GAD+BC,CAAA,CAAiB;MAAEC,GAAA,EAAKL;IAAA,MACHvB,CAAA,IAAYU,CAAA;IAEhEmB,CAAA,GAAsBC,CAAA,CAAQ;MAClC,OAAI9B,CAAA,GAAiBC,CAAA,GACjBS,CAAA,IACGvB,CACR;IAAA,GAAE,CAACc,CAAA,EAAeD,CAAA,EAAUb,CAAA,EAAOuB,CAAA;IAE9BqB,CAAA,GAAcD,CAAA,CAAQ;MAC1B,IAAKxC,CAAA,EACL,OAAqB,mBAAVA,CAAA,GACF0C,CAAA,CAAAC,aAAA,CAACC,CAAA,EAAK;QAACC,IAAA,EAAK;QAAOC,IAAA,EAAM9C;MAAA,KAE9B0C,CAAA,CAAMK,cAAA,CAAe/C,CAAA,KAAUA,CAAA,CAAMgD,IAAA,KAASJ,CAAA,GACzC5C,CAAA,QADT,CAGF;IAAA,GAAG,CAACA,CAAA;EAEJ,OACE0C,CAAA,CAACC,aAAA,CAAAM,CAAA,EACCC,MAAA,CAAAC,MAAA;IAAAC,OAAA,EAAShB,CAAA,GAAoBG,CAAA,GAAsB;IACnDc,QAAA,EAAU7B,CAAA;IACV8B,SAAA,EAAW3B;EAAA,GACPC,CAAA,GAEJc,CAAA,CAACC,aAAA,CAAAY,CAAA,EACCL,MAAA,CAAAC,MAAA;IAAAlC,GAAA,EAAKD,CAAA;IACLsB,GAAA,EAAK/C,CAAA;IACLiE,OAAA,EAAStC,CAAA;IACTzB,SAAA,EAAWD,CAAA;IACXiB,QAAA,EAAUC,CAAA;IACVI,QAAA,EAAUC;EAAA,GACNgB,CAAA,KAEK5B,CAAA,IACPuC,CAAA,CAAAC,aAAA,CAACc,CAAA,EAAY;IACXvD,IAAA,EAAMC,CAAA;IACN6C,IAAA,EAAM5C,CAAA;IACNL,KAAA,EAAOoC,CAAA;IACP1B,QAAA,EAAUC,CAAA;IACVI,QAAA,EAAUC,CAAA;IACV2C,eAAA,EAAiBpD,CAAA;IACjBqD,gBAAA,EAAkBjE;EAAA,IAGtBgD,CAAA,CAAKC,aAAA;IAAAL,GAAA,EAAKL,CAAA;IAAUxC,SAAA,EAAWmE,CAAA,CAAOhE;EAAA,GACnCC,CAAA,GAEF4C,CAAA,EAIT;AAAA;AAGFS,MAAA,CAAOC,MAAA,CAAO9D,CAAA,EAAU;EACtBwE,YAAA,GAAc;EACdC,WAAA,GAAa;AAAA;AAQf,IAAejE,CAAA,GAAAL,CAAA,CAAkFH,CAAA,EAAU;EACzGgB,QAAA,EAAUd,CAAA,CAAKyD,IAAA;EACfe,gBAAA,EAAkBrE;AAAA;AAAA,SAAAG,CAAA,IAAAmE,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}