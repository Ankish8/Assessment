{"ast":null,"code":"import e, { forwardRef as a } from \"react\";\nimport t from \"classnames\";\nimport { noop as s } from \"lodash-es\";\nimport r from \"../Switch/Switch.js\";\nimport { MockToggle as o } from \"./MockToggle.js\";\nimport i from \"./Toggle.module.scss.js\";\nimport { getTestId as d, ComponentDefaultTestId as l } from \"../../tests/testIds.js\";\nimport { ComponentVibeId as m } from \"../../tests/constants.js\";\nvar n = a(function (a, n) {\n  var c = a.id,\n    f = a.className,\n    p = a.toggleSelectedClassName,\n    v = a.isDefaultSelected,\n    u = void 0 === v || v,\n    g = a.isSelected,\n    C = a.onChange,\n    b = void 0 === C ? s : C,\n    O = a.value,\n    T = a.name,\n    h = a.disabled,\n    L = a.ariaLabel,\n    N = a.ariaControls,\n    j = a.areLabelsHidden,\n    x = void 0 !== j && j,\n    S = a.onOverrideText,\n    w = void 0 === S ? \"On\" : S,\n    E = a.offOverrideText,\n    G = void 0 === E ? \"Off\" : E,\n    k = a.size,\n    z = void 0 === k ? \"medium\" : k,\n    H = a[\"data-testid\"],\n    I = t(i.wrapper),\n    D = t(i.toggleInput);\n  return e.createElement(r, {\n    defaultChecked: u,\n    checked: g,\n    id: c,\n    wrapperClassName: I,\n    onChange: b,\n    value: O,\n    name: T,\n    disabled: h,\n    ariaLabel: L,\n    ariaControls: N,\n    inputClassName: D,\n    ref: n,\n    \"data-testid\": H || d(l.TOGGLE),\n    \"data-vibe\": m.TOGGLE\n  }, e.createElement(o, {\n    areLabelsHidden: x,\n    offOverrideText: G,\n    onOverrideText: w,\n    disabled: h,\n    className: f,\n    selectedClassName: p,\n    size: z\n  }));\n});\nexport { n as default };","map":{"version":3,"names":["n","a","c","id","f","className","p","toggleSelectedClassName","v","isDefaultSelected","u","g","isSelected","C","onChange","b","s","O","value","T","name","h","disabled","L","ariaLabel","N","ariaControls","j","areLabelsHidden","x","S","onOverrideText","w","E","offOverrideText","G","k","size","z","H","I","t","i","wrapper","D","toggleInput","e","createElement","r","defaultChecked","checked","wrapperClassName","inputClassName","ref","d","l","TOGGLE","m","o","selectedClassName","default"],"sources":["/Users/ankish/Downloads/MA/MAPIT/untitledUi/node_modules/@vibe/core/src/components/Toggle/Toggle.tsx"],"sourcesContent":["import React, { ChangeEvent, forwardRef } from \"react\";\nimport cx from \"classnames\";\nimport { noop as NOOP } from \"lodash-es\";\nimport Switch from \"../Switch/Switch\";\nimport { MockToggle } from \"./MockToggle\";\nimport { VibeComponentProps } from \"../../types\";\nimport styles from \"./Toggle.module.scss\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport { ToggleSize } from \"./Toggle.types\";\nimport { ComponentVibeId } from \"../../tests/constants\";\n\nexport interface ToggleProps extends VibeComponentProps {\n  /**\n   * Class name applied when the toggle is selected.\n   */\n  toggleSelectedClassName?: string;\n  /**\n   * If true, the toggle is selected by default.\n   */\n  isDefaultSelected?: boolean;\n  /**\n   * Controls the selected state of the toggle.\n   */\n  isSelected?: boolean;\n  /**\n   * Callback fired when the toggle state changes.\n   */\n  onChange?: (value: boolean, event: ChangeEvent<HTMLInputElement>) => void;\n  /**\n   * The value associated with the toggle.\n   */\n  value?: string;\n  /**\n   * The name attribute of the toggle input.\n   */\n  name?: string;\n  /**\n   * If true, disables the toggle.\n   */\n  disabled?: boolean;\n  /**\n   * If true, hides the on/off labels.\n   */\n  areLabelsHidden?: boolean;\n  /**\n   * The text displayed when the toggle is in the \"on\" position.\n   */\n  onOverrideText?: string;\n  /**\n   * The text displayed when the toggle is in the \"off\" position.\n   */\n  offOverrideText?: string;\n  /**\n   * The ARIA label for accessibility.\n   */\n  ariaLabel?: string;\n  /**\n   * The ID of the element controlled by the toggle.\n   */\n  ariaControls?: string;\n  /**\n   * The size of the toggle.\n   */\n  size?: ToggleSize;\n}\n\nconst Toggle = forwardRef(\n  (\n    {\n      id,\n      className,\n      toggleSelectedClassName,\n      isDefaultSelected = true,\n      isSelected,\n      onChange = NOOP,\n      value,\n      name,\n      disabled,\n      ariaLabel,\n      ariaControls,\n      areLabelsHidden = false,\n      onOverrideText = \"On\",\n      offOverrideText = \"Off\",\n      size = \"medium\",\n      \"data-testid\": dataTestId\n    }: ToggleProps,\n    ref: React.ForwardedRef<HTMLInputElement>\n  ) => {\n    const wrapperClassName = cx(styles.wrapper);\n    const inputClassName = cx(styles.toggleInput);\n\n    return (\n      <Switch\n        defaultChecked={isDefaultSelected}\n        checked={isSelected}\n        id={id}\n        wrapperClassName={wrapperClassName}\n        onChange={onChange}\n        value={value}\n        name={name}\n        disabled={disabled}\n        ariaLabel={ariaLabel}\n        ariaControls={ariaControls}\n        inputClassName={inputClassName}\n        ref={ref}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.TOGGLE)}\n        data-vibe={ComponentVibeId.TOGGLE}\n      >\n        <MockToggle\n          areLabelsHidden={areLabelsHidden}\n          offOverrideText={offOverrideText}\n          onOverrideText={onOverrideText}\n          disabled={disabled}\n          className={className}\n          selectedClassName={toggleSelectedClassName}\n          size={size}\n        />\n      </Switch>\n    );\n  }\n);\n\nexport default Toggle;\n"],"mappings":";;;;;;;;AAkEM,IAAAA,CAAA,GAASC,CAAA,CACb,UAAAA,CAAA,EAmBED,CAAA;EACE,IAlBAE,CAAA,GAAED,CAAA,CAAFE,EAAA;IACAC,CAAA,GAASH,CAAA,CAATI,SAAA;IACAC,CAAA,GAAuBL,CAAA,CAAvBM,uBAAA;IAAuBC,CAAA,GAAAP,CAAA,CACvBQ,iBAAA;IAAAC,CAAA,QAAoB,MAAHF,CAAA,IAAOA,CAAA;IACxBG,CAAA,GAAUV,CAAA,CAAVW,UAAA;IAAUC,CAAA,GAAAZ,CAAA,CACVa,QAAA;IAAAC,CAAA,QAAW,MAAHF,CAAA,GAAGG,CAAA,GAAIH,CAAA;IACfI,CAAA,GAAKhB,CAAA,CAALiB,KAAA;IACAC,CAAA,GAAIlB,CAAA,CAAJmB,IAAA;IACAC,CAAA,GAAQpB,CAAA,CAARqB,QAAA;IACAC,CAAA,GAAStB,CAAA,CAATuB,SAAA;IACAC,CAAA,GAAYxB,CAAA,CAAZyB,YAAA;IAAYC,CAAA,GAAA1B,CAAA,CACZ2B,eAAA;IAAAC,CAAA,QAAkB,MAAHF,CAAA,IAAQA,CAAA;IAAAG,CAAA,GAAA7B,CAAA,CACvB8B,cAAA;IAAAC,CAAA,QAAiB,MAAHF,CAAA,GAAG,OAAIA,CAAA;IAAAG,CAAA,GAAAhC,CAAA,CACrBiC,eAAA;IAAAC,CAAA,QAAkB,MAAHF,CAAA,GAAG,QAAKA,CAAA;IAAAG,CAAA,GAAAnC,CAAA,CACvBoC,IAAA;IAAAC,CAAA,QAAO,MAAHF,CAAA,GAAG,WAAQA,CAAA;IACAG,CAAA,GAAUtC,CAAA,CAAzB;IAIIuC,CAAA,GAAmBC,CAAA,CAAGC,CAAA,CAAOC,OAAA;IAC7BC,CAAA,GAAiBH,CAAA,CAAGC,CAAA,CAAOG,WAAA;EAEjC,OACEC,CAAA,CAAAC,aAAA,CAACC,CAAA,EAAM;IACLC,cAAA,EAAgBvC,CAAA;IAChBwC,OAAA,EAASvC,CAAA;IACTR,EAAA,EAAID,CAAA;IACJiD,gBAAA,EAAkBX,CAAA;IAClB1B,QAAA,EAAUC,CAAA;IACVG,KAAA,EAAOD,CAAA;IACPG,IAAA,EAAMD,CAAA;IACNG,QAAA,EAAUD,CAAA;IACVG,SAAA,EAAWD,CAAA;IACXG,YAAA,EAAcD,CAAA;IACd2B,cAAA,EAAgBR,CAAA;IAChBS,GAAA,EAAKrD,CAAA;IAAG,eACKuC,CAAA,IAAce,CAAA,CAAUC,CAAA,CAAuBC,MAAA;IACjD,aAAAC,CAAA,CAAgBD;EAAA,GAE3BV,CAAA,CAAAC,aAAA,CAACW,CAAA,EAAU;IACT9B,eAAA,EAAiBC,CAAA;IACjBK,eAAA,EAAiBC,CAAA;IACjBJ,cAAA,EAAgBC,CAAA;IAChBV,QAAA,EAAUD,CAAA;IACVhB,SAAA,EAAWD,CAAA;IACXuD,iBAAA,EAAmBrD,CAAA;IACnB+B,IAAA,EAAMC;EAAA,GAId;AAAA;AAAA,SAAAtC,CAAA,IAAA4D,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}