{"ast":null,"code":"import { slicedToArray as e, defineProperty as o } from \"../../../_virtual/_rollupPluginBabelHelpers.js\";\nimport t, { forwardRef as r, useRef as a, useState as i, useCallback as s, useMemo as n } from \"react\";\nimport l from \"classnames\";\nimport c from \"../Icon/Icon.js\";\nimport m from \"../../hooks/useMergeRef.js\";\nimport { getCSSVar as d } from \"../../services/themes.js\";\nimport { ElementAllowedColor as u } from \"../../utils/colors-vars-map.js\";\nimport { getElementColor as p } from \"../../types/Colors.js\";\nimport v from \"../Avatar/Avatar.js\";\nimport f from \"../IconButton/IconButton.js\";\nimport b from \"../Text/Text.js\";\nimport { getTestId as g, ComponentDefaultTestId as y } from \"../../tests/testIds.js\";\nimport { AvatarType as j } from \"../Avatar/AvatarConstants.js\";\nimport { withStaticProps as h } from \"../../types/withStaticProps.js\";\nimport k from \"../../hooks/useSetFocus/index.js\";\nimport C from \"../../hooks/useClickableProps/useClickableProps.js\";\nimport x from \"./Chips.module.scss.js\";\nimport N from \"../../../icons/dist/react/CloseSmall.js\";\nvar S = h(r(function (r, u) {\n  var j = r.className,\n    h = r.avatarClassName,\n    S = r.iconClassName,\n    A = r.id,\n    E = r.label,\n    T = void 0 === E ? \"\" : E,\n    M = r.leftIcon,\n    w = void 0 === M ? null : M,\n    B = r.rightIcon,\n    I = void 0 === B ? null : B,\n    P = r.leftAvatar,\n    z = void 0 === P ? null : P,\n    L = r.rightAvatar,\n    O = void 0 === L ? null : L,\n    R = r.disabled,\n    D = void 0 !== R && R,\n    F = r.readOnly,\n    H = void 0 !== F && F,\n    _ = r.allowTextSelection,\n    U = void 0 !== _ && _,\n    q = r.color,\n    G = void 0 === q ? \"primary\" : q,\n    J = r.iconSize,\n    K = void 0 === J ? 18 : J,\n    Q = r.onDelete,\n    V = void 0 === Q ? function (e, o) {} : Q,\n    W = r.onMouseDown,\n    X = r.onClick,\n    Y = r.noAnimation,\n    Z = void 0 === Y || Y,\n    $ = r.ariaLabel,\n    ee = r.disableClickableBehavior,\n    oe = void 0 !== ee && ee,\n    te = r.leftAvatarType,\n    re = void 0 === te ? \"img\" : te,\n    ae = r.rightAvatarType,\n    ie = void 0 === ae ? \"img\" : ae,\n    se = r.showBorder,\n    ne = void 0 !== se && se,\n    le = r.leftRenderer,\n    ce = r.rightRenderer,\n    me = r.closeButtonAriaLabel,\n    de = void 0 === me ? \"Remove\" : me,\n    ue = r.noMargin,\n    pe = void 0 !== ue && ue,\n    ve = r[\"data-testid\"] || g(y.CHIP, A),\n    fe = !(!X && !W || oe),\n    be = !H && !D,\n    ge = $ || \"string\" == typeof T && T || \"\",\n    ye = a(null),\n    je = a(null),\n    he = i(!1),\n    ke = e(he, 2),\n    Ce = ke[0],\n    xe = ke[1],\n    Ne = s(function () {\n      return xe(!0);\n    }, []),\n    Se = s(function () {\n      return xe(!1);\n    }, []),\n    Ae = k({\n      ref: je\n    }).isFocused,\n    Ee = m(u, je),\n    Te = l(x.chips, j, o(o(o(o(o({}, x.disabled, D), x.noAnimation, Z), x.withUserSelect, U), x.border, ne), x.noMargin, pe)),\n    Me = l(x.clickable, Te, o(o({}, x.disabled, D), x.disableTextSelection, !U)),\n    we = n(function () {\n      return {\n        backgroundColor: D ? d(\"disabled-background-color\") : fe && (Ce || Ae) ? p(G, !0, !0) : p(G, !0)\n      };\n    }, [D, fe, Ce, Ae, G]),\n    Be = s(function (e) {\n      e.stopPropagation(), V && V(A, e);\n    }, [A, V]),\n    Ie = s(function (e) {\n      void 0 !== X && e.target !== ye.current && (e.preventDefault(), X(e));\n    }, [X]),\n    Pe = C({\n      onClick: Ie,\n      onMouseDown: W,\n      disabled: D,\n      id: A,\n      \"data-testid\": ve,\n      ariaLabel: ge,\n      ariaHidden: !1,\n      ariaHasPopup: !1,\n      ariaExpanded: !1\n    }, Ee),\n    ze = fe ? Object.assign(Object.assign({}, Pe), {\n      ref: Ee,\n      className: Me,\n      style: we,\n      onMouseEnter: Ne,\n      onMouseLeave: Se\n    }) : {\n      className: Te,\n      \"aria-label\": ge,\n      style: we,\n      ref: Ee,\n      onClick: Ie,\n      onMouseDown: W,\n      id: A,\n      \"data-testid\": ve,\n      onMouseEnter: Ne,\n      onMouseLeave: Se\n    },\n    Le = \"text\" === re ? {\n      text: z\n    } : {\n      src: z\n    },\n    Oe = \"text\" === re ? {\n      text: O\n    } : {\n      src: O\n    };\n  return t.createElement(\"div\", Object.assign({}, ze), z ? t.createElement(v, Object.assign({\n    withoutBorder: !0,\n    className: l(x.avatar, x.left, h),\n    customSize: 18,\n    type: re,\n    key: A\n  }, Le)) : null, w ? t.createElement(c, {\n    className: l(x.icon, x.left, S),\n    iconType: \"font\",\n    icon: w,\n    iconSize: K,\n    ignoreFocusStyle: !0\n  }) : null, le && t.createElement(\"div\", {\n    className: l(x.customRenderer, x.left)\n  }, le), t.createElement(b, {\n    type: \"text2\",\n    className: x.label\n  }, T), I ? t.createElement(c, {\n    className: l(x.icon, x.right, S),\n    iconType: \"font\",\n    icon: I,\n    iconSize: K,\n    ignoreFocusStyle: !0\n  }) : null, O ? t.createElement(v, Object.assign({\n    withoutBorder: !0,\n    className: l(x.avatar, x.right, h),\n    customSize: 18,\n    type: ie,\n    key: A\n  }, Oe)) : null, ce && t.createElement(\"div\", {\n    className: l(x.customRenderer, x.right)\n  }, ce), be && t.createElement(f, {\n    size: \"xxs\",\n    color: \"on-primary-color\",\n    className: l(x.icon, x.close),\n    ariaLabel: de,\n    hideTooltip: !0,\n    icon: N,\n    onClick: Be,\n    \"data-testid\": \"\".concat(ve, \"-close\"),\n    ref: ye\n  }));\n}), {\n  colors: u,\n  avatarTypes: j\n});\nexport { S as default };","map":{"version":3,"names":["S","h","r","u","j","className","avatarClassName","iconClassName","A","id","E","label","T","M","leftIcon","w","B","rightIcon","I","P","leftAvatar","z","L","rightAvatar","O","R","disabled","D","F","readOnly","H","_","allowTextSelection","U","q","color","G","J","iconSize","K","Q","onDelete","V","e","o","W","onMouseDown","X","onClick","Y","noAnimation","Z","$","ariaLabel","ee","disableClickableBehavior","oe","te","leftAvatarType","re","ae","rightAvatarType","ie","se","showBorder","ne","le","leftRenderer","ce","rightRenderer","me","closeButtonAriaLabel","de","ue","noMargin","pe","ve","g","y","CHIP","fe","be","ge","ye","a","je","he","i","ke","Ce","xe","Ne","s","Se","Ae","k","ref","isFocused","Ee","m","Te","l","x","chips","withUserSelect","border","Me","clickable","disableTextSelection","we","n","backgroundColor","d","p","Be","stopPropagation","Ie","target","current","preventDefault","Pe","C","ariaHidden","ariaHasPopup","ariaExpanded","ze","Object","assign","style","onMouseEnter","onMouseLeave","Le","text","src","Oe","t","createElement","v","withoutBorder","avatar","left","customSize","type","key","c","icon","iconType","ignoreFocusStyle","customRenderer","b","right","f","size","close","hideTooltip","N","concat","colors","avatarTypes","default"],"sources":["/Users/ankish/Downloads/MA/MAPIT/untitledUi/node_modules/@vibe/core/src/components/Chips/Chips.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useMemo, useRef, useState } from \"react\";\nimport cx from \"classnames\";\nimport Icon from \"../Icon/Icon\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport { CloseSmall } from \"@vibe/icons\";\nimport { getCSSVar } from \"../../services/themes\";\nimport { ElementAllowedColor as ElementAllowedColorEnum } from \"../../utils/colors-vars-map\";\nimport { ElementAllowedColor, getElementColor } from \"../../types/Colors\";\nimport Avatar from \"../Avatar/Avatar\";\nimport IconButton from \"../IconButton/IconButton\";\nimport Text from \"../Text/Text\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport { AvatarType as AvatarTypeEnum } from \"../Avatar/AvatarConstants\";\nimport { AvatarType } from \"../Avatar\";\nimport { ElementContent, SubIcon, VibeComponentProps, withStaticProps } from \"../../types\";\n\nimport useSetFocus from \"../../hooks/useSetFocus\";\nimport useClickableProps from \"../../hooks/useClickableProps/useClickableProps\";\nimport styles from \"./Chips.module.scss\";\n\nconst CHIPS_AVATAR_SIZE = 18;\n\nexport interface ChipsProps extends VibeComponentProps {\n  /**\n   * The text or content displayed inside the chip.\n   */\n  label?: ElementContent;\n  /**\n   * If true, the chip is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the chip is read-only and cannot be deleted.\n   */\n  readOnly?: boolean;\n  /**\n   * A React element displayed on the right side.\n   */\n  rightRenderer?: ElementContent;\n  /**\n   * A React element displayed on the left side.\n   */\n  leftRenderer?: ElementContent;\n  /**\n   * Icon displayed on the right side.\n   */\n  rightIcon?: SubIcon;\n  /**\n   * Icon displayed on the left side.\n   */\n  leftIcon?: SubIcon;\n  /**\n   * Image URL or text for an avatar displayed on the right.\n   */\n  rightAvatar?: string;\n  /**\n   * The type of avatar displayed on the right.\n   */\n  rightAvatarType?: AvatarType;\n  /**\n   * Image URL or text for an avatar displayed on the left.\n   */\n  leftAvatar?: string;\n  /**\n   * The type of avatar displayed on the left.\n   */\n  leftAvatarType?: AvatarType;\n  /**\n   * Class name applied to left or right icons.\n   */\n  iconClassName?: string;\n  /**\n   * Class name applied to left or right avatars.\n   */\n  avatarClassName?: string;\n  /**\n   * The background color of the chip.\n   */\n  color?: Exclude<ElementAllowedColor, \"dark_indigo\" | \"blackish\">;\n  /**\n   * The size of the icons inside the chip.\n   */\n  iconSize?: number | string;\n  /**\n   * Callback fired when the chip is deleted.\n   */\n  onDelete?: (id: string, event: React.MouseEvent<HTMLSpanElement>) => void;\n  /**\n   * If true, disables the chip's entry animation.\n   */\n  noAnimation?: boolean;\n  /**\n   * If true, allows the user to select text inside the chip.\n   */\n  allowTextSelection?: boolean;\n  /**\n   * Callback fired when the mouse button is pressed on the chip.\n   */\n  onMouseDown?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  /**\n   * Callback fired when the chip is clicked.\n   */\n  onClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  /**\n   * The label of the chip for accessibility.\n   */\n  ariaLabel?: string;\n  /**\n   * If true, disables all click behaviors.\n   */\n  disableClickableBehavior?: boolean;\n  /**\n   * If true, displays a border around the chip.\n   */\n  showBorder?: boolean;\n  /**\n   * The label for the close button.\n   */\n  closeButtonAriaLabel?: string;\n  /**\n   * If true, removes the default margin from the chip.\n   */\n  noMargin?: boolean;\n}\n\nconst Chips = forwardRef(\n  (\n    {\n      className,\n      avatarClassName,\n      iconClassName,\n      id,\n      label = \"\",\n      leftIcon = null,\n      rightIcon = null,\n      leftAvatar = null,\n      rightAvatar = null,\n      disabled = false,\n      readOnly = false,\n      allowTextSelection = false,\n      color = \"primary\",\n      iconSize = 18,\n      onDelete = (_id: string, _e: React.MouseEvent<HTMLSpanElement>) => {},\n      onMouseDown,\n      onClick,\n      noAnimation = true,\n      ariaLabel,\n      \"data-testid\": dataTestId,\n      disableClickableBehavior = false,\n      leftAvatarType = \"img\",\n      rightAvatarType = \"img\",\n      showBorder = false,\n      leftRenderer,\n      rightRenderer,\n      closeButtonAriaLabel = \"Remove\",\n      noMargin = false\n    }: ChipsProps,\n    ref: React.ForwardedRef<HTMLDivElement>\n  ) => {\n    const componentDataTestId = dataTestId || getTestId(ComponentDefaultTestId.CHIP, id);\n    const hasClickableWrapper = (!!onClick || !!onMouseDown) && !disableClickableBehavior;\n    const hasCloseButton = !readOnly && !disabled;\n    const overrideAriaLabel = ariaLabel || (typeof label === \"string\" && label) || \"\";\n\n    const iconButtonRef = useRef(null);\n    const componentRef = useRef(null);\n\n    const [isHovered, setIsHovered] = useState(false);\n    const handleMouseEnter = useCallback(() => setIsHovered(true), []);\n    const handleMouseLeave = useCallback(() => setIsHovered(false), []);\n    const { isFocused } = useSetFocus({ ref: componentRef });\n\n    const mergedRef = useMergeRef<HTMLDivElement>(ref, componentRef);\n\n    const overrideClassName = cx(styles.chips, className, {\n      [styles.disabled]: disabled,\n      [styles.noAnimation]: noAnimation,\n      [styles.withUserSelect]: allowTextSelection,\n      [styles.border]: showBorder,\n      [styles.noMargin]: noMargin\n    });\n    const clickableClassName = cx(styles.clickable, overrideClassName, {\n      [styles.disabled]: disabled,\n      [styles.disableTextSelection]: !allowTextSelection\n    });\n\n    const backgroundColorStyle = useMemo(() => {\n      let cssVar;\n      if (disabled) {\n        cssVar = getCSSVar(\"disabled-background-color\");\n      } else if (hasClickableWrapper && (isHovered || isFocused)) {\n        cssVar = getElementColor(color, true, true);\n      } else {\n        cssVar = getElementColor(color, true);\n      }\n      return { backgroundColor: cssVar };\n    }, [disabled, hasClickableWrapper, isHovered, isFocused, color]);\n\n    const onDeleteCallback = useCallback(\n      (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n        e.stopPropagation();\n        if (onDelete) {\n          onDelete(id, e);\n        }\n      },\n      [id, onDelete]\n    );\n\n    const onClickCallback = useCallback(\n      (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        if (onClick !== undefined && (e.target as HTMLElement) !== iconButtonRef.current) {\n          e.preventDefault();\n          onClick(e);\n        }\n      },\n      [onClick]\n    );\n\n    const clickableProps = useClickableProps(\n      {\n        onClick: onClickCallback,\n        onMouseDown,\n        disabled,\n        id,\n        \"data-testid\": componentDataTestId,\n        ariaLabel: overrideAriaLabel,\n        ariaHidden: false,\n        ariaHasPopup: false,\n        ariaExpanded: false\n      },\n      mergedRef\n    );\n    const wrapperProps = hasClickableWrapper\n      ? {\n          ...clickableProps,\n          ref: mergedRef,\n          className: clickableClassName,\n          style: backgroundColorStyle,\n          onMouseEnter: handleMouseEnter,\n          onMouseLeave: handleMouseLeave\n        }\n      : {\n          className: overrideClassName,\n          \"aria-label\": overrideAriaLabel,\n          style: backgroundColorStyle,\n          ref: mergedRef,\n          onClick: onClickCallback,\n          onMouseDown,\n          id: id,\n          \"data-testid\": componentDataTestId,\n          onMouseEnter: handleMouseEnter,\n          onMouseLeave: handleMouseLeave\n        };\n\n    const leftAvatarProps = leftAvatarType === \"text\" ? { text: leftAvatar } : { src: leftAvatar };\n    const rightAvatarProps = leftAvatarType === \"text\" ? { text: rightAvatar } : { src: rightAvatar };\n\n    return (\n      <div {...wrapperProps}>\n        {leftAvatar ? (\n          <Avatar\n            withoutBorder\n            className={cx(styles.avatar, styles.left, avatarClassName)}\n            customSize={CHIPS_AVATAR_SIZE}\n            type={leftAvatarType}\n            key={id}\n            {...leftAvatarProps}\n          />\n        ) : null}\n        {leftIcon ? (\n          <Icon\n            className={cx(styles.icon, styles.left, iconClassName)}\n            iconType=\"font\"\n            icon={leftIcon}\n            iconSize={iconSize}\n            ignoreFocusStyle\n          />\n        ) : null}\n        {leftRenderer && <div className={cx(styles.customRenderer, styles.left)}>{leftRenderer}</div>}\n        <Text type=\"text2\" className={styles.label}>\n          {label}\n        </Text>\n        {rightIcon ? (\n          <Icon\n            className={cx(styles.icon, styles.right, iconClassName)}\n            iconType=\"font\"\n            icon={rightIcon}\n            iconSize={iconSize}\n            ignoreFocusStyle\n          />\n        ) : null}\n        {rightAvatar ? (\n          <Avatar\n            withoutBorder\n            className={cx(styles.avatar, styles.right, avatarClassName)}\n            customSize={CHIPS_AVATAR_SIZE}\n            type={rightAvatarType}\n            key={id}\n            {...rightAvatarProps}\n          />\n        ) : null}\n        {rightRenderer && <div className={cx(styles.customRenderer, styles.right)}>{rightRenderer}</div>}\n        {hasCloseButton && (\n          <IconButton\n            size=\"xxs\"\n            color=\"on-primary-color\"\n            className={cx(styles.icon, styles.close)}\n            ariaLabel={closeButtonAriaLabel}\n            hideTooltip\n            icon={CloseSmall}\n            onClick={onDeleteCallback}\n            data-testid={`${componentDataTestId}-close`}\n            ref={iconButtonRef}\n          />\n        )}\n      </div>\n    );\n  }\n);\n\ninterface ChipsStaticProps {\n  colors: typeof ElementAllowedColorEnum;\n  avatarTypes: typeof AvatarTypeEnum;\n}\n\nexport default withStaticProps<ChipsProps, ChipsStaticProps>(Chips, {\n  colors: ElementAllowedColorEnum,\n  avatarTypes: AvatarTypeEnum\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}