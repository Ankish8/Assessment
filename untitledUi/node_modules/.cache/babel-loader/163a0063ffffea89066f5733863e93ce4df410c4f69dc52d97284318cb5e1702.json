{"ast":null,"code":"import { defineProperty as e } from \"../../../_virtual/_rollupPluginBabelHelpers.js\";\nimport { getTestId as t, ComponentDefaultTestId as i } from \"../../tests/testIds.js\";\nimport o from \"classnames\";\nimport r, { forwardRef as s, useRef as l, useMemo as a } from \"react\";\nimport n from \"../Tooltip/Tooltip.js\";\nimport p from \"../../hooks/useIsOverflowing/useIsOverflowing.js\";\nimport m from \"../../hooks/ssr/useIsomorphicLayoutEffect.js\";\nimport f from \"../../hooks/useMergeRef.js\";\nimport c from \"./TextWithHighlight.module.scss.js\";\nvar g = function (e, t, i) {\n    return i ? r.createElement(arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : \"em\", {\n      className: o(c.highlightText, arguments.length > 4 ? arguments[4] : void 0),\n      key: t\n    }, e) : r.createElement(\"span\", {\n      key: t\n    }, e);\n  },\n  u = s(function (s, u) {\n    var h = s.className,\n      d = s.id,\n      v = s.text,\n      T = void 0 === v ? \"\" : v,\n      E = s.highlightTerm,\n      j = s.limit,\n      x = s.useEllipsis,\n      H = void 0 === x || x,\n      I = s.linesToClamp,\n      w = void 0 === I ? 3 : I,\n      y = s.ignoreCase,\n      k = void 0 === y || y,\n      P = s.allowTermSplit,\n      N = void 0 === P || P,\n      W = s.nonEllipsisTooltip,\n      _ = s.tooltipPosition,\n      C = s.wrappingTextTag,\n      O = void 0 === C ? \"em\" : C,\n      b = s.wrappingElementClassName,\n      G = s.tooltipProps,\n      L = void 0 === G ? {} : G,\n      R = s[\"data-testid\"],\n      $ = l(null),\n      B = f(u, $),\n      M = a(function () {\n        if (!T || !E || 0 === j) return T;\n        var e = E.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n        N && (e = e.split(\" \").join(\"|\"));\n        for (var t = RegExp(\"(\".concat(e, \")\"), k ? \"i\" : \"\"), i = T.split(t), o = [], r = 0, s = 0, l = 0; i.length > l; l++) if (i[l]) {\n          var a = l % 2 == 1;\n          o.push(g(i[l], s++, a && (!j || 0 > j || j > r), O, b)), a && r++;\n        }\n        return o;\n      }, [T, E, j, k, N, O, b]),\n      S = p({\n        ref: H && $\n      });\n    m(function () {\n      $.current && $.current.style.setProperty(\"--heading-clamp-lines\", \"\" + w);\n    }, [$, w, S]);\n    var X = r.createElement(\"div\", {\n      ref: B,\n      className: o(c.textWithHighlightWrapper, h, e({}, c.withEllipsis, H)),\n      id: d,\n      \"data-testid\": R || t(i.TEXT_WITH_HIGHLIGHT, d)\n    }, M);\n    return S || W ? r.createElement(n, Object.assign({\n      content: S ? T : W,\n      position: _\n    }, L), X) : X;\n  });\nexport { u as default };","map":{"version":3,"names":["g","getTextPart","e","t","i","r","createElement","arguments","length","className","o","c","highlightText","key","u","s","h","d","id","v","text","T","E","highlightTerm","j","limit","x","useEllipsis","H","I","linesToClamp","w","y","ignoreCase","k","P","allowTermSplit","N","W","nonEllipsisTooltip","_","tooltipPosition","C","wrappingTextTag","O","b","wrappingElementClassName","G","tooltipProps","L","R","$","l","B","f","M","a","replace","split","join","RegExp","concat","push","S","p","ref","m","current","style","setProperty","X","textWithHighlightWrapper","withEllipsis","TEXT_WITH_HIGHLIGHT","n","Object","assign","content","position","default"],"sources":["/Users/ankish/Downloads/MA/MAPIT/untitledUi/node_modules/@vibe/core/src/components/TextWithHighlight/TextWithHighlight.tsx"],"sourcesContent":["import { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React, { forwardRef, useMemo, useRef } from \"react\";\nimport Tooltip, { TooltipProps } from \"../../components/Tooltip/Tooltip\";\nimport useIsOverflowing from \"../../hooks/useIsOverflowing/useIsOverflowing\";\nimport useIsomorphicLayoutEffect from \"../../hooks/ssr/useIsomorphicLayoutEffect\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport VibeComponentProps from \"../../types/VibeComponentProps\";\nimport styles from \"./TextWithHighlight.module.scss\";\nimport { TooltipPositions } from \"../Tooltip/Tooltip.types\";\n\nconst getTextPart = (\n  text: string,\n  key: number,\n  shouldHighlight: boolean,\n  wrappingTextTag: keyof JSX.IntrinsicElements = \"em\",\n  wrappingElementClassName: string\n) => {\n  const WrappingElement = wrappingTextTag;\n  if (shouldHighlight) {\n    return (\n      <WrappingElement className={cx(styles.highlightText, wrappingElementClassName)} key={key}>\n        {text}\n      </WrappingElement>\n    );\n  }\n  return <span key={key}>{text}</span>;\n};\n\nexport interface TextWithHighlightProps extends VibeComponentProps {\n  /**\n   * The text content to display.\n   */\n  text?: string;\n  /**\n   * The term to highlight within the text.\n   */\n  highlightTerm?: string;\n  /**\n   * The maximum number of highlighted terms allowed.\n   */\n  limit?: number;\n  /**\n   * If true, the highlight search is case-insensitive.\n   */\n  ignoreCase?: boolean;\n  /**\n   * If true, truncates overflowing text with an ellipsis.\n   */\n  useEllipsis?: boolean;\n  /**\n   * If true, allows splitting the highlight term into separate words.\n   */\n  allowTermSplit?: boolean;\n  /**\n   * The number of lines to display before truncating with an ellipsis.\n   */\n  linesToClamp?: number;\n  /**\n   * Tooltip content displayed when there is no overflow.\n   */\n  nonEllipsisTooltip?: string;\n  /**\n   * The HTML tag used to wrap highlighted text.\n   */\n  wrappingTextTag?: keyof JSX.IntrinsicElements;\n  /**\n   * Class name applied to the wrapping element of highlighted text.\n   */\n  wrappingElementClassName?: string;\n  /**\n   * The position of the tooltip when displayed.\n   * @deprecated Use `tooltipProps.position` instead.\n   */\n  tooltipPosition?: TooltipPositions;\n  /**\n   * Additional props to customize the tooltip component.\n   */\n  tooltipProps?: Partial<TooltipProps>;\n}\n\nconst TextWithHighlight: React.FC<TextWithHighlightProps> = forwardRef(\n  (\n    {\n      className,\n      id,\n      text = \"\",\n      highlightTerm,\n      limit,\n      useEllipsis = true,\n      linesToClamp = 3,\n      ignoreCase = true,\n      allowTermSplit = true,\n      nonEllipsisTooltip,\n      tooltipPosition,\n      wrappingTextTag = \"em\",\n      wrappingElementClassName,\n      tooltipProps = {},\n      \"data-testid\": dataTestId\n    }: TextWithHighlightProps,\n    ref\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    const textWithHighlights = useMemo(() => {\n      if (!text || !highlightTerm || limit === 0) return text;\n      let finalTerm = escapeRegExp(highlightTerm);\n      if (allowTermSplit) {\n        finalTerm = finalTerm.split(\" \").join(\"|\");\n      }\n      const regex = new RegExp(`(${finalTerm})`, ignoreCase ? \"i\" : \"\");\n      const tokens = text.split(regex);\n      const parts = [];\n      // Tokens include the term search (in odd indices)\n      let highlightTermsCount = 0;\n      let key = 0;\n      for (let i = 0; i < tokens.length; i++) {\n        // skip empty tokens\n        if (tokens[i]) {\n          // adding highlight part\n          const isTermPart = i % 2 === 1;\n          const shouldHighlight = isTermPart && (!limit || limit < 0 || highlightTermsCount < limit);\n          parts.push(getTextPart(tokens[i], key++, shouldHighlight, wrappingTextTag, wrappingElementClassName));\n          if (isTermPart) highlightTermsCount++;\n        }\n      }\n\n      return parts;\n    }, [text, highlightTerm, limit, ignoreCase, allowTermSplit, wrappingTextTag, wrappingElementClassName]);\n\n    const isOverflowing = useIsOverflowing({ ref: useEllipsis && componentRef });\n\n    useIsomorphicLayoutEffect(() => {\n      if (componentRef.current) {\n        componentRef.current.style.setProperty(\"--heading-clamp-lines\", linesToClamp.toString());\n      }\n    }, [componentRef, linesToClamp, isOverflowing]);\n\n    const Element = (\n      <div\n        ref={mergedRef}\n        className={cx(styles.textWithHighlightWrapper, className, {\n          [styles.withEllipsis]: useEllipsis\n        })}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.TEXT_WITH_HIGHLIGHT, id)}\n      >\n        {textWithHighlights}\n      </div>\n    );\n\n    if (isOverflowing || nonEllipsisTooltip) {\n      const tooltipContent = isOverflowing ? text : nonEllipsisTooltip;\n      return (\n        <Tooltip content={tooltipContent} position={tooltipPosition} {...tooltipProps}>\n          {Element}\n        </Tooltip>\n      );\n    }\n    return Element;\n  }\n);\n\nexport default TextWithHighlight;\n\nfunction escapeRegExp(string: string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n"],"mappings":";;;;;;;;;AAWA,IAAMA,CAAA,GAAc,SAAAC,CAClBC,CAAA,EACAC,CAAA,EACAC,CAAA;IAKA,OAAIA,CAAA,GAEAC,CAAA,CAAAC,aAAA,CAN2CC,SAAA,CAAAC,MAAA,mBAAAD,SAAA,MAAAA,SAAA,YAM3B;MAACE,SAAA,EAAWC,CAAA,CAAGC,CAAA,CAAOC,aAAA,EALVL,SAAA,CAAAC,MAAA,OAAAD,SAAA;MAKoDM,GAAA,EAAKV;IAAA,GAClFD,CAAA,IAIAG,CAAA,CAAAC,aAAA;MAAMO,GAAA,EAAKV;IAAA,GAAMD,CAAA,CAC1B;EAAA;EAsDMY,CAAA,GAAsDC,CAAA,CAC1D,UAAAA,CAAA,EAkBED,CAAA;IACE,IAjBAE,CAAA,GAASD,CAAA,CAATN,SAAA;MACAQ,CAAA,GAAEF,CAAA,CAAFG,EAAA;MAAEC,CAAA,GAAAJ,CAAA,CACFK,IAAA;MAAAC,CAAA,QAAO,MAAHF,CAAA,GAAG,KAAEA,CAAA;MACTG,CAAA,GAAaP,CAAA,CAAbQ,aAAA;MACAC,CAAA,GAAKT,CAAA,CAALU,KAAA;MAAKC,CAAA,GAAAX,CAAA,CACLY,WAAA;MAAAC,CAAA,QAAc,MAAHF,CAAA,IAAOA,CAAA;MAAAG,CAAA,GAAAd,CAAA,CAClBe,YAAA;MAAAC,CAAA,QAAe,MAAHF,CAAA,GAAG,IAACA,CAAA;MAAAG,CAAA,GAAAjB,CAAA,CAChBkB,UAAA;MAAAC,CAAA,QAAa,MAAHF,CAAA,IAAOA,CAAA;MAAAG,CAAA,GAAApB,CAAA,CACjBqB,cAAA;MAAAC,CAAA,QAAiB,MAAHF,CAAA,IAAOA,CAAA;MACrBG,CAAA,GAAkBvB,CAAA,CAAlBwB,kBAAA;MACAC,CAAA,GAAezB,CAAA,CAAf0B,eAAA;MAAeC,CAAA,GAAA3B,CAAA,CACf4B,eAAA;MAAAC,CAAA,QAAkB,MAAHF,CAAA,GAAG,OAAIA,CAAA;MACtBG,CAAA,GAAwB9B,CAAA,CAAxB+B,wBAAA;MAAwBC,CAAA,GAAAhC,CAAA,CACxBiC,YAAA;MAAAC,CAAA,QAAY,MAAAF,CAAA,GAAG,CAAE,IAAAA,CAAA;MACFG,CAAA,GAAUnC,CAAA,CAAzB;MAIIoC,CAAA,GAAeC,CAAA,CAAO;MACtBC,CAAA,GAAYC,CAAA,CAAYxC,CAAA,EAAKqC,CAAA;MAE7BI,CAAA,GAAqBC,CAAA,CAAQ;QACjC,KAAKnC,CAAA,KAASC,CAAA,IAA2B,MAAVE,CAAA,EAAa,OAAOH,CAAA;QACnD,IAAInB,CAAA,GAAyBoB,CAAA,CA4DnBmC,OAAA,CAAQ,uBAAuB;QA3DrCpB,CAAA,KACFnC,CAAA,GAAYA,CAAA,CAAUwD,KAAA,CAAM,KAAKC,IAAA,CAAK;QAQxC,KANA,IAAMxD,CAAA,GAAYyD,MAAA,KAAMC,MAAA,CAAK3D,CAAA,EAAS,MAAKgC,CAAA,GAAa,MAAM,KACxD9B,CAAA,GAASiB,CAAA,CAAKqC,KAAA,CAAMvD,CAAA,GACpBO,CAAA,GAAQ,IAEVL,CAAA,GAAsB,GACtBU,CAAA,GAAM,GACDqC,CAAA,GAAI,GAAOhD,CAAA,CAAOI,MAAA,GAAX4C,CAAA,EAAmBA,CAAA,IAEjC,IAAIhD,CAAA,CAAOgD,CAAA,GAAI;UAEb,IAAMI,CAAA,GAAaJ,CAAA,GAAI,KAAM;UAE7B1C,CAAA,CAAMoD,IAAA,CAAK9D,CAAA,CAAYI,CAAA,CAAOgD,CAAA,GAAIrC,CAAA,IADVyC,CAAA,MAAgBhC,CAAA,IAAiB,IAARA,CAAA,IAAmCA,CAAA,GAAtBnB,CAAA,GACJuC,CAAA,EAAiBC,CAAA,IACvEW,CAAA,IAAYnD,CAAA,EACjB;QAAA;QAGH,OAAOK,CACT;MAAA,GAAG,CAACW,CAAA,EAAMC,CAAA,EAAeE,CAAA,EAAOU,CAAA,EAAYG,CAAA,EAAgBO,CAAA,EAAiBC,CAAA;MAEvEkB,CAAA,GAAgBC,CAAA,CAAiB;QAAEC,GAAA,EAAKrC,CAAA,IAAeuB;MAAA;IAE7De,CAAA,CAA0B;MACpBf,CAAA,CAAagB,OAAA,IACfhB,CAAA,CAAagB,OAAA,CAAQC,KAAA,CAAMC,WAAA,CAAY,yBAAyB,KAAAtC,CAAA,CAEnE;IAAA,GAAE,CAACoB,CAAA,EAAcpB,CAAA,EAAcgC,CAAA;IAEhC,IAAMO,CAAA,GACJjE,CAAA,CACEC,aAAA;MAAA2D,GAAA,EAAKZ,CAAA;MACL5C,SAAA,EAAWC,CAAA,CAAGC,CAAA,CAAO4D,wBAAA,EAA0BvD,CAAA,EAASd,CAAA,KACrDS,CAAA,CAAO6D,YAAA,EAAe5C,CAAA;MAEzBV,EAAA,EAAID,CAAA;MACS,eAAAiC,CAAA,IAAc/C,CAAA,CAAUC,CAAA,CAAuBqE,mBAAA,EAAqBxD,CAAA;IAAA,GAEhFsC,CAAA;IAIL,OAAIQ,CAAA,IAAiBzB,CAAA,GAGjBjC,CAAA,CAACC,aAAA,CAAAoE,CAAA,EAAQC,MAAA,CAAAC,MAAA;MAAAC,OAAA,EAFYd,CAAA,GAAgB1C,CAAA,GAAOiB,CAAA;MAEVwC,QAAA,EAAUtC;IAAA,GAAqBS,CAAA,GAC9DqB,CAAA,IAIAA,CACT;EAAA;AAAA,SAAAxD,CAAA,IAAAiE,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}