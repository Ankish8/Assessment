{"ast":null,"code":"import o, { forwardRef as e, useCallback as r } from \"react\";\nimport t from \"../../../../hooks/useGridKeyboardNavigation/useGridKeyboardNavigation.js\";\nimport n from \"../ColorPickerItemComponent/ColorPickerItemComponent.js\";\nimport i from \"./ColorPickerColorsGrid.module.scss.js\";\nvar c = function (o, e) {\n    return e && e[o] ? e[o] : function (o) {\n      return o.replace(/-|_/g, \" \").replace(/(?:^|\\s)\\S/g, function (o) {\n        return o.toUpperCase();\n      });\n    }(o);\n  },\n  l = e(function (e, l) {\n    var a = e.onColorClicked,\n      d = e.colorsToRender,\n      u = e.numberOfColorsInLine,\n      s = e.focusOnMount,\n      m = e.value,\n      C = e.colorStyle,\n      I = e.ColorIndicatorIcon,\n      f = e.shouldRenderIndicatorWithoutBackground,\n      p = e.SelectedIndicatorIcon,\n      S = e.colorSize,\n      y = e.tooltipContentByColor,\n      g = e.colorShape,\n      k = e.showColorNameTooltip,\n      h = e.id,\n      v = e[\"data-testid\"],\n      b = r(function (o) {\n        return d[o];\n      }, [d]),\n      x = t({\n        focusOnMount: s,\n        ref: l,\n        onItemClicked: a,\n        itemsCount: d.length,\n        numberOfItemsInLine: u,\n        entryFocusStrategy: \"first\",\n        getItemByIndex: b\n      }),\n      A = x.activeIndex,\n      B = x.onSelectionAction;\n    return o.createElement(\"ul\", {\n      className: i.colorsGrid,\n      ref: l,\n      tabIndex: 0,\n      id: h,\n      \"data-testid\": v,\n      role: \"grid\"\n    }, d.map(function (e, r) {\n      return o.createElement(n, {\n        key: e,\n        color: e,\n        onColorClicked: function () {\n          return B(r);\n        },\n        shouldRenderIndicatorWithoutBackground: I && f,\n        colorStyle: C,\n        ColorIndicatorIcon: I,\n        SelectedIndicatorIcon: p,\n        isSelected: Array.isArray(m) ? m.includes(e) : m === e,\n        isActive: r === A,\n        colorSize: S,\n        tooltipContent: k ? c(e, y) : void 0,\n        colorShape: g\n      });\n    }));\n  });\nexport { l as default };","map":{"version":3,"names":["c","calculateColorTooltip","o","e","replace","toUpperCase","l","a","onColorClicked","d","colorsToRender","u","numberOfColorsInLine","s","focusOnMount","m","value","C","colorStyle","I","ColorIndicatorIcon","f","shouldRenderIndicatorWithoutBackground","p","SelectedIndicatorIcon","S","colorSize","y","tooltipContentByColor","g","colorShape","k","showColorNameTooltip","h","id","v","b","r","x","t","ref","onItemClicked","itemsCount","length","numberOfItemsInLine","entryFocusStrategy","getItemByIndex","A","activeIndex","B","onSelectionAction","createElement","className","i","colorsGrid","tabIndex","role","map","n","key","color","isSelected","Array","isArray","includes","isActive","tooltipContent","default"],"sources":["/Users/ankish/Downloads/MA/MAPIT/untitledUi/node_modules/@vibe/core/src/components/ColorPicker/components/ColorPickerContent/ColorPickerColorsGrid.tsx"],"sourcesContent":["import React, { forwardRef, useCallback } from \"react\";\nimport useGridKeyboardNavigation from \"../../../../hooks/useGridKeyboardNavigation/useGridKeyboardNavigation\";\nimport ColorPickerItemComponent from \"../ColorPickerItemComponent/ColorPickerItemComponent\";\nimport { CONTENT_COLORS_VALUES } from \"../../../../utils/colors-vars-map\";\nimport { ColorPickerArrayValueOnly, ColorPickerValueOnly } from \"../../ColorPicker.types\";\nimport { ColorShapes, ColorPickerSizes } from \"../../ColorPicker.types\";\nimport { SubIcon, VibeComponentProps } from \"../../../../types\";\nimport styles from \"./ColorPickerColorsGrid.module.scss\";\nimport { ColorStyle } from \"../../../../types\";\n\nconst formatColorNameForTooltip = (color: ColorPickerValueOnly) => {\n  return color.replace(/-|_/g, \" \").replace(/(?:^|\\s)\\S/g, function (a) {\n    return a.toUpperCase();\n  });\n};\n\nconst calculateColorTooltip = (\n  color: ColorPickerValueOnly,\n  tooltipContentByColor?: Partial<Record<CONTENT_COLORS_VALUES, string> & Record<string, string>>\n) => {\n  if (tooltipContentByColor && tooltipContentByColor[color]) {\n    return tooltipContentByColor[color];\n  } else {\n    return formatColorNameForTooltip(color);\n  }\n};\n\nexport interface ColorPickerColorsGridProps extends VibeComponentProps {\n  /**\n   * Callback fired when a color is clicked.\n   */\n  onColorClicked?: (color: ColorPickerValueOnly) => void;\n  /**\n   * The list of colors to be displayed.\n   */\n  colorsToRender?: ColorPickerArrayValueOnly;\n  /**\n   * Icon displayed as an indicator inside the color.\n   */\n  ColorIndicatorIcon?: SubIcon;\n  /**\n   * Icon displayed when a color is selected.\n   */\n  SelectedIndicatorIcon?: SubIcon;\n  /**\n   * The style applied to the colors.\n   */\n  colorStyle?: ColorStyle;\n  /**\n   * The currently selected color or colors.\n   */\n  value?: string | string[];\n  /**\n   * If true, renders the color indicator without a background.\n   */\n  shouldRenderIndicatorWithoutBackground?: boolean;\n  /**\n   * The size of the color items.\n   */\n  colorSize?: ColorPickerSizes;\n  /**\n   * The number of colors per row.\n   */\n  numberOfColorsInLine?: number;\n  /**\n   * Custom tooltip content for specific colors.\n   */\n  tooltipContentByColor?: Partial<Record<CONTENT_COLORS_VALUES, string> & Record<string, string>>;\n  /**\n   * If true, the first color is focused when the component mounts.\n   */\n  focusOnMount?: boolean;\n  /**\n   * The shape of the color items.\n   */\n  colorShape?: ColorShapes;\n  /**\n   * If true, displays a tooltip with the color name.\n   */\n  showColorNameTooltip?: boolean;\n}\n\nconst ColorPickerColorsGrid = forwardRef(\n  (\n    {\n      onColorClicked,\n      colorsToRender,\n      numberOfColorsInLine,\n      focusOnMount,\n      value,\n      colorStyle,\n      ColorIndicatorIcon,\n      shouldRenderIndicatorWithoutBackground,\n      SelectedIndicatorIcon,\n      colorSize,\n      tooltipContentByColor,\n      colorShape,\n      showColorNameTooltip: showColorNameTooltip,\n      id,\n      \"data-testid\": dataTestId\n    }: ColorPickerColorsGridProps,\n    ref: React.ForwardedRef<HTMLUListElement>\n  ) => {\n    const getItemByIndex = useCallback((index: number) => colorsToRender[index], [colorsToRender]);\n\n    const { activeIndex, onSelectionAction } = useGridKeyboardNavigation({\n      focusOnMount,\n      ref: ref as React.MutableRefObject<HTMLUListElement>,\n      onItemClicked: onColorClicked,\n      itemsCount: colorsToRender.length,\n      numberOfItemsInLine: numberOfColorsInLine,\n      entryFocusStrategy: \"first\",\n      getItemByIndex\n    });\n\n    return (\n      <ul className={styles.colorsGrid} ref={ref} tabIndex={0} id={id} data-testid={dataTestId} role=\"grid\">\n        {colorsToRender.map((color, index) => {\n          return (\n            <ColorPickerItemComponent\n              key={color}\n              color={color}\n              onColorClicked={() => onSelectionAction(index)}\n              shouldRenderIndicatorWithoutBackground={ColorIndicatorIcon && shouldRenderIndicatorWithoutBackground}\n              colorStyle={colorStyle}\n              ColorIndicatorIcon={ColorIndicatorIcon}\n              SelectedIndicatorIcon={SelectedIndicatorIcon}\n              isSelected={Array.isArray(value) ? value.includes(color) : value === color}\n              isActive={index === activeIndex}\n              colorSize={colorSize}\n              tooltipContent={showColorNameTooltip ? calculateColorTooltip(color, tooltipContentByColor) : undefined}\n              colorShape={colorShape}\n            />\n          );\n        })}\n      </ul>\n    );\n  }\n);\n\nexport default ColorPickerColorsGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}