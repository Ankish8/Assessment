{"ast":null,"code":"import { defineProperty as e, toConsumableArray as r } from \"../../../../_virtual/_rollupPluginBabelHelpers.js\";\nimport a, { forwardRef as t, useMemo as s } from \"react\";\nimport l from \"classnames\";\nimport { SIZES as o } from \"../../../constants/sizes.js\";\nimport { getStyle as i } from \"../../../helpers/typesciptCssModulesHelper.js\";\nimport n from \"../PercentageLabel/PercentageLabel.js\";\nimport { ProgressBarStyle as m, ProgressBarType as c } from \"./LinearProgressBarConstants.js\";\nimport { calculatePercentage as d, getProgressBarClassNames as u } from \"./LinearProgressBarHelpers.js\";\nimport p from \"./Bar/Bar.js\";\nimport { withStaticProps as v } from \"../../../types/withStaticProps.js\";\nimport \"../../../utils/colors-vars-map.js\";\nimport { ComponentDefaultTestId as f } from \"../../../tests/constants.js\";\nimport { getTestId as y } from \"../../../tests/testIds.js\";\nimport b from \"./LinearProgressBar.module.scss.js\";\nvar j = v(t(function (t, o) {\n  var m = t.min,\n    c = void 0 === m ? 0 : m,\n    v = t.max,\n    j = void 0 === v ? 100 : v,\n    E = t.value,\n    g = void 0 === E ? 0 : E,\n    P = t.valueSecondary,\n    S = void 0 === P ? 0 : P,\n    _ = t.animated,\n    B = void 0 === _ || _,\n    N = t.barStyle,\n    R = void 0 === N ? \"primary\" : N,\n    L = t.className,\n    A = t.size,\n    h = void 0 === A ? \"small\" : A,\n    x = t.indicateProgress,\n    C = void 0 !== x && x,\n    z = t.multi,\n    H = void 0 !== z && z,\n    I = t.multiValues,\n    w = void 0 === I ? [] : I,\n    F = t.ariaLabel,\n    M = void 0 === F ? \"\" : F,\n    O = t.id,\n    W = t.fullWidth,\n    Y = void 0 !== W && W,\n    k = t[\"data-testid\"],\n    D = s(function () {\n      return l(b.wrapper, e(e({}, i(b, \"\" + h), h), b.fullWidth, Y), L);\n    }, [h, Y, L]),\n    G = s(function () {\n      if (H) {\n        var e = w && w.length && w[0].value;\n        return null == e ? 0 : d(e, c, j);\n      }\n      return null == g ? 0 : d(g, c, j);\n    }, [g, c, j, H, w]),\n    T = s(function () {\n      return H ? a.createElement(a.Fragment, null, r(w).reverse().map(function (e, r) {\n        var t = e.value,\n          s = e.color;\n        return a.createElement(p, {\n          className: u(t),\n          barStyle: \"none\",\n          value: t,\n          animated: B,\n          type: \"primary\",\n          color: s,\n          min: c,\n          max: j,\n          id: \"bar_\".concat(s, \"_\").concat(r),\n          key: \"bar_\".concat(s, \"_\").concat(r)\n        });\n      })) : null;\n    }, [c, j, B, w, H]),\n    V = C ? a.createElement(n, {\n      forElement: \"linear-progress-bar\",\n      value: G\n    }) : null,\n    q = H ? null : a.createElement(a.Fragment, null, a.createElement(p, {\n      className: u(g),\n      barLabelName: M,\n      barStyle: R,\n      value: S,\n      animated: B,\n      type: \"secondary\",\n      min: c,\n      max: j,\n      \"data-testid\": f.BAR_SECONDARY\n    }), a.createElement(p, {\n      className: u(g),\n      barStyle: R,\n      value: g,\n      animated: B,\n      type: \"primary\",\n      min: c,\n      max: j,\n      \"data-testid\": f.BAR_PRIMARY\n    }));\n  return a.createElement(\"div\", {\n    className: D,\n    ref: o,\n    id: O,\n    \"data-testsid\": k || y(f.LINEAR_PROGRESS_BAR, O)\n  }, a.createElement(\"div\", {\n    className: b.container\n  }, q, T), V);\n}), {\n  styles: m,\n  barStyles: m,\n  types: c,\n  barTypes: c,\n  sizes: o\n});\nexport { j as default };","map":{"version":3,"names":["j","v","t","o","m","min","c","max","E","value","g","P","valueSecondary","S","_","animated","B","N","barStyle","R","L","className","A","size","h","x","indicateProgress","C","z","multi","H","I","multiValues","w","F","ariaLabel","M","O","id","W","fullWidth","Y","k","D","s","l","b","wrapper","e","i","G","length","d","T","a","createElement","Fragment","r","reverse","map","color","p","u","type","concat","key","V","n","forElement","q","barLabelName","f","BAR_SECONDARY","BAR_PRIMARY","ref","y","LINEAR_PROGRESS_BAR","container","styles","barStyles","types","barTypes","sizes","default"],"sources":["/Users/ankish/Downloads/MA/MAPIT/untitledUi/node_modules/@vibe/core/src/components/ProgressBars/LinearProgressBar/LinearProgressBar.tsx"],"sourcesContent":["import React, { forwardRef, useMemo } from \"react\";\nimport cx from \"classnames\";\nimport { SIZES } from \"../../../constants\";\nimport { getStyle } from \"../../../helpers/typesciptCssModulesHelper\";\nimport PercentageLabel from \"../PercentageLabel/PercentageLabel\";\nimport {\n  ProgressBarStyle as ProgressBarStyleEnum,\n  ProgressBarType as ProgressBarTypeEnum\n} from \"./LinearProgressBarConstants\";\nimport { LinearProgressBarSize, LinearProgressBarStyle } from \"./LinearProgressBar.types\";\nimport { calculatePercentage, getProgressBarClassNames } from \"./LinearProgressBarHelpers\";\nimport Bar from \"./Bar/Bar\";\nimport { VibeComponentProps, withStaticProps } from \"../../../types\";\nimport { ComponentDefaultTestId } from \"../../../tests/constants\";\nimport { getTestId } from \"../../../tests/test-ids-utils\";\nimport styles from \"./LinearProgressBar.module.scss\";\n\nexport interface LinearProgressBarProps extends VibeComponentProps {\n  /**\n   * Determines the visual style of the progress bar.\n   */\n  barStyle?: LinearProgressBarStyle;\n  /**\n   * The minimum value of the progress bar.\n   */\n  min?: number;\n  /**\n   * The maximum value of the progress bar.\n   */\n  max?: number;\n  /**\n   * The current progress value.\n   */\n  value?: number;\n  /**\n   * The secondary progress value.\n   */\n  valueSecondary?: number;\n  /**\n   * If true, enables animation effects.\n   */\n  animated?: boolean;\n  /**\n   * The size of the progress bar.\n   */\n  size?: LinearProgressBarSize;\n  /**\n   * If true, displays the progress percentage.\n   */\n  indicateProgress?: boolean;\n  /**\n   * If true, enables multiple progress bars.\n   * **Note:** `value`, `valueSecondary`, and `barStyle` will not be used.\n   */\n  multi?: boolean;\n  /**\n   * An array of bar values and colors for multi-bar mode.\n   */\n  multiValues?: {\n    /**\n     * The progress value for a bar.\n     */\n    value?: number;\n    /**\n     * The bar color in hex format (`#000000` - `#ffffff`).\n     */\n    color?: string;\n  }[];\n  /**\n   * The ARIA label for the progress bar.\n   */\n  ariaLabel?: string;\n  /**\n   * If true, makes the progress bar span the full container width.\n   */\n  fullWidth?: boolean;\n}\n\nconst LinearProgressBar = forwardRef(\n  (\n    {\n      min = 0,\n      max = 100,\n      value = 0,\n      valueSecondary = 0,\n      animated = true,\n      barStyle = \"primary\",\n      className,\n      size = \"small\",\n      indicateProgress = false,\n      multi = false,\n      multiValues = [],\n      ariaLabel = \"\",\n      id,\n      fullWidth = false,\n      \"data-testid\": dataTestId\n    }: LinearProgressBarProps,\n    ref: React.ForwardedRef<HTMLDivElement>\n  ) => {\n    const wrapperClassName = useMemo(() => {\n      return cx(\n        styles.wrapper,\n        {\n          [getStyle(styles, size.toString())]: size,\n          [styles.fullWidth]: fullWidth\n        },\n        className\n      );\n    }, [size, fullWidth, className]);\n\n    const valuePercentage = useMemo(() => {\n      if (multi) {\n        const firstValue = multiValues && multiValues.length && multiValues[0].value;\n        if (firstValue === null || firstValue === undefined) return 0;\n        return calculatePercentage(firstValue, min, max);\n      }\n      if (value === null || value === undefined) return 0;\n      return calculatePercentage(value, min, max);\n    }, [value, min, max, multi, multiValues]);\n\n    const renderMultiBars = useMemo(() => {\n      if (!multi) return null;\n      return (\n        <>\n          {[...multiValues].reverse().map(({ value: baseValue, color }, i) => (\n            <Bar\n              className={getProgressBarClassNames(baseValue)}\n              barStyle=\"none\"\n              value={baseValue}\n              animated={animated}\n              type=\"primary\"\n              color={color}\n              min={min}\n              max={max}\n              id={`bar_${color}_${i}`}\n              key={`bar_${color}_${i}`}\n            />\n          ))}\n        </>\n      );\n    }, [min, max, animated, multiValues, multi]);\n\n    const renderPercentage = indicateProgress ? (\n      <PercentageLabel forElement=\"linear-progress-bar\" value={valuePercentage} />\n    ) : null;\n\n    const renderBaseBars = !multi ? (\n      <>\n        <Bar\n          className={getProgressBarClassNames(value)}\n          barLabelName={ariaLabel}\n          barStyle={barStyle}\n          value={valueSecondary}\n          animated={animated}\n          type=\"secondary\"\n          min={min}\n          max={max}\n          data-testid={ComponentDefaultTestId.BAR_SECONDARY}\n        />\n        <Bar\n          className={getProgressBarClassNames(value)}\n          barStyle={barStyle}\n          value={value}\n          animated={animated}\n          type=\"primary\"\n          min={min}\n          max={max}\n          data-testid={ComponentDefaultTestId.BAR_PRIMARY}\n        />\n      </>\n    ) : null;\n\n    return (\n      <div\n        className={wrapperClassName}\n        ref={ref}\n        id={id}\n        data-testsid={dataTestId || getTestId(ComponentDefaultTestId.LINEAR_PROGRESS_BAR, id)}\n      >\n        <div className={styles.container}>\n          {renderBaseBars}\n          {renderMultiBars}\n        </div>\n        {renderPercentage}\n      </div>\n    );\n  }\n);\n\ninterface LinearProgressBarStaticProps {\n  styles: typeof ProgressBarStyleEnum;\n  barStyles: typeof ProgressBarStyleEnum;\n  types: typeof ProgressBarTypeEnum;\n  barTypes: typeof ProgressBarTypeEnum;\n  sizes: typeof SIZES;\n}\n\nexport default withStaticProps<LinearProgressBarProps, LinearProgressBarStaticProps>(LinearProgressBar, {\n  styles: ProgressBarStyleEnum,\n  barStyles: ProgressBarStyleEnum,\n  types: ProgressBarTypeEnum,\n  barTypes: ProgressBarTypeEnum,\n  sizes: SIZES\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}