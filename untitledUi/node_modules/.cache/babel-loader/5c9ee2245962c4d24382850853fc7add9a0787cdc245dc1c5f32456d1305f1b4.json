{"ast":null,"code":"import e, { useCallback as r } from \"react\";\nimport t from \"react-inlinesvg\";\nimport o from \"../../../hooks/useIconScreenReaderAccessProps.js\";\nimport { ComponentDefaultTestId as s, ComponentVibeId as a } from \"../../../tests/constants.js\";\nimport { getTestId as i } from \"../../../tests/testIds.js\";\nimport { useIsMounted as n } from \"../../../hooks/ssr/useIsMounted.js\";\nfunction c(e) {\n  return e.replace(/fill=\".*?\"/g, 'fill=\"'.concat(arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"currentColor\", '\"'));\n}\nvar l = function (l) {\n  var d = l.className,\n    m = l.ref,\n    f = l.src,\n    u = l.onClick,\n    p = l.replaceToCurrentColor,\n    C = void 0 !== p && p,\n    v = l.customColor,\n    b = l.id,\n    k = l[\"data-testid\"],\n    g = o({\n      isClickable: l.clickable,\n      label: l.ariaLabel,\n      isDecorationOnly: l.ariaHidden\n    }),\n    j = n(),\n    I = r(function (e) {\n      return C ? c(e, \"currentColor\") : v ? c(e, v) : e;\n    }, [C, v]);\n  if (\"string\" != typeof f) return null;\n  var N = t.default || t,\n    O = e.createElement(\"div\", {\n      className: d,\n      id: b\n    });\n  return j ? e.createElement(N, Object.assign({\n    innerRef: m\n  }, g, {\n    onClick: u,\n    loader: O,\n    src: f,\n    className: d,\n    preProcessor: I,\n    id: b,\n    \"data-testid\": k || i(s.SVG_ICON, b),\n    \"data-vibe\": a.ICON\n  }), O) : O;\n};\nexport { l as default };","map":{"version":3,"names":["c","e","replace","concat","arguments","length","l","CustomSvgIcon","d","className","m","ref","f","src","u","onClick","p","replaceToCurrentColor","C","v","customColor","b","id","k","g","o","isClickable","clickable","label","ariaLabel","isDecorationOnly","ariaHidden","j","n","I","r","N","t","default","O","createElement","Object","assign","innerRef","loader","preProcessor","i","s","SVG_ICON","a","ICON"],"sources":["/Users/ankish/Downloads/MA/MAPIT/untitledUi/node_modules/@vibe/core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx"],"sourcesContent":["import React, { FunctionComponent, useCallback, AriaRole, Ref } from \"react\";\nimport SVG from \"react-inlinesvg\";\nimport useIconScreenReaderAccessProps from \"../../../hooks/useIconScreenReaderAccessProps\";\nimport VibeComponentProps from \"../../../types/VibeComponentProps\";\nimport { ComponentDefaultTestId, ComponentVibeId } from \"../../../tests/constants\";\nimport { getTestId } from \"../../../tests/test-ids-utils\";\nimport { useIsMounted } from \"../../../hooks/ssr/useIsMounted\";\n\nfunction modifySvgCode(svg: string, color = \"currentColor\") {\n  return svg.replace(/fill=\".*?\"/g, `fill=\"${color}\"`);\n}\n\nexport interface CustomSvgIconProps extends VibeComponentProps {\n  /**\n   * Callback fired when the icon is clicked.\n   */\n  onClick?: (event: React.MouseEvent) => void;\n  /**\n   * The source URL or object of the SVG icon.\n   */\n  src: string | object;\n  /**\n   * The accessible label for the icon.\n   */\n  ariaLabel?: string;\n  /**\n   * The tab index of the icon for keyboard navigation.\n   */\n  tabIndex?: number;\n  /**\n   * The ARIA role of the icon.\n   */\n  role?: AriaRole;\n  /**\n   * If true, hides the icon from screen readers.\n   */\n  ariaHidden?: boolean;\n  /**\n   * If true, makes the icon clickable.\n   */\n  clickable?: boolean;\n  /**\n   * If true, replaces the `fill` attribute in the SVG with `currentColor`.\n   */\n  replaceToCurrentColor?: boolean;\n  /**\n   * Overrides the default color of the icon.\n   */\n  customColor?: string;\n  /**\n   * Reference to the SVG element.\n   */\n  ref?: Ref<SVGElement>;\n}\n\nconst CustomSvgIcon: FunctionComponent<CustomSvgIconProps> = ({\n  className,\n  ref,\n  src,\n  onClick,\n  clickable,\n  ariaLabel,\n  ariaHidden,\n  replaceToCurrentColor = false,\n  customColor,\n  id,\n  \"data-testid\": dataTestId\n}) => {\n  const screenReaderAccessProps = useIconScreenReaderAccessProps({\n    isClickable: clickable,\n    label: ariaLabel,\n    isDecorationOnly: ariaHidden\n  });\n\n  const isMounted = useIsMounted();\n\n  const svgProcessor = useCallback(\n    (svg: string) => {\n      if (replaceToCurrentColor) return modifySvgCode(svg, \"currentColor\");\n      if (customColor) return modifySvgCode(svg, customColor);\n      return svg;\n    },\n    [replaceToCurrentColor, customColor]\n  );\n\n  if (typeof src !== \"string\") return null;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const SVGComponent = (SVG.default || SVG) as React.FC<any>; // fix esm issue\n\n  const PlaceHolder = <div className={className} id={id}></div>;\n\n  if (!isMounted) {\n    // placeholder for server side rendering\n    return PlaceHolder;\n  }\n  return (\n    <SVGComponent\n      innerRef={ref}\n      {...screenReaderAccessProps}\n      onClick={onClick}\n      loader={PlaceHolder} // avoid flickering\n      src={src}\n      className={className}\n      preProcessor={svgProcessor}\n      id={id}\n      data-testid={dataTestId || getTestId(ComponentDefaultTestId.SVG_ICON, id)}\n      data-vibe={ComponentVibeId.ICON}\n    >\n      {PlaceHolder}\n    </SVGComponent>\n  );\n};\n\nexport default CustomSvgIcon;\n"],"mappings":";;;;;;AAQA,SAASA,EAAcC,CAAA;EACrB,OAAOA,CAAA,CAAIC,OAAA,CAAQ,wBAAaC,MAAA,CADOC,SAAA,CAAAC,MAAA,mBAAAD,SAAA,MAAAA,SAAA,MAAG,gBACM,KAClD;AAAA;AA6CA,IAAME,CAAA,GAAuD,SAAAC,CAA1CD,CAAA;EAYd,IAXHE,CAAA,GAASF,CAAA,CAATG,SAAA;IACAC,CAAA,GAAGJ,CAAA,CAAHK,GAAA;IACAC,CAAA,GAAGN,CAAA,CAAHO,GAAA;IACAC,CAAA,GAAOR,CAAA,CAAPS,OAAA;IAGUC,CAAA,GAAAV,CAAA,CACVW,qBAAA;IAAAC,CAAA,QAAwB,MAAHF,CAAA,IAAQA,CAAA;IAC7BG,CAAA,GAAWb,CAAA,CAAXc,WAAA;IACAC,CAAA,GAAEf,CAAA,CAAFgB,EAAA;IACeC,CAAA,GAAUjB,CAAA,CAAzB;IAEMkB,CAAA,GAA0BC,CAAA,CAA+B;MAC7DC,WAAA,EATOpB,CAAA,CAATqB,SAAA;MAUEC,KAAA,EATOtB,CAAA,CAATuB,SAAA;MAUEC,gBAAA,EATQxB,CAAA,CAAVyB;IAAA;IAYMC,CAAA,GAAYC,CAAA;IAEZC,CAAA,GAAeC,CAAA,CACnB,UAAClC,CAAA;MACC,OAAIiB,CAAA,GAA8BlB,CAAA,CAAcC,CAAA,EAAK,kBACjDkB,CAAA,GAAoBnB,CAAA,CAAcC,CAAA,EAAKkB,CAAA,IACpClB,CACT;IAAA,GACA,CAACiB,CAAA,EAAuBC,CAAA;EAG1B,IAAmB,mBAARP,CAAA,EAAkB,OAAO;EAGpC,IAAMwB,CAAA,GAAgBC,CAAA,CAAIC,OAAA,IAAWD,CAAA;IAE/BE,CAAA,GAActC,CAAA,CAAAuC,aAAA;MAAK/B,SAAA,EAAWD,CAAA;MAAWc,EAAA,EAAID;IAAA;EAEnD,OAAKW,CAAA,GAKH/B,CAAA,CAACuC,aAAA,CAAAJ,CAAA,EACCK,MAAA,CAAAC,MAAA;IAAAC,QAAA,EAAUjC;EAAA,GACNc,CAAA,EAAuB;IAC3BT,OAAA,EAASD,CAAA;IACT8B,MAAA,EAAQL,CAAA;IACR1B,GAAA,EAAKD,CAAA;IACLH,SAAA,EAAWD,CAAA;IACXqC,YAAA,EAAcX,CAAA;IACdZ,EAAA,EAAID,CAAA;IAAA,eACSE,CAAA,IAAcuB,CAAA,CAAUC,CAAA,CAAuBC,QAAA,EAAU3B,CAAA;IAAG,aAC9D4B,CAAA,CAAgBC;EAAA,IAE1BX,CAAA,IAfIA,CAkBX;AAAA;AAAA,SAAAjC,CAAA,IAAAgC,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}