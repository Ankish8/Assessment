{"ast":null,"code":"import e, { forwardRef as r } from \"react\";\nimport t from \"./Clickable.js\";\nvar a = r(function (r, a) {\n  var l = r.children,\n    i = r.isClickable,\n    c = r.clickableProps;\n  return void 0 === i || i ? e.createElement(t, Object.assign({}, void 0 === c ? {} : c, {\n    ref: a\n  }), l) : e.createElement(e.Fragment, null, l);\n});\nexport { a as default };","map":{"version":3,"names":["a","r","l","children","i","isClickable","c","clickableProps","e","createElement","t","Object","assign","ref","Fragment","default"],"sources":["/Users/ankish/Downloads/MA/MAPIT/untitledUi/node_modules/@vibe/core/src/components/Clickable/ClickableWrapper.tsx"],"sourcesContent":["import React, { forwardRef } from \"react\";\nimport Clickable from \"./Clickable\";\nimport { VibeComponentProps } from \"../../types\";\nimport { ClickableProps } from \"./Clickable\";\n\nexport interface ClickableWrapperProps extends VibeComponentProps {\n  /**\n   * The content inside the wrapper.\n   */\n  children: React.ReactNode;\n  /**\n   * If true, wraps the content in a `Clickable` component.\n   */\n  isClickable: boolean;\n  /**\n   * Props passed to the `Clickable` component.\n   */\n  clickableProps: ClickableProps;\n}\n\nconst ClickableWrapper = forwardRef(\n  (\n    { children, isClickable = true, clickableProps = {} }: ClickableWrapperProps,\n    ref: React.ForwardedRef<HTMLElement>\n  ) => {\n    if (!isClickable) {\n      return <>{children}</>;\n    }\n\n    return (\n      <Clickable {...clickableProps} ref={ref}>\n        {children}\n      </Clickable>\n    );\n  }\n);\n\nexport default ClickableWrapper;\n"],"mappings":";;AAoBM,IAAAA,CAAA,GAAmBC,CAAA,CACvB,UAAAA,CAAA,EAEED,CAAA;EACE,IAFAE,CAAA,GAAQD,CAAA,CAARE,QAAA;IAAQC,CAAA,GAAAH,CAAA,CAAEI,WAAA;IAAkBC,CAAA,GAAAL,CAAA,CAAEM,cAAA;EAGhC,YAH0B,MAAHH,CAAA,IAAOA,CAAA,GAQ5BI,CAAA,CAAAC,aAAA,CAACC,CAAA,EAASC,MAAA,CAAAC,MAAA,UARkC,MAAAN,CAAA,GAAG,KAAEA,CAAA,EAQpB;IAAEO,GAAA,EAAKb;EAAA,IACjCE,CAAA,IALIM,CAAA,CAAAC,aAAA,CAAAD,CAAA,CAAAM,QAAA,QAAGZ,CAAA,CAQd;AAAA;AAAA,SAAAF,CAAA,IAAAe,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}