{
    "pipes": [],
    "interfaces": [
        {
            "name": "FormComponentEvents",
            "id": "interface-FormComponentEvents-3bced1c992c5f8750475b30adc44e20e30b78887b6f22f461199cdf12b9855b7f804b10bf77ef3cc2a99423969f51e7c97d5fea205a066f71b3c2baa468e2b5b",
            "file": "src/app/components/form/form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { \n  Component, \n  Input, \n  Output, \n  EventEmitter, \n  ChangeDetectionStrategy, \n  ViewEncapsulation,\n  OnInit,\n  OnDestroy,\n  TemplateRef,\n  ContentChildren,\n  QueryList,\n  AfterContentInit\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { \n  FormGroup, \n  FormBuilder, \n  ReactiveFormsModule,\n  AbstractControl,\n  ValidationErrors\n} from '@angular/forms';\nimport { Subject, takeUntil } from 'rxjs';\n\nexport type FormLayout = 'single' | 'two-column' | 'grid' | 'inline';\nexport type FormSize = 'sm' | 'base' | 'lg';\nexport type SubmitState = 'idle' | 'loading' | 'success' | 'error';\nexport type FormValidationMode = 'onSubmit' | 'onChange' | 'onBlur';\n\nexport interface FormSection {\n  id: string;\n  title?: string;\n  description?: string;\n  fields: string[];\n  collapsible?: boolean;\n  collapsed?: boolean;\n}\n\nexport interface FormComponentProps {\n  // Layout Properties\n  layout: FormLayout;\n  size: FormSize;\n  sections: FormSection[];\n  \n  // Form State\n  formGroup?: FormGroup;\n  submitState: SubmitState;\n  validationMode: FormValidationMode;\n  \n  // Form Configuration\n  noValidate: boolean;\n  autoComplete: boolean;\n  showRequiredIndicator: boolean;\n  \n  // Submit Configuration\n  submitText: string;\n  cancelText: string;\n  showCancel: boolean;\n  submitDisabled: boolean;\n  \n  // Styling\n  className?: string;\n  formClassName?: string;\n  sectionClassName?: string;\n  \n  // Accessibility\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n}\n\nexport interface FormComponentEvents {\n  onSubmit: EventEmitter<FormGroup>;\n  onCancel: EventEmitter<void>;\n  onValidationChange: EventEmitter<{ valid: boolean; errors: ValidationErrors | null }>;\n  onSectionToggle: EventEmitter<{ sectionId: string; collapsed: boolean }>;\n  onFieldChange: EventEmitter<{ fieldName: string; value: any; valid: boolean }>;\n}\n\n@Component({\n  selector: 'app-form',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class FormComponent implements OnInit, OnDestroy, AfterContentInit {\n  // Layout Properties\n  @Input() layout: FormLayout = 'single';\n  @Input() size: FormSize = 'base';\n  @Input() sections: FormSection[] = [];\n  \n  // Form State\n  @Input() formGroup?: FormGroup;\n  @Input() submitState: SubmitState = 'idle';\n  @Input() validationMode: FormValidationMode = 'onSubmit';\n  \n  // Form Configuration\n  @Input() noValidate: boolean = false;\n  @Input() autoComplete: boolean = true;\n  @Input() showRequiredIndicator: boolean = true;\n  \n  // Submit Configuration\n  @Input() submitText: string = 'Submit';\n  @Input() cancelText: string = 'Cancel';\n  @Input() showCancel: boolean = false;\n  @Input() submitDisabled: boolean = false;\n  \n  // Styling\n  @Input() className?: string;\n  @Input() formClassName?: string;\n  @Input() sectionClassName?: string;\n  \n  // Accessibility\n  @Input() ariaLabel?: string;\n  @Input() ariaDescribedBy?: string;\n\n  // Output Events\n  @Output() onSubmit = new EventEmitter<FormGroup>();\n  @Output() onCancel = new EventEmitter<void>();\n  @Output() onValidationChange = new EventEmitter<{ valid: boolean; errors: ValidationErrors | null }>();\n  @Output() onSectionToggle = new EventEmitter<{ sectionId: string; collapsed: boolean }>();\n  @Output() onFieldChange = new EventEmitter<{ fieldName: string; value: any; valid: boolean }>();\n\n  // Internal properties\n  private destroy$ = new Subject<void>();\n  private _uniqueId: string = '';\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    // Generate unique ID\n    this._uniqueId = `form-${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Initialize form if not provided\n    if (!this.formGroup) {\n      this.formGroup = this.fb.group({});\n    }\n\n    // Setup form validation monitoring\n    this.setupFormValidation();\n  }\n\n  ngAfterContentInit() {\n    // Additional setup after content initialization\n    this.updateFormValidation();\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  // Getters for computed properties\n  get formId(): string {\n    return this._uniqueId;\n  }\n\n  get formClasses(): string {\n    return [\n      'form',\n      `layout-${this.layout}`,\n      `size-${this.size}`,\n      `submit-${this.submitState}`,\n      this.formGroup?.invalid && this.formGroup?.touched ? 'form-invalid' : '',\n      this.className\n    ].filter(Boolean).join(' ');\n  }\n\n  get containerClasses(): string {\n    return [\n      'form-container',\n      this.formClassName\n    ].filter(Boolean).join(' ');\n  }\n\n  get isSubmitting(): boolean {\n    return this.submitState === 'loading';\n  }\n\n  get hasErrors(): boolean {\n    return this.submitState === 'error';\n  }\n\n  get isSuccess(): boolean {\n    return this.submitState === 'success';\n  }\n\n  get isSubmitDisabled(): boolean {\n    return this.submitDisabled || \n           this.isSubmitting || \n           (this.formGroup?.invalid === true && this.validationMode === 'onChange');\n  }\n\n  get gridColumns(): number {\n    if (this.layout === 'grid') {\n      return this.size === 'sm' ? 1 : this.size === 'base' ? 2 : 3;\n    }\n    return this.layout === 'two-column' ? 2 : 1;\n  }\n\n  // Section Management\n  getSectionClasses(section: FormSection): string {\n    return [\n      'form-section',\n      section.collapsible ? 'collapsible' : '',\n      section.collapsed ? 'collapsed' : '',\n      this.sectionClassName\n    ].filter(Boolean).join(' ');\n  }\n\n  toggleSection(section: FormSection): void {\n    if (section.collapsible) {\n      section.collapsed = !section.collapsed;\n      this.onSectionToggle.emit({\n        sectionId: section.id,\n        collapsed: section.collapsed\n      });\n    }\n  }\n\n  // Form Validation Setup\n  private setupFormValidation(): void {\n    if (!this.formGroup) return;\n\n    // Monitor form value changes\n    this.formGroup.valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((value) => {\n        this.updateFormValidation();\n        \n        // Emit field changes\n        Object.keys(value).forEach(key => {\n          const control = this.formGroup?.get(key);\n          if (control) {\n            this.onFieldChange.emit({\n              fieldName: key,\n              value: control.value,\n              valid: control.valid\n            });\n          }\n        });\n      });\n\n    // Monitor form status changes\n    this.formGroup.statusChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.updateFormValidation();\n      });\n  }\n\n  private updateFormValidation(): void {\n    if (!this.formGroup) return;\n\n    const isValid = this.formGroup.valid;\n    const errors = this.formGroup.errors;\n\n    this.onValidationChange.emit({\n      valid: isValid,\n      errors: errors\n    });\n  }\n\n  // Event Handlers\n  onFormSubmit(event: Event): void {\n    event.preventDefault();\n    \n    if (!this.formGroup || this.isSubmitDisabled) {\n      return;\n    }\n\n    // Mark all fields as touched to show validation errors\n    this.markAllFieldsAsTouched();\n\n    if (this.formGroup.valid) {\n      this.onSubmit.emit(this.formGroup);\n    }\n  }\n\n  onFormCancel(): void {\n    this.onCancel.emit();\n  }\n\n  // Utility Methods\n  private markAllFieldsAsTouched(): void {\n    if (!this.formGroup) return;\n\n    Object.keys(this.formGroup.controls).forEach(key => {\n      const control = this.formGroup?.get(key);\n      if (control) {\n        control.markAsTouched();\n        \n        // Handle nested form groups\n        if (control instanceof FormGroup) {\n          this.markFormGroupTouched(control);\n        }\n      }\n    });\n  }\n\n  private markFormGroupTouched(formGroup: FormGroup): void {\n    Object.keys(formGroup.controls).forEach(key => {\n      const control = formGroup.get(key);\n      if (control) {\n        control.markAsTouched();\n        \n        if (control instanceof FormGroup) {\n          this.markFormGroupTouched(control);\n        }\n      }\n    });\n  }\n\n  // Public API Methods\n  resetForm(): void {\n    if (this.formGroup) {\n      this.formGroup.reset();\n    }\n  }\n\n  validateForm(): boolean {\n    if (!this.formGroup) return false;\n    \n    this.markAllFieldsAsTouched();\n    return this.formGroup.valid;\n  }\n\n  getFieldError(fieldName: string): string | null {\n    const control = this.formGroup?.get(fieldName);\n    if (!control || !control.errors || !control.touched) {\n      return null;\n    }\n\n    // Return first error message\n    const errors = control.errors;\n    if (errors['required']) return 'This field is required';\n    if (errors['email']) return 'Please enter a valid email address';\n    if (errors['minlength']) return `Minimum length is ${errors['minlength'].requiredLength}`;\n    if (errors['maxlength']) return `Maximum length is ${errors['maxlength'].requiredLength}`;\n    if (errors['pattern']) return 'Please enter a valid format';\n    \n    return 'Invalid value';\n  }\n\n  setFieldValue(fieldName: string, value: any): void {\n    const control = this.formGroup?.get(fieldName);\n    if (control) {\n      control.setValue(value);\n    }\n  }\n\n  setFieldError(fieldName: string, error: ValidationErrors | null): void {\n    const control = this.formGroup?.get(fieldName);\n    if (control) {\n      control.setErrors(error);\n    }\n  }\n\n  focusFirstInvalidField(): void {\n    if (!this.formGroup) return;\n\n    const firstInvalidControl = Object.keys(this.formGroup.controls)\n      .find(key => {\n        const control = this.formGroup?.get(key);\n        return control && control.invalid && control.touched;\n      });\n\n    if (firstInvalidControl) {\n      const element = document.querySelector(`[formControlName=\"${firstInvalidControl}\"]`) as HTMLElement;\n      if (element && element.focus) {\n        element.focus();\n      }\n    }\n  }\n}",
            "properties": [
                {
                    "name": "onCancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<void>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "onFieldChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<literal type>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "onSectionToggle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<literal type>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "onSubmit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<FormGroup>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "onValidationChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<literal type>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FormComponentProps",
            "id": "interface-FormComponentProps-3bced1c992c5f8750475b30adc44e20e30b78887b6f22f461199cdf12b9855b7f804b10bf77ef3cc2a99423969f51e7c97d5fea205a066f71b3c2baa468e2b5b",
            "file": "src/app/components/form/form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { \n  Component, \n  Input, \n  Output, \n  EventEmitter, \n  ChangeDetectionStrategy, \n  ViewEncapsulation,\n  OnInit,\n  OnDestroy,\n  TemplateRef,\n  ContentChildren,\n  QueryList,\n  AfterContentInit\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { \n  FormGroup, \n  FormBuilder, \n  ReactiveFormsModule,\n  AbstractControl,\n  ValidationErrors\n} from '@angular/forms';\nimport { Subject, takeUntil } from 'rxjs';\n\nexport type FormLayout = 'single' | 'two-column' | 'grid' | 'inline';\nexport type FormSize = 'sm' | 'base' | 'lg';\nexport type SubmitState = 'idle' | 'loading' | 'success' | 'error';\nexport type FormValidationMode = 'onSubmit' | 'onChange' | 'onBlur';\n\nexport interface FormSection {\n  id: string;\n  title?: string;\n  description?: string;\n  fields: string[];\n  collapsible?: boolean;\n  collapsed?: boolean;\n}\n\nexport interface FormComponentProps {\n  // Layout Properties\n  layout: FormLayout;\n  size: FormSize;\n  sections: FormSection[];\n  \n  // Form State\n  formGroup?: FormGroup;\n  submitState: SubmitState;\n  validationMode: FormValidationMode;\n  \n  // Form Configuration\n  noValidate: boolean;\n  autoComplete: boolean;\n  showRequiredIndicator: boolean;\n  \n  // Submit Configuration\n  submitText: string;\n  cancelText: string;\n  showCancel: boolean;\n  submitDisabled: boolean;\n  \n  // Styling\n  className?: string;\n  formClassName?: string;\n  sectionClassName?: string;\n  \n  // Accessibility\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n}\n\nexport interface FormComponentEvents {\n  onSubmit: EventEmitter<FormGroup>;\n  onCancel: EventEmitter<void>;\n  onValidationChange: EventEmitter<{ valid: boolean; errors: ValidationErrors | null }>;\n  onSectionToggle: EventEmitter<{ sectionId: string; collapsed: boolean }>;\n  onFieldChange: EventEmitter<{ fieldName: string; value: any; valid: boolean }>;\n}\n\n@Component({\n  selector: 'app-form',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class FormComponent implements OnInit, OnDestroy, AfterContentInit {\n  // Layout Properties\n  @Input() layout: FormLayout = 'single';\n  @Input() size: FormSize = 'base';\n  @Input() sections: FormSection[] = [];\n  \n  // Form State\n  @Input() formGroup?: FormGroup;\n  @Input() submitState: SubmitState = 'idle';\n  @Input() validationMode: FormValidationMode = 'onSubmit';\n  \n  // Form Configuration\n  @Input() noValidate: boolean = false;\n  @Input() autoComplete: boolean = true;\n  @Input() showRequiredIndicator: boolean = true;\n  \n  // Submit Configuration\n  @Input() submitText: string = 'Submit';\n  @Input() cancelText: string = 'Cancel';\n  @Input() showCancel: boolean = false;\n  @Input() submitDisabled: boolean = false;\n  \n  // Styling\n  @Input() className?: string;\n  @Input() formClassName?: string;\n  @Input() sectionClassName?: string;\n  \n  // Accessibility\n  @Input() ariaLabel?: string;\n  @Input() ariaDescribedBy?: string;\n\n  // Output Events\n  @Output() onSubmit = new EventEmitter<FormGroup>();\n  @Output() onCancel = new EventEmitter<void>();\n  @Output() onValidationChange = new EventEmitter<{ valid: boolean; errors: ValidationErrors | null }>();\n  @Output() onSectionToggle = new EventEmitter<{ sectionId: string; collapsed: boolean }>();\n  @Output() onFieldChange = new EventEmitter<{ fieldName: string; value: any; valid: boolean }>();\n\n  // Internal properties\n  private destroy$ = new Subject<void>();\n  private _uniqueId: string = '';\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    // Generate unique ID\n    this._uniqueId = `form-${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Initialize form if not provided\n    if (!this.formGroup) {\n      this.formGroup = this.fb.group({});\n    }\n\n    // Setup form validation monitoring\n    this.setupFormValidation();\n  }\n\n  ngAfterContentInit() {\n    // Additional setup after content initialization\n    this.updateFormValidation();\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  // Getters for computed properties\n  get formId(): string {\n    return this._uniqueId;\n  }\n\n  get formClasses(): string {\n    return [\n      'form',\n      `layout-${this.layout}`,\n      `size-${this.size}`,\n      `submit-${this.submitState}`,\n      this.formGroup?.invalid && this.formGroup?.touched ? 'form-invalid' : '',\n      this.className\n    ].filter(Boolean).join(' ');\n  }\n\n  get containerClasses(): string {\n    return [\n      'form-container',\n      this.formClassName\n    ].filter(Boolean).join(' ');\n  }\n\n  get isSubmitting(): boolean {\n    return this.submitState === 'loading';\n  }\n\n  get hasErrors(): boolean {\n    return this.submitState === 'error';\n  }\n\n  get isSuccess(): boolean {\n    return this.submitState === 'success';\n  }\n\n  get isSubmitDisabled(): boolean {\n    return this.submitDisabled || \n           this.isSubmitting || \n           (this.formGroup?.invalid === true && this.validationMode === 'onChange');\n  }\n\n  get gridColumns(): number {\n    if (this.layout === 'grid') {\n      return this.size === 'sm' ? 1 : this.size === 'base' ? 2 : 3;\n    }\n    return this.layout === 'two-column' ? 2 : 1;\n  }\n\n  // Section Management\n  getSectionClasses(section: FormSection): string {\n    return [\n      'form-section',\n      section.collapsible ? 'collapsible' : '',\n      section.collapsed ? 'collapsed' : '',\n      this.sectionClassName\n    ].filter(Boolean).join(' ');\n  }\n\n  toggleSection(section: FormSection): void {\n    if (section.collapsible) {\n      section.collapsed = !section.collapsed;\n      this.onSectionToggle.emit({\n        sectionId: section.id,\n        collapsed: section.collapsed\n      });\n    }\n  }\n\n  // Form Validation Setup\n  private setupFormValidation(): void {\n    if (!this.formGroup) return;\n\n    // Monitor form value changes\n    this.formGroup.valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((value) => {\n        this.updateFormValidation();\n        \n        // Emit field changes\n        Object.keys(value).forEach(key => {\n          const control = this.formGroup?.get(key);\n          if (control) {\n            this.onFieldChange.emit({\n              fieldName: key,\n              value: control.value,\n              valid: control.valid\n            });\n          }\n        });\n      });\n\n    // Monitor form status changes\n    this.formGroup.statusChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.updateFormValidation();\n      });\n  }\n\n  private updateFormValidation(): void {\n    if (!this.formGroup) return;\n\n    const isValid = this.formGroup.valid;\n    const errors = this.formGroup.errors;\n\n    this.onValidationChange.emit({\n      valid: isValid,\n      errors: errors\n    });\n  }\n\n  // Event Handlers\n  onFormSubmit(event: Event): void {\n    event.preventDefault();\n    \n    if (!this.formGroup || this.isSubmitDisabled) {\n      return;\n    }\n\n    // Mark all fields as touched to show validation errors\n    this.markAllFieldsAsTouched();\n\n    if (this.formGroup.valid) {\n      this.onSubmit.emit(this.formGroup);\n    }\n  }\n\n  onFormCancel(): void {\n    this.onCancel.emit();\n  }\n\n  // Utility Methods\n  private markAllFieldsAsTouched(): void {\n    if (!this.formGroup) return;\n\n    Object.keys(this.formGroup.controls).forEach(key => {\n      const control = this.formGroup?.get(key);\n      if (control) {\n        control.markAsTouched();\n        \n        // Handle nested form groups\n        if (control instanceof FormGroup) {\n          this.markFormGroupTouched(control);\n        }\n      }\n    });\n  }\n\n  private markFormGroupTouched(formGroup: FormGroup): void {\n    Object.keys(formGroup.controls).forEach(key => {\n      const control = formGroup.get(key);\n      if (control) {\n        control.markAsTouched();\n        \n        if (control instanceof FormGroup) {\n          this.markFormGroupTouched(control);\n        }\n      }\n    });\n  }\n\n  // Public API Methods\n  resetForm(): void {\n    if (this.formGroup) {\n      this.formGroup.reset();\n    }\n  }\n\n  validateForm(): boolean {\n    if (!this.formGroup) return false;\n    \n    this.markAllFieldsAsTouched();\n    return this.formGroup.valid;\n  }\n\n  getFieldError(fieldName: string): string | null {\n    const control = this.formGroup?.get(fieldName);\n    if (!control || !control.errors || !control.touched) {\n      return null;\n    }\n\n    // Return first error message\n    const errors = control.errors;\n    if (errors['required']) return 'This field is required';\n    if (errors['email']) return 'Please enter a valid email address';\n    if (errors['minlength']) return `Minimum length is ${errors['minlength'].requiredLength}`;\n    if (errors['maxlength']) return `Maximum length is ${errors['maxlength'].requiredLength}`;\n    if (errors['pattern']) return 'Please enter a valid format';\n    \n    return 'Invalid value';\n  }\n\n  setFieldValue(fieldName: string, value: any): void {\n    const control = this.formGroup?.get(fieldName);\n    if (control) {\n      control.setValue(value);\n    }\n  }\n\n  setFieldError(fieldName: string, error: ValidationErrors | null): void {\n    const control = this.formGroup?.get(fieldName);\n    if (control) {\n      control.setErrors(error);\n    }\n  }\n\n  focusFirstInvalidField(): void {\n    if (!this.formGroup) return;\n\n    const firstInvalidControl = Object.keys(this.formGroup.controls)\n      .find(key => {\n        const control = this.formGroup?.get(key);\n        return control && control.invalid && control.touched;\n      });\n\n    if (firstInvalidControl) {\n      const element = document.querySelector(`[formControlName=\"${firstInvalidControl}\"]`) as HTMLElement;\n      if (element && element.focus) {\n        element.focus();\n      }\n    }\n  }\n}",
            "properties": [
                {
                    "name": "ariaDescribedBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "autoComplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "cancelText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "formClassName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "layout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormLayout",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "noValidate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "sectionClassName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "sections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormSection[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "showCancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "showRequiredIndicator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormSize",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "submitDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "submitState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubmitState",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "submitText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "validationMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormValidationMode",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FormSection",
            "id": "interface-FormSection-3bced1c992c5f8750475b30adc44e20e30b78887b6f22f461199cdf12b9855b7f804b10bf77ef3cc2a99423969f51e7c97d5fea205a066f71b3c2baa468e2b5b",
            "file": "src/app/components/form/form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { \n  Component, \n  Input, \n  Output, \n  EventEmitter, \n  ChangeDetectionStrategy, \n  ViewEncapsulation,\n  OnInit,\n  OnDestroy,\n  TemplateRef,\n  ContentChildren,\n  QueryList,\n  AfterContentInit\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { \n  FormGroup, \n  FormBuilder, \n  ReactiveFormsModule,\n  AbstractControl,\n  ValidationErrors\n} from '@angular/forms';\nimport { Subject, takeUntil } from 'rxjs';\n\nexport type FormLayout = 'single' | 'two-column' | 'grid' | 'inline';\nexport type FormSize = 'sm' | 'base' | 'lg';\nexport type SubmitState = 'idle' | 'loading' | 'success' | 'error';\nexport type FormValidationMode = 'onSubmit' | 'onChange' | 'onBlur';\n\nexport interface FormSection {\n  id: string;\n  title?: string;\n  description?: string;\n  fields: string[];\n  collapsible?: boolean;\n  collapsed?: boolean;\n}\n\nexport interface FormComponentProps {\n  // Layout Properties\n  layout: FormLayout;\n  size: FormSize;\n  sections: FormSection[];\n  \n  // Form State\n  formGroup?: FormGroup;\n  submitState: SubmitState;\n  validationMode: FormValidationMode;\n  \n  // Form Configuration\n  noValidate: boolean;\n  autoComplete: boolean;\n  showRequiredIndicator: boolean;\n  \n  // Submit Configuration\n  submitText: string;\n  cancelText: string;\n  showCancel: boolean;\n  submitDisabled: boolean;\n  \n  // Styling\n  className?: string;\n  formClassName?: string;\n  sectionClassName?: string;\n  \n  // Accessibility\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n}\n\nexport interface FormComponentEvents {\n  onSubmit: EventEmitter<FormGroup>;\n  onCancel: EventEmitter<void>;\n  onValidationChange: EventEmitter<{ valid: boolean; errors: ValidationErrors | null }>;\n  onSectionToggle: EventEmitter<{ sectionId: string; collapsed: boolean }>;\n  onFieldChange: EventEmitter<{ fieldName: string; value: any; valid: boolean }>;\n}\n\n@Component({\n  selector: 'app-form',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class FormComponent implements OnInit, OnDestroy, AfterContentInit {\n  // Layout Properties\n  @Input() layout: FormLayout = 'single';\n  @Input() size: FormSize = 'base';\n  @Input() sections: FormSection[] = [];\n  \n  // Form State\n  @Input() formGroup?: FormGroup;\n  @Input() submitState: SubmitState = 'idle';\n  @Input() validationMode: FormValidationMode = 'onSubmit';\n  \n  // Form Configuration\n  @Input() noValidate: boolean = false;\n  @Input() autoComplete: boolean = true;\n  @Input() showRequiredIndicator: boolean = true;\n  \n  // Submit Configuration\n  @Input() submitText: string = 'Submit';\n  @Input() cancelText: string = 'Cancel';\n  @Input() showCancel: boolean = false;\n  @Input() submitDisabled: boolean = false;\n  \n  // Styling\n  @Input() className?: string;\n  @Input() formClassName?: string;\n  @Input() sectionClassName?: string;\n  \n  // Accessibility\n  @Input() ariaLabel?: string;\n  @Input() ariaDescribedBy?: string;\n\n  // Output Events\n  @Output() onSubmit = new EventEmitter<FormGroup>();\n  @Output() onCancel = new EventEmitter<void>();\n  @Output() onValidationChange = new EventEmitter<{ valid: boolean; errors: ValidationErrors | null }>();\n  @Output() onSectionToggle = new EventEmitter<{ sectionId: string; collapsed: boolean }>();\n  @Output() onFieldChange = new EventEmitter<{ fieldName: string; value: any; valid: boolean }>();\n\n  // Internal properties\n  private destroy$ = new Subject<void>();\n  private _uniqueId: string = '';\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    // Generate unique ID\n    this._uniqueId = `form-${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Initialize form if not provided\n    if (!this.formGroup) {\n      this.formGroup = this.fb.group({});\n    }\n\n    // Setup form validation monitoring\n    this.setupFormValidation();\n  }\n\n  ngAfterContentInit() {\n    // Additional setup after content initialization\n    this.updateFormValidation();\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  // Getters for computed properties\n  get formId(): string {\n    return this._uniqueId;\n  }\n\n  get formClasses(): string {\n    return [\n      'form',\n      `layout-${this.layout}`,\n      `size-${this.size}`,\n      `submit-${this.submitState}`,\n      this.formGroup?.invalid && this.formGroup?.touched ? 'form-invalid' : '',\n      this.className\n    ].filter(Boolean).join(' ');\n  }\n\n  get containerClasses(): string {\n    return [\n      'form-container',\n      this.formClassName\n    ].filter(Boolean).join(' ');\n  }\n\n  get isSubmitting(): boolean {\n    return this.submitState === 'loading';\n  }\n\n  get hasErrors(): boolean {\n    return this.submitState === 'error';\n  }\n\n  get isSuccess(): boolean {\n    return this.submitState === 'success';\n  }\n\n  get isSubmitDisabled(): boolean {\n    return this.submitDisabled || \n           this.isSubmitting || \n           (this.formGroup?.invalid === true && this.validationMode === 'onChange');\n  }\n\n  get gridColumns(): number {\n    if (this.layout === 'grid') {\n      return this.size === 'sm' ? 1 : this.size === 'base' ? 2 : 3;\n    }\n    return this.layout === 'two-column' ? 2 : 1;\n  }\n\n  // Section Management\n  getSectionClasses(section: FormSection): string {\n    return [\n      'form-section',\n      section.collapsible ? 'collapsible' : '',\n      section.collapsed ? 'collapsed' : '',\n      this.sectionClassName\n    ].filter(Boolean).join(' ');\n  }\n\n  toggleSection(section: FormSection): void {\n    if (section.collapsible) {\n      section.collapsed = !section.collapsed;\n      this.onSectionToggle.emit({\n        sectionId: section.id,\n        collapsed: section.collapsed\n      });\n    }\n  }\n\n  // Form Validation Setup\n  private setupFormValidation(): void {\n    if (!this.formGroup) return;\n\n    // Monitor form value changes\n    this.formGroup.valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((value) => {\n        this.updateFormValidation();\n        \n        // Emit field changes\n        Object.keys(value).forEach(key => {\n          const control = this.formGroup?.get(key);\n          if (control) {\n            this.onFieldChange.emit({\n              fieldName: key,\n              value: control.value,\n              valid: control.valid\n            });\n          }\n        });\n      });\n\n    // Monitor form status changes\n    this.formGroup.statusChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.updateFormValidation();\n      });\n  }\n\n  private updateFormValidation(): void {\n    if (!this.formGroup) return;\n\n    const isValid = this.formGroup.valid;\n    const errors = this.formGroup.errors;\n\n    this.onValidationChange.emit({\n      valid: isValid,\n      errors: errors\n    });\n  }\n\n  // Event Handlers\n  onFormSubmit(event: Event): void {\n    event.preventDefault();\n    \n    if (!this.formGroup || this.isSubmitDisabled) {\n      return;\n    }\n\n    // Mark all fields as touched to show validation errors\n    this.markAllFieldsAsTouched();\n\n    if (this.formGroup.valid) {\n      this.onSubmit.emit(this.formGroup);\n    }\n  }\n\n  onFormCancel(): void {\n    this.onCancel.emit();\n  }\n\n  // Utility Methods\n  private markAllFieldsAsTouched(): void {\n    if (!this.formGroup) return;\n\n    Object.keys(this.formGroup.controls).forEach(key => {\n      const control = this.formGroup?.get(key);\n      if (control) {\n        control.markAsTouched();\n        \n        // Handle nested form groups\n        if (control instanceof FormGroup) {\n          this.markFormGroupTouched(control);\n        }\n      }\n    });\n  }\n\n  private markFormGroupTouched(formGroup: FormGroup): void {\n    Object.keys(formGroup.controls).forEach(key => {\n      const control = formGroup.get(key);\n      if (control) {\n        control.markAsTouched();\n        \n        if (control instanceof FormGroup) {\n          this.markFormGroupTouched(control);\n        }\n      }\n    });\n  }\n\n  // Public API Methods\n  resetForm(): void {\n    if (this.formGroup) {\n      this.formGroup.reset();\n    }\n  }\n\n  validateForm(): boolean {\n    if (!this.formGroup) return false;\n    \n    this.markAllFieldsAsTouched();\n    return this.formGroup.valid;\n  }\n\n  getFieldError(fieldName: string): string | null {\n    const control = this.formGroup?.get(fieldName);\n    if (!control || !control.errors || !control.touched) {\n      return null;\n    }\n\n    // Return first error message\n    const errors = control.errors;\n    if (errors['required']) return 'This field is required';\n    if (errors['email']) return 'Please enter a valid email address';\n    if (errors['minlength']) return `Minimum length is ${errors['minlength'].requiredLength}`;\n    if (errors['maxlength']) return `Maximum length is ${errors['maxlength'].requiredLength}`;\n    if (errors['pattern']) return 'Please enter a valid format';\n    \n    return 'Invalid value';\n  }\n\n  setFieldValue(fieldName: string, value: any): void {\n    const control = this.formGroup?.get(fieldName);\n    if (control) {\n      control.setValue(value);\n    }\n  }\n\n  setFieldError(fieldName: string, error: ValidationErrors | null): void {\n    const control = this.formGroup?.get(fieldName);\n    if (control) {\n      control.setErrors(error);\n    }\n  }\n\n  focusFirstInvalidField(): void {\n    if (!this.formGroup) return;\n\n    const firstInvalidControl = Object.keys(this.formGroup.controls)\n      .find(key => {\n        const control = this.formGroup?.get(key);\n        return control && control.invalid && control.touched;\n      });\n\n    if (firstInvalidControl) {\n      const element = document.querySelector(`[formControlName=\"${firstInvalidControl}\"]`) as HTMLElement;\n      if (element && element.focus) {\n        element.focus();\n      }\n    }\n  }\n}",
            "properties": [
                {
                    "name": "collapsed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "collapsible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "InputComponentEvents",
            "id": "interface-InputComponentEvents-c1aae40ad667090ce1eb760e895b9cf2c48631121a7e6d324f69bfef0b0a7830ea56ac3e81b68ca3dcdab3cec5fa43eadbf87106ba7432c3efd89661010fac9a",
            "file": "src/app/components/input/input.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { \n  Component, \n  Input, \n  Output, \n  EventEmitter, \n  ChangeDetectionStrategy, \n  ViewEncapsulation,\n  forwardRef,\n  ViewChild,\n  ElementRef,\n  TemplateRef,\n  OnInit,\n  OnDestroy,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport type InputType = 'text' | 'email' | 'password' | 'number' | 'search' | 'tel' | 'url';\nexport type InputSize = 'sm' | 'base' | 'lg';\nexport type InputVariant = 'default' | 'filled' | 'ghost';\nexport type InputState = 'default' | 'error' | 'success';\n\nexport interface InputComponentProps {\n  // Basic Properties\n  type: InputType;\n  placeholder?: string;\n  value?: string;\n  disabled: boolean;\n  required: boolean;\n  id?: string;\n  \n  // Styling Properties\n  size: InputSize;\n  variant: InputVariant;\n  state: InputState;\n  \n  // Label and Help Text\n  label?: string;\n  helperText?: string;\n  errorMessage?: string;\n  \n  // Icons\n  startIcon?: TemplateRef<any> | string;\n  endIcon?: TemplateRef<any> | string;\n  \n  // CSS Classes\n  className?: string;\n  containerClassName?: string;\n}\n\nexport interface InputComponentEvents {\n  valueChange: EventEmitter<string>;\n  blurEvent: EventEmitter<FocusEvent>;\n  focusEvent: EventEmitter<FocusEvent>;\n  inputEvent: EventEmitter<Event>;\n  keyupEvent: EventEmitter<KeyboardEvent>;\n  keydownEvent: EventEmitter<KeyboardEvent>;\n}\n\n@Component({\n  selector: 'app-input',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputComponent),\n      multi: true\n    }\n  ]\n})\nexport class InputComponent implements ControlValueAccessor, OnInit, OnDestroy {\n  // Basic Properties\n  @Input() type: InputType = 'text';\n  @Input() placeholder?: string;\n  @Input() value?: string;\n  @Input() disabled: boolean = false;\n  @Input() required: boolean = false;\n  @Input() id?: string;\n  \n  // Styling Properties\n  @Input() size: InputSize = 'base';\n  @Input() variant: InputVariant = 'default';\n  @Input() state: InputState = 'default';\n  \n  // Label and Help Text\n  @Input() label?: string;\n  @Input() helperText?: string;\n  @Input() errorMessage?: string;\n  \n  // Icons\n  @Input() startIcon?: TemplateRef<any> | string;\n  @Input() endIcon?: TemplateRef<any> | string;\n  \n  // CSS Classes\n  @Input() className?: string;\n  @Input() containerClassName?: string;\n\n  // Output Events\n  @Output() valueChange = new EventEmitter<string>();\n  @Output() blurEvent = new EventEmitter<FocusEvent>();\n  @Output() focusEvent = new EventEmitter<FocusEvent>();\n  @Output() inputEvent = new EventEmitter<Event>();\n  @Output() keyupEvent = new EventEmitter<KeyboardEvent>();\n  @Output() keydownEvent = new EventEmitter<KeyboardEvent>();\n\n  @ViewChild('inputElement', { static: false }) inputElement!: ElementRef<HTMLInputElement>;\n\n  // Internal properties\n  private _value: string = '';\n  private _uniqueId: string = '';\n  private _helpTextId: string = '';\n\n  // ControlValueAccessor implementation\n  private onChange = (value: string) => {};\n  private onTouched = () => {};\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    // Generate unique ID if not provided\n    this._uniqueId = this.id || `input-${Math.random().toString(36).substr(2, 9)}`;\n    this._helpTextId = `${this._uniqueId}-help`;\n  }\n\n  ngOnDestroy() {\n    // Cleanup if needed\n  }\n\n  // Getters for computed properties\n  get inputId(): string {\n    return this._uniqueId;\n  }\n\n  get helpTextId(): string {\n    return this._helpTextId;\n  }\n\n  get hasError(): boolean {\n    return this.state === 'error' || !!this.errorMessage;\n  }\n\n  get hasSuccess(): boolean {\n    return this.state === 'success';\n  }\n\n  get hasStartIcon(): boolean {\n    return !!this.startIcon;\n  }\n\n  get hasEndIcon(): boolean {\n    return !!this.endIcon;\n  }\n\n  get inputClasses(): string {\n    return [\n      'input',\n      this.size,\n      this.variant,\n      this.state,\n      this.hasStartIcon && 'hasStartIcon',\n      this.hasEndIcon && 'hasEndIcon',\n      this.disabled && 'disabled',\n      this.hasError && 'error',\n      this.hasSuccess && 'success',\n      this.className\n    ].filter(Boolean).join(' ');\n  }\n\n  get containerClasses(): string {\n    return [\n      'container',\n      this.containerClassName\n    ].filter(Boolean).join(' ');\n  }\n\n  // Template helper methods\n  isTemplate(icon: TemplateRef<any> | string | undefined): boolean {\n    return icon instanceof TemplateRef;\n  }\n\n  isString(icon: TemplateRef<any> | string | undefined): boolean {\n    return typeof icon === 'string';\n  }\n\n  // Event handlers\n  onInput(event: Event): void {\n    const target = event.target as HTMLInputElement;\n    const value = target.value;\n    \n    this._value = value;\n    this.onChange(value);\n    this.valueChange.emit(value);\n    this.inputEvent.emit(event);\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focusEvent.emit(event);\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.onTouched();\n    this.blurEvent.emit(event);\n  }\n\n  onKeyUp(event: KeyboardEvent): void {\n    this.keyupEvent.emit(event);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    this.keydownEvent.emit(event);\n  }\n\n  // ControlValueAccessor implementation\n  writeValue(value: any): void {\n    this._value = value || '';\n    this.value = this._value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: (value: string) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.cdr.markForCheck();\n  }\n\n  // Public methods for external access\n  focusInput(): void {\n    if (this.inputElement) {\n      this.inputElement.nativeElement.focus();\n    }\n  }\n\n  blurInput(): void {\n    if (this.inputElement) {\n      this.inputElement.nativeElement.blur();\n    }\n  }\n\n  selectText(): void {\n    if (this.inputElement) {\n      this.inputElement.nativeElement.select();\n    }\n  }\n}",
            "properties": [
                {
                    "name": "blurEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<FocusEvent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "focusEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<FocusEvent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "inputEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<Event>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "keydownEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<KeyboardEvent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "keyupEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<KeyboardEvent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "valueChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "InputComponentProps",
            "id": "interface-InputComponentProps-c1aae40ad667090ce1eb760e895b9cf2c48631121a7e6d324f69bfef0b0a7830ea56ac3e81b68ca3dcdab3cec5fa43eadbf87106ba7432c3efd89661010fac9a",
            "file": "src/app/components/input/input.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { \n  Component, \n  Input, \n  Output, \n  EventEmitter, \n  ChangeDetectionStrategy, \n  ViewEncapsulation,\n  forwardRef,\n  ViewChild,\n  ElementRef,\n  TemplateRef,\n  OnInit,\n  OnDestroy,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport type InputType = 'text' | 'email' | 'password' | 'number' | 'search' | 'tel' | 'url';\nexport type InputSize = 'sm' | 'base' | 'lg';\nexport type InputVariant = 'default' | 'filled' | 'ghost';\nexport type InputState = 'default' | 'error' | 'success';\n\nexport interface InputComponentProps {\n  // Basic Properties\n  type: InputType;\n  placeholder?: string;\n  value?: string;\n  disabled: boolean;\n  required: boolean;\n  id?: string;\n  \n  // Styling Properties\n  size: InputSize;\n  variant: InputVariant;\n  state: InputState;\n  \n  // Label and Help Text\n  label?: string;\n  helperText?: string;\n  errorMessage?: string;\n  \n  // Icons\n  startIcon?: TemplateRef<any> | string;\n  endIcon?: TemplateRef<any> | string;\n  \n  // CSS Classes\n  className?: string;\n  containerClassName?: string;\n}\n\nexport interface InputComponentEvents {\n  valueChange: EventEmitter<string>;\n  blurEvent: EventEmitter<FocusEvent>;\n  focusEvent: EventEmitter<FocusEvent>;\n  inputEvent: EventEmitter<Event>;\n  keyupEvent: EventEmitter<KeyboardEvent>;\n  keydownEvent: EventEmitter<KeyboardEvent>;\n}\n\n@Component({\n  selector: 'app-input',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputComponent),\n      multi: true\n    }\n  ]\n})\nexport class InputComponent implements ControlValueAccessor, OnInit, OnDestroy {\n  // Basic Properties\n  @Input() type: InputType = 'text';\n  @Input() placeholder?: string;\n  @Input() value?: string;\n  @Input() disabled: boolean = false;\n  @Input() required: boolean = false;\n  @Input() id?: string;\n  \n  // Styling Properties\n  @Input() size: InputSize = 'base';\n  @Input() variant: InputVariant = 'default';\n  @Input() state: InputState = 'default';\n  \n  // Label and Help Text\n  @Input() label?: string;\n  @Input() helperText?: string;\n  @Input() errorMessage?: string;\n  \n  // Icons\n  @Input() startIcon?: TemplateRef<any> | string;\n  @Input() endIcon?: TemplateRef<any> | string;\n  \n  // CSS Classes\n  @Input() className?: string;\n  @Input() containerClassName?: string;\n\n  // Output Events\n  @Output() valueChange = new EventEmitter<string>();\n  @Output() blurEvent = new EventEmitter<FocusEvent>();\n  @Output() focusEvent = new EventEmitter<FocusEvent>();\n  @Output() inputEvent = new EventEmitter<Event>();\n  @Output() keyupEvent = new EventEmitter<KeyboardEvent>();\n  @Output() keydownEvent = new EventEmitter<KeyboardEvent>();\n\n  @ViewChild('inputElement', { static: false }) inputElement!: ElementRef<HTMLInputElement>;\n\n  // Internal properties\n  private _value: string = '';\n  private _uniqueId: string = '';\n  private _helpTextId: string = '';\n\n  // ControlValueAccessor implementation\n  private onChange = (value: string) => {};\n  private onTouched = () => {};\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    // Generate unique ID if not provided\n    this._uniqueId = this.id || `input-${Math.random().toString(36).substr(2, 9)}`;\n    this._helpTextId = `${this._uniqueId}-help`;\n  }\n\n  ngOnDestroy() {\n    // Cleanup if needed\n  }\n\n  // Getters for computed properties\n  get inputId(): string {\n    return this._uniqueId;\n  }\n\n  get helpTextId(): string {\n    return this._helpTextId;\n  }\n\n  get hasError(): boolean {\n    return this.state === 'error' || !!this.errorMessage;\n  }\n\n  get hasSuccess(): boolean {\n    return this.state === 'success';\n  }\n\n  get hasStartIcon(): boolean {\n    return !!this.startIcon;\n  }\n\n  get hasEndIcon(): boolean {\n    return !!this.endIcon;\n  }\n\n  get inputClasses(): string {\n    return [\n      'input',\n      this.size,\n      this.variant,\n      this.state,\n      this.hasStartIcon && 'hasStartIcon',\n      this.hasEndIcon && 'hasEndIcon',\n      this.disabled && 'disabled',\n      this.hasError && 'error',\n      this.hasSuccess && 'success',\n      this.className\n    ].filter(Boolean).join(' ');\n  }\n\n  get containerClasses(): string {\n    return [\n      'container',\n      this.containerClassName\n    ].filter(Boolean).join(' ');\n  }\n\n  // Template helper methods\n  isTemplate(icon: TemplateRef<any> | string | undefined): boolean {\n    return icon instanceof TemplateRef;\n  }\n\n  isString(icon: TemplateRef<any> | string | undefined): boolean {\n    return typeof icon === 'string';\n  }\n\n  // Event handlers\n  onInput(event: Event): void {\n    const target = event.target as HTMLInputElement;\n    const value = target.value;\n    \n    this._value = value;\n    this.onChange(value);\n    this.valueChange.emit(value);\n    this.inputEvent.emit(event);\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focusEvent.emit(event);\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.onTouched();\n    this.blurEvent.emit(event);\n  }\n\n  onKeyUp(event: KeyboardEvent): void {\n    this.keyupEvent.emit(event);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    this.keydownEvent.emit(event);\n  }\n\n  // ControlValueAccessor implementation\n  writeValue(value: any): void {\n    this._value = value || '';\n    this.value = this._value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: (value: string) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.cdr.markForCheck();\n  }\n\n  // Public methods for external access\n  focusInput(): void {\n    if (this.inputElement) {\n      this.inputElement.nativeElement.focus();\n    }\n  }\n\n  blurInput(): void {\n    if (this.inputElement) {\n      this.inputElement.nativeElement.blur();\n    }\n  }\n\n  selectText(): void {\n    if (this.inputElement) {\n      this.inputElement.nativeElement.select();\n    }\n  }\n}",
            "properties": [
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "containerClassName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "endIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "helperText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSize",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "startIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputState",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputVariant",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ModalData",
            "id": "interface-ModalData-82315ba0f444d6b383f030b29d7e162374548cb050a13d6e54e1c77a6b59d74aaf384eeba1a11d6ee3703ae1a659ee8c1afa6fd3bbae396d0e403bebcdd9934a",
            "file": "src/app/components/modal/modal.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, TemplateRef, ComponentRef, ViewContainerRef, Injector } from '@angular/core';\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { Subject, Observable } from 'rxjs';\nimport { ModalComponent, ModalConfig, ModalSize, ModalPosition, ModalVariant } from './modal.component';\n\nexport interface ModalRef<T = any> {\n  instance: ModalComponent;\n  componentInstance?: T;\n  overlayRef: OverlayRef;\n  afterClosed: Observable<any>;\n  afterOpened: Observable<void>;\n  close: (result?: any) => void;\n  updateConfig: (config: Partial<ModalConfig>) => void;\n  updateSize: (size: ModalSize) => void;\n  updatePosition: (position: ModalPosition) => void;\n}\n\nexport interface ModalData {\n  [key: string]: any;\n}\n\nexport interface ModalOptions extends Partial<ModalConfig> {\n  data?: ModalData;\n  viewContainerRef?: ViewContainerRef;\n  injector?: Injector;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModalService {\n  private _openModalRefs: ModalRef[] = [];\n  private _globalConfig: Partial<ModalConfig> = {\n    size: 'base',\n    position: 'center',\n    variant: 'default',\n    closeOnBackdropClick: true,\n    closeOnEscape: true,\n    disableClose: false,\n    hasBackdrop: true,\n    animationEnabled: true,\n    animationDuration: 300,\n    autoFocus: true,\n    restoreFocus: true\n  };\n\n  constructor(private overlay: Overlay) {}\n\n  /**\n   * Opens a modal with a component\n   */\n  open<T = any, R = any>(\n    component: any,\n    options?: ModalOptions\n  ): ModalRef<T> {\n    const config = { ...this._globalConfig, ...options };\n    const overlayRef = this.createOverlay(config);\n    const modalRef = this.createModalRef<T, R>(overlayRef, config);\n    \n    // Create component portal\n    const componentPortal = new ComponentPortal(\n      component,\n      options?.viewContainerRef,\n      options?.injector\n    );\n    \n    // Attach component to modal\n    const componentRef = overlayRef.attach(componentPortal);\n    modalRef.componentInstance = componentRef.instance;\n    \n    // Pass data to component if provided\n    if (options?.data) {\n      Object.assign(componentRef.instance, options.data);\n    }\n    \n    // Setup modal lifecycle\n    this.setupModalLifecycle(modalRef);\n    \n    // Track open modal\n    this._openModalRefs.push(modalRef);\n    \n    return modalRef;\n  }\n\n  /**\n   * Opens a modal with a template\n   */\n  openTemplate<R = any>(\n    template: TemplateRef<any>,\n    options?: ModalOptions\n  ): ModalRef<any> {\n    const config = { ...this._globalConfig, ...options };\n    const overlayRef = this.createOverlay(config);\n    const modalRef = this.createModalRef<any, R>(overlayRef, config);\n    \n    // Create template portal\n    const templatePortal = new TemplatePortal(\n      template,\n      options?.viewContainerRef || null,\n      options?.data\n    );\n    \n    // Attach template to modal\n    overlayRef.attach(templatePortal);\n    \n    // Setup modal lifecycle\n    this.setupModalLifecycle(modalRef);\n    \n    // Track open modal\n    this._openModalRefs.push(modalRef);\n    \n    return modalRef;\n  }\n\n  /**\n   * Opens a confirmation modal\n   */\n  openConfirm(options: {\n    title?: string;\n    message?: string;\n    confirmText?: string;\n    cancelText?: string;\n    variant?: ModalVariant;\n    size?: ModalSize;\n  } & ModalOptions): ModalRef<any> {\n    const config = {\n      ...this._globalConfig,\n      ...options,\n      variant: options.variant || 'default',\n      size: options.size || 'sm'\n    };\n    \n    const overlayRef = this.createOverlay(config);\n    const modalRef = this.createModalRef(overlayRef, config);\n    \n    // Create confirmation component (you would create this separately)\n    // For now, we'll use a simple template approach\n    const confirmationData = {\n      title: options.title || 'Confirm Action',\n      message: options.message || 'Are you sure you want to proceed?',\n      confirmText: options.confirmText || 'Confirm',\n      cancelText: options.cancelText || 'Cancel',\n      onConfirm: () => modalRef.close(true),\n      onCancel: () => modalRef.close(false)\n    };\n    \n    // You would typically create a ConfirmationComponent here\n    // For this implementation, we'll simulate it\n    modalRef.componentInstance = confirmationData;\n    \n    // Setup modal lifecycle\n    this.setupModalLifecycle(modalRef);\n    \n    // Track open modal\n    this._openModalRefs.push(modalRef);\n    \n    return modalRef;\n  }\n\n  /**\n   * Opens an alert modal\n   */\n  openAlert(options: {\n    title?: string;\n    message?: string;\n    buttonText?: string;\n    variant?: ModalVariant;\n    size?: ModalSize;\n  } & ModalOptions): ModalRef<any> {\n    const config = {\n      ...this._globalConfig,\n      ...options,\n      variant: options.variant || 'default',\n      size: options.size || 'sm',\n      closeOnBackdropClick: false,\n      closeOnEscape: false\n    };\n    \n    const overlayRef = this.createOverlay(config);\n    const modalRef = this.createModalRef(overlayRef, config);\n    \n    // Create alert data\n    const alertData = {\n      title: options.title || 'Alert',\n      message: options.message || 'This is an alert message.',\n      buttonText: options.buttonText || 'OK',\n      onClose: () => modalRef.close(true)\n    };\n    \n    modalRef.componentInstance = alertData;\n    \n    // Setup modal lifecycle\n    this.setupModalLifecycle(modalRef);\n    \n    // Track open modal\n    this._openModalRefs.push(modalRef);\n    \n    return modalRef;\n  }\n\n  /**\n   * Closes all open modals\n   */\n  closeAll(): void {\n    this._openModalRefs.forEach(modalRef => {\n      modalRef.close();\n    });\n  }\n\n  /**\n   * Gets all open modal references\n   */\n  getOpenModals(): ModalRef[] {\n    return [...this._openModalRefs];\n  }\n\n  /**\n   * Checks if any modal is currently open\n   */\n  hasOpenModals(): boolean {\n    return this._openModalRefs.length > 0;\n  }\n\n  /**\n   * Sets global configuration for all modals\n   */\n  setGlobalConfig(config: Partial<ModalConfig>): void {\n    this._globalConfig = { ...this._globalConfig, ...config };\n  }\n\n  /**\n   * Gets the current global configuration\n   */\n  getGlobalConfig(): Partial<ModalConfig> {\n    return { ...this._globalConfig };\n  }\n\n  private createOverlay(config: Partial<ModalConfig>): OverlayRef {\n    const overlayConfig = {\n      hasBackdrop: config.hasBackdrop !== false,\n      backdropClass: ['modal-backdrop', config.backdropClass].filter(Boolean),\n      panelClass: ['modal-overlay-panel', config.panelClass].filter(Boolean),\n      scrollStrategy: this.overlay.scrollStrategies.block(),\n      positionStrategy: this.overlay.position().global()\n    };\n\n    // Configure position strategy\n    switch (config.position) {\n      case 'top':\n        overlayConfig.positionStrategy.top('5%').centerHorizontally();\n        break;\n      case 'bottom':\n        overlayConfig.positionStrategy.bottom('5%').centerHorizontally();\n        break;\n      default:\n        overlayConfig.positionStrategy.centerHorizontally().centerVertically();\n        break;\n    }\n\n    return this.overlay.create(overlayConfig);\n  }\n\n  private createModalRef<T, R>(\n    overlayRef: OverlayRef,\n    config: Partial<ModalConfig>\n  ): ModalRef<T> {\n    const afterClosed = new Subject<R>();\n    const afterOpened = new Subject<void>();\n\n    const modalRef: ModalRef<T> = {\n      instance: null as any, // Will be set after component creation\n      overlayRef,\n      afterClosed: afterClosed.asObservable(),\n      afterOpened: afterOpened.asObservable(),\n      close: (result?: R) => {\n        this.closeModal(modalRef, result);\n      },\n      updateConfig: (newConfig: Partial<ModalConfig>) => {\n        if (modalRef.instance) {\n          modalRef.instance.updateConfig(newConfig);\n        }\n      },\n      updateSize: (size: ModalSize) => {\n        if (modalRef.instance) {\n          modalRef.instance.size = size;\n        }\n      },\n      updatePosition: (position: ModalPosition) => {\n        if (modalRef.instance) {\n          modalRef.instance.position = position;\n        }\n      }\n    };\n\n    return modalRef;\n  }\n\n  private setupModalLifecycle<T>(modalRef: ModalRef<T>): void {\n    // Handle backdrop clicks\n    if (modalRef.overlayRef.backdropClick) {\n      modalRef.overlayRef.backdropClick().subscribe(() => {\n        if (modalRef.instance && modalRef.instance.closeOnBackdropClick) {\n          modalRef.close();\n        }\n      });\n    }\n\n    // Handle escape key\n    if (modalRef.overlayRef.keydownEvents) {\n      modalRef.overlayRef.keydownEvents().subscribe(event => {\n        if (event.keyCode === 27 && modalRef.instance && modalRef.instance.closeOnEscape) {\n          modalRef.close();\n        }\n      });\n    }\n\n    // Emit opened event\n    setTimeout(() => {\n      (modalRef.afterOpened as Subject<void>).next();\n    });\n  }\n\n  private closeModal<T>(modalRef: ModalRef<T>, result?: any): void {\n    // Remove from open modals list\n    const index = this._openModalRefs.indexOf(modalRef);\n    if (index > -1) {\n      this._openModalRefs.splice(index, 1);\n    }\n\n    // Emit closed event\n    (modalRef.afterClosed as Subject<any>).next(result);\n    (modalRef.afterClosed as Subject<any>).complete();\n\n    // Dispose overlay\n    if (modalRef.overlayRef) {\n      modalRef.overlayRef.dispose();\n    }\n  }\n}",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-82315ba0f444d6b383f030b29d7e162374548cb050a13d6e54e1c77a6b59d74aaf384eeba1a11d6ee3703ae1a659ee8c1afa6fd3bbae396d0e403bebcdd9934a",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "ModalOptions",
            "id": "interface-ModalOptions-82315ba0f444d6b383f030b29d7e162374548cb050a13d6e54e1c77a6b59d74aaf384eeba1a11d6ee3703ae1a659ee8c1afa6fd3bbae396d0e403bebcdd9934a",
            "file": "src/app/components/modal/modal.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, TemplateRef, ComponentRef, ViewContainerRef, Injector } from '@angular/core';\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { Subject, Observable } from 'rxjs';\nimport { ModalComponent, ModalConfig, ModalSize, ModalPosition, ModalVariant } from './modal.component';\n\nexport interface ModalRef<T = any> {\n  instance: ModalComponent;\n  componentInstance?: T;\n  overlayRef: OverlayRef;\n  afterClosed: Observable<any>;\n  afterOpened: Observable<void>;\n  close: (result?: any) => void;\n  updateConfig: (config: Partial<ModalConfig>) => void;\n  updateSize: (size: ModalSize) => void;\n  updatePosition: (position: ModalPosition) => void;\n}\n\nexport interface ModalData {\n  [key: string]: any;\n}\n\nexport interface ModalOptions extends Partial<ModalConfig> {\n  data?: ModalData;\n  viewContainerRef?: ViewContainerRef;\n  injector?: Injector;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModalService {\n  private _openModalRefs: ModalRef[] = [];\n  private _globalConfig: Partial<ModalConfig> = {\n    size: 'base',\n    position: 'center',\n    variant: 'default',\n    closeOnBackdropClick: true,\n    closeOnEscape: true,\n    disableClose: false,\n    hasBackdrop: true,\n    animationEnabled: true,\n    animationDuration: 300,\n    autoFocus: true,\n    restoreFocus: true\n  };\n\n  constructor(private overlay: Overlay) {}\n\n  /**\n   * Opens a modal with a component\n   */\n  open<T = any, R = any>(\n    component: any,\n    options?: ModalOptions\n  ): ModalRef<T> {\n    const config = { ...this._globalConfig, ...options };\n    const overlayRef = this.createOverlay(config);\n    const modalRef = this.createModalRef<T, R>(overlayRef, config);\n    \n    // Create component portal\n    const componentPortal = new ComponentPortal(\n      component,\n      options?.viewContainerRef,\n      options?.injector\n    );\n    \n    // Attach component to modal\n    const componentRef = overlayRef.attach(componentPortal);\n    modalRef.componentInstance = componentRef.instance;\n    \n    // Pass data to component if provided\n    if (options?.data) {\n      Object.assign(componentRef.instance, options.data);\n    }\n    \n    // Setup modal lifecycle\n    this.setupModalLifecycle(modalRef);\n    \n    // Track open modal\n    this._openModalRefs.push(modalRef);\n    \n    return modalRef;\n  }\n\n  /**\n   * Opens a modal with a template\n   */\n  openTemplate<R = any>(\n    template: TemplateRef<any>,\n    options?: ModalOptions\n  ): ModalRef<any> {\n    const config = { ...this._globalConfig, ...options };\n    const overlayRef = this.createOverlay(config);\n    const modalRef = this.createModalRef<any, R>(overlayRef, config);\n    \n    // Create template portal\n    const templatePortal = new TemplatePortal(\n      template,\n      options?.viewContainerRef || null,\n      options?.data\n    );\n    \n    // Attach template to modal\n    overlayRef.attach(templatePortal);\n    \n    // Setup modal lifecycle\n    this.setupModalLifecycle(modalRef);\n    \n    // Track open modal\n    this._openModalRefs.push(modalRef);\n    \n    return modalRef;\n  }\n\n  /**\n   * Opens a confirmation modal\n   */\n  openConfirm(options: {\n    title?: string;\n    message?: string;\n    confirmText?: string;\n    cancelText?: string;\n    variant?: ModalVariant;\n    size?: ModalSize;\n  } & ModalOptions): ModalRef<any> {\n    const config = {\n      ...this._globalConfig,\n      ...options,\n      variant: options.variant || 'default',\n      size: options.size || 'sm'\n    };\n    \n    const overlayRef = this.createOverlay(config);\n    const modalRef = this.createModalRef(overlayRef, config);\n    \n    // Create confirmation component (you would create this separately)\n    // For now, we'll use a simple template approach\n    const confirmationData = {\n      title: options.title || 'Confirm Action',\n      message: options.message || 'Are you sure you want to proceed?',\n      confirmText: options.confirmText || 'Confirm',\n      cancelText: options.cancelText || 'Cancel',\n      onConfirm: () => modalRef.close(true),\n      onCancel: () => modalRef.close(false)\n    };\n    \n    // You would typically create a ConfirmationComponent here\n    // For this implementation, we'll simulate it\n    modalRef.componentInstance = confirmationData;\n    \n    // Setup modal lifecycle\n    this.setupModalLifecycle(modalRef);\n    \n    // Track open modal\n    this._openModalRefs.push(modalRef);\n    \n    return modalRef;\n  }\n\n  /**\n   * Opens an alert modal\n   */\n  openAlert(options: {\n    title?: string;\n    message?: string;\n    buttonText?: string;\n    variant?: ModalVariant;\n    size?: ModalSize;\n  } & ModalOptions): ModalRef<any> {\n    const config = {\n      ...this._globalConfig,\n      ...options,\n      variant: options.variant || 'default',\n      size: options.size || 'sm',\n      closeOnBackdropClick: false,\n      closeOnEscape: false\n    };\n    \n    const overlayRef = this.createOverlay(config);\n    const modalRef = this.createModalRef(overlayRef, config);\n    \n    // Create alert data\n    const alertData = {\n      title: options.title || 'Alert',\n      message: options.message || 'This is an alert message.',\n      buttonText: options.buttonText || 'OK',\n      onClose: () => modalRef.close(true)\n    };\n    \n    modalRef.componentInstance = alertData;\n    \n    // Setup modal lifecycle\n    this.setupModalLifecycle(modalRef);\n    \n    // Track open modal\n    this._openModalRefs.push(modalRef);\n    \n    return modalRef;\n  }\n\n  /**\n   * Closes all open modals\n   */\n  closeAll(): void {\n    this._openModalRefs.forEach(modalRef => {\n      modalRef.close();\n    });\n  }\n\n  /**\n   * Gets all open modal references\n   */\n  getOpenModals(): ModalRef[] {\n    return [...this._openModalRefs];\n  }\n\n  /**\n   * Checks if any modal is currently open\n   */\n  hasOpenModals(): boolean {\n    return this._openModalRefs.length > 0;\n  }\n\n  /**\n   * Sets global configuration for all modals\n   */\n  setGlobalConfig(config: Partial<ModalConfig>): void {\n    this._globalConfig = { ...this._globalConfig, ...config };\n  }\n\n  /**\n   * Gets the current global configuration\n   */\n  getGlobalConfig(): Partial<ModalConfig> {\n    return { ...this._globalConfig };\n  }\n\n  private createOverlay(config: Partial<ModalConfig>): OverlayRef {\n    const overlayConfig = {\n      hasBackdrop: config.hasBackdrop !== false,\n      backdropClass: ['modal-backdrop', config.backdropClass].filter(Boolean),\n      panelClass: ['modal-overlay-panel', config.panelClass].filter(Boolean),\n      scrollStrategy: this.overlay.scrollStrategies.block(),\n      positionStrategy: this.overlay.position().global()\n    };\n\n    // Configure position strategy\n    switch (config.position) {\n      case 'top':\n        overlayConfig.positionStrategy.top('5%').centerHorizontally();\n        break;\n      case 'bottom':\n        overlayConfig.positionStrategy.bottom('5%').centerHorizontally();\n        break;\n      default:\n        overlayConfig.positionStrategy.centerHorizontally().centerVertically();\n        break;\n    }\n\n    return this.overlay.create(overlayConfig);\n  }\n\n  private createModalRef<T, R>(\n    overlayRef: OverlayRef,\n    config: Partial<ModalConfig>\n  ): ModalRef<T> {\n    const afterClosed = new Subject<R>();\n    const afterOpened = new Subject<void>();\n\n    const modalRef: ModalRef<T> = {\n      instance: null as any, // Will be set after component creation\n      overlayRef,\n      afterClosed: afterClosed.asObservable(),\n      afterOpened: afterOpened.asObservable(),\n      close: (result?: R) => {\n        this.closeModal(modalRef, result);\n      },\n      updateConfig: (newConfig: Partial<ModalConfig>) => {\n        if (modalRef.instance) {\n          modalRef.instance.updateConfig(newConfig);\n        }\n      },\n      updateSize: (size: ModalSize) => {\n        if (modalRef.instance) {\n          modalRef.instance.size = size;\n        }\n      },\n      updatePosition: (position: ModalPosition) => {\n        if (modalRef.instance) {\n          modalRef.instance.position = position;\n        }\n      }\n    };\n\n    return modalRef;\n  }\n\n  private setupModalLifecycle<T>(modalRef: ModalRef<T>): void {\n    // Handle backdrop clicks\n    if (modalRef.overlayRef.backdropClick) {\n      modalRef.overlayRef.backdropClick().subscribe(() => {\n        if (modalRef.instance && modalRef.instance.closeOnBackdropClick) {\n          modalRef.close();\n        }\n      });\n    }\n\n    // Handle escape key\n    if (modalRef.overlayRef.keydownEvents) {\n      modalRef.overlayRef.keydownEvents().subscribe(event => {\n        if (event.keyCode === 27 && modalRef.instance && modalRef.instance.closeOnEscape) {\n          modalRef.close();\n        }\n      });\n    }\n\n    // Emit opened event\n    setTimeout(() => {\n      (modalRef.afterOpened as Subject<void>).next();\n    });\n  }\n\n  private closeModal<T>(modalRef: ModalRef<T>, result?: any): void {\n    // Remove from open modals list\n    const index = this._openModalRefs.indexOf(modalRef);\n    if (index > -1) {\n      this._openModalRefs.splice(index, 1);\n    }\n\n    // Emit closed event\n    (modalRef.afterClosed as Subject<any>).next(result);\n    (modalRef.afterClosed as Subject<any>).complete();\n\n    // Dispose overlay\n    if (modalRef.overlayRef) {\n      modalRef.overlayRef.dispose();\n    }\n  }\n}",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModalData",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "injector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Injector",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "Partial"
            ]
        },
        {
            "name": "ModalRef",
            "id": "interface-ModalRef-82315ba0f444d6b383f030b29d7e162374548cb050a13d6e54e1c77a6b59d74aaf384eeba1a11d6ee3703ae1a659ee8c1afa6fd3bbae396d0e403bebcdd9934a",
            "file": "src/app/components/modal/modal.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, TemplateRef, ComponentRef, ViewContainerRef, Injector } from '@angular/core';\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { Subject, Observable } from 'rxjs';\nimport { ModalComponent, ModalConfig, ModalSize, ModalPosition, ModalVariant } from './modal.component';\n\nexport interface ModalRef<T = any> {\n  instance: ModalComponent;\n  componentInstance?: T;\n  overlayRef: OverlayRef;\n  afterClosed: Observable<any>;\n  afterOpened: Observable<void>;\n  close: (result?: any) => void;\n  updateConfig: (config: Partial<ModalConfig>) => void;\n  updateSize: (size: ModalSize) => void;\n  updatePosition: (position: ModalPosition) => void;\n}\n\nexport interface ModalData {\n  [key: string]: any;\n}\n\nexport interface ModalOptions extends Partial<ModalConfig> {\n  data?: ModalData;\n  viewContainerRef?: ViewContainerRef;\n  injector?: Injector;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModalService {\n  private _openModalRefs: ModalRef[] = [];\n  private _globalConfig: Partial<ModalConfig> = {\n    size: 'base',\n    position: 'center',\n    variant: 'default',\n    closeOnBackdropClick: true,\n    closeOnEscape: true,\n    disableClose: false,\n    hasBackdrop: true,\n    animationEnabled: true,\n    animationDuration: 300,\n    autoFocus: true,\n    restoreFocus: true\n  };\n\n  constructor(private overlay: Overlay) {}\n\n  /**\n   * Opens a modal with a component\n   */\n  open<T = any, R = any>(\n    component: any,\n    options?: ModalOptions\n  ): ModalRef<T> {\n    const config = { ...this._globalConfig, ...options };\n    const overlayRef = this.createOverlay(config);\n    const modalRef = this.createModalRef<T, R>(overlayRef, config);\n    \n    // Create component portal\n    const componentPortal = new ComponentPortal(\n      component,\n      options?.viewContainerRef,\n      options?.injector\n    );\n    \n    // Attach component to modal\n    const componentRef = overlayRef.attach(componentPortal);\n    modalRef.componentInstance = componentRef.instance;\n    \n    // Pass data to component if provided\n    if (options?.data) {\n      Object.assign(componentRef.instance, options.data);\n    }\n    \n    // Setup modal lifecycle\n    this.setupModalLifecycle(modalRef);\n    \n    // Track open modal\n    this._openModalRefs.push(modalRef);\n    \n    return modalRef;\n  }\n\n  /**\n   * Opens a modal with a template\n   */\n  openTemplate<R = any>(\n    template: TemplateRef<any>,\n    options?: ModalOptions\n  ): ModalRef<any> {\n    const config = { ...this._globalConfig, ...options };\n    const overlayRef = this.createOverlay(config);\n    const modalRef = this.createModalRef<any, R>(overlayRef, config);\n    \n    // Create template portal\n    const templatePortal = new TemplatePortal(\n      template,\n      options?.viewContainerRef || null,\n      options?.data\n    );\n    \n    // Attach template to modal\n    overlayRef.attach(templatePortal);\n    \n    // Setup modal lifecycle\n    this.setupModalLifecycle(modalRef);\n    \n    // Track open modal\n    this._openModalRefs.push(modalRef);\n    \n    return modalRef;\n  }\n\n  /**\n   * Opens a confirmation modal\n   */\n  openConfirm(options: {\n    title?: string;\n    message?: string;\n    confirmText?: string;\n    cancelText?: string;\n    variant?: ModalVariant;\n    size?: ModalSize;\n  } & ModalOptions): ModalRef<any> {\n    const config = {\n      ...this._globalConfig,\n      ...options,\n      variant: options.variant || 'default',\n      size: options.size || 'sm'\n    };\n    \n    const overlayRef = this.createOverlay(config);\n    const modalRef = this.createModalRef(overlayRef, config);\n    \n    // Create confirmation component (you would create this separately)\n    // For now, we'll use a simple template approach\n    const confirmationData = {\n      title: options.title || 'Confirm Action',\n      message: options.message || 'Are you sure you want to proceed?',\n      confirmText: options.confirmText || 'Confirm',\n      cancelText: options.cancelText || 'Cancel',\n      onConfirm: () => modalRef.close(true),\n      onCancel: () => modalRef.close(false)\n    };\n    \n    // You would typically create a ConfirmationComponent here\n    // For this implementation, we'll simulate it\n    modalRef.componentInstance = confirmationData;\n    \n    // Setup modal lifecycle\n    this.setupModalLifecycle(modalRef);\n    \n    // Track open modal\n    this._openModalRefs.push(modalRef);\n    \n    return modalRef;\n  }\n\n  /**\n   * Opens an alert modal\n   */\n  openAlert(options: {\n    title?: string;\n    message?: string;\n    buttonText?: string;\n    variant?: ModalVariant;\n    size?: ModalSize;\n  } & ModalOptions): ModalRef<any> {\n    const config = {\n      ...this._globalConfig,\n      ...options,\n      variant: options.variant || 'default',\n      size: options.size || 'sm',\n      closeOnBackdropClick: false,\n      closeOnEscape: false\n    };\n    \n    const overlayRef = this.createOverlay(config);\n    const modalRef = this.createModalRef(overlayRef, config);\n    \n    // Create alert data\n    const alertData = {\n      title: options.title || 'Alert',\n      message: options.message || 'This is an alert message.',\n      buttonText: options.buttonText || 'OK',\n      onClose: () => modalRef.close(true)\n    };\n    \n    modalRef.componentInstance = alertData;\n    \n    // Setup modal lifecycle\n    this.setupModalLifecycle(modalRef);\n    \n    // Track open modal\n    this._openModalRefs.push(modalRef);\n    \n    return modalRef;\n  }\n\n  /**\n   * Closes all open modals\n   */\n  closeAll(): void {\n    this._openModalRefs.forEach(modalRef => {\n      modalRef.close();\n    });\n  }\n\n  /**\n   * Gets all open modal references\n   */\n  getOpenModals(): ModalRef[] {\n    return [...this._openModalRefs];\n  }\n\n  /**\n   * Checks if any modal is currently open\n   */\n  hasOpenModals(): boolean {\n    return this._openModalRefs.length > 0;\n  }\n\n  /**\n   * Sets global configuration for all modals\n   */\n  setGlobalConfig(config: Partial<ModalConfig>): void {\n    this._globalConfig = { ...this._globalConfig, ...config };\n  }\n\n  /**\n   * Gets the current global configuration\n   */\n  getGlobalConfig(): Partial<ModalConfig> {\n    return { ...this._globalConfig };\n  }\n\n  private createOverlay(config: Partial<ModalConfig>): OverlayRef {\n    const overlayConfig = {\n      hasBackdrop: config.hasBackdrop !== false,\n      backdropClass: ['modal-backdrop', config.backdropClass].filter(Boolean),\n      panelClass: ['modal-overlay-panel', config.panelClass].filter(Boolean),\n      scrollStrategy: this.overlay.scrollStrategies.block(),\n      positionStrategy: this.overlay.position().global()\n    };\n\n    // Configure position strategy\n    switch (config.position) {\n      case 'top':\n        overlayConfig.positionStrategy.top('5%').centerHorizontally();\n        break;\n      case 'bottom':\n        overlayConfig.positionStrategy.bottom('5%').centerHorizontally();\n        break;\n      default:\n        overlayConfig.positionStrategy.centerHorizontally().centerVertically();\n        break;\n    }\n\n    return this.overlay.create(overlayConfig);\n  }\n\n  private createModalRef<T, R>(\n    overlayRef: OverlayRef,\n    config: Partial<ModalConfig>\n  ): ModalRef<T> {\n    const afterClosed = new Subject<R>();\n    const afterOpened = new Subject<void>();\n\n    const modalRef: ModalRef<T> = {\n      instance: null as any, // Will be set after component creation\n      overlayRef,\n      afterClosed: afterClosed.asObservable(),\n      afterOpened: afterOpened.asObservable(),\n      close: (result?: R) => {\n        this.closeModal(modalRef, result);\n      },\n      updateConfig: (newConfig: Partial<ModalConfig>) => {\n        if (modalRef.instance) {\n          modalRef.instance.updateConfig(newConfig);\n        }\n      },\n      updateSize: (size: ModalSize) => {\n        if (modalRef.instance) {\n          modalRef.instance.size = size;\n        }\n      },\n      updatePosition: (position: ModalPosition) => {\n        if (modalRef.instance) {\n          modalRef.instance.position = position;\n        }\n      }\n    };\n\n    return modalRef;\n  }\n\n  private setupModalLifecycle<T>(modalRef: ModalRef<T>): void {\n    // Handle backdrop clicks\n    if (modalRef.overlayRef.backdropClick) {\n      modalRef.overlayRef.backdropClick().subscribe(() => {\n        if (modalRef.instance && modalRef.instance.closeOnBackdropClick) {\n          modalRef.close();\n        }\n      });\n    }\n\n    // Handle escape key\n    if (modalRef.overlayRef.keydownEvents) {\n      modalRef.overlayRef.keydownEvents().subscribe(event => {\n        if (event.keyCode === 27 && modalRef.instance && modalRef.instance.closeOnEscape) {\n          modalRef.close();\n        }\n      });\n    }\n\n    // Emit opened event\n    setTimeout(() => {\n      (modalRef.afterOpened as Subject<void>).next();\n    });\n  }\n\n  private closeModal<T>(modalRef: ModalRef<T>, result?: any): void {\n    // Remove from open modals list\n    const index = this._openModalRefs.indexOf(modalRef);\n    if (index > -1) {\n      this._openModalRefs.splice(index, 1);\n    }\n\n    // Emit closed event\n    (modalRef.afterClosed as Subject<any>).next(result);\n    (modalRef.afterClosed as Subject<any>).complete();\n\n    // Dispose overlay\n    if (modalRef.overlayRef) {\n      modalRef.overlayRef.dispose();\n    }\n  }\n}",
            "properties": [
                {
                    "name": "afterClosed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "afterOpened",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<void>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "close",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "componentInstance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "instance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModalComponent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "overlayRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "updateConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "updatePosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "updateSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProgressStepsConfig",
            "id": "interface-ProgressStepsConfig-499ad3205f830172a327512574076ef9977667c9786733a5c706cf59141c9dd70eaead29c2a18c3cba4f28e08a76440a9120438c7d32676146696c76d4f2bf01",
            "file": "src/app/components/progress-steps/progress-steps.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StepConfig {\n  id: string;\n  label: string;\n  description?: string;\n  icon?: string;\n  disabled?: boolean;\n  optional?: boolean;\n  completed?: boolean;\n  error?: boolean;\n  href?: string;\n  clickable?: boolean;\n}\n\nexport interface ProgressStepsConfig {\n  steps: StepConfig[];\n  currentStep: number;\n  allowNavigation?: boolean;\n  showLabels?: boolean;\n  showDescriptions?: boolean;\n  orientation?: 'horizontal' | 'vertical';\n  variant?: 'default' | 'compact' | 'minimal';\n  size?: 'small' | 'medium' | 'large';\n}\n\nexport interface StepClickEvent {\n  step: StepConfig;\n  index: number;\n  previousIndex: number;\n}\n\nexport type StepState = 'pending' | 'active' | 'completed' | 'error' | 'disabled' | 'optional';\nexport type StepOrientation = 'horizontal' | 'vertical';\nexport type StepVariant = 'default' | 'compact' | 'minimal';\nexport type StepSize = 'small' | 'medium' | 'large';",
            "properties": [
                {
                    "name": "allowNavigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "currentStep",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "orientation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"horizontal\" | \"vertical\"",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "showDescriptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "showLabels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "steps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StepConfig[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"default\" | \"compact\" | \"minimal\"",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectorAccessibility",
            "id": "interface-SelectorAccessibility-574699143c94b7409d10aad02630be7312e57253b1ebbe6eaa1948ada407b5297c8187e47aadf39bf82c22597956fd9235e1065903acbd7d7a895224e6d5a393",
            "file": "src/app/components/selector/selector.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport type SelectorMode = 'single' | 'multiple';\nexport type SelectorLayout = 'grid' | 'list';\nexport type SelectorSize = 'sm' | 'base' | 'lg';\nexport type SelectorVariant = 'default' | 'card' | 'minimal';\n\nexport interface SelectorOption {\n  id: string | number;\n  label: string;\n  value: any;\n  description?: string;\n  icon?: string | TemplateRef<any>;\n  badge?: string;\n  disabled?: boolean;\n  group?: string;\n  metadata?: { [key: string]: any };\n}\n\nexport interface SelectorGroup {\n  id: string;\n  label: string;\n  description?: string;\n  collapsed?: boolean;\n  options: SelectorOption[];\n}\n\nexport interface SelectorState {\n  selectedOptions: SelectorOption[];\n  selectedValues: any[];\n  searchTerm: string;\n  filteredOptions: SelectorOption[];\n  filteredGroups: SelectorGroup[];\n  isSearching: boolean;\n  hasError: boolean;\n  errorMessage?: string;\n}\n\nexport interface SelectorValidation {\n  required?: boolean;\n  minSelection?: number;\n  maxSelection?: number;\n  customValidator?: (selection: any[]) => string | null;\n}\n\nexport interface SelectorConfig {\n  mode: SelectorMode;\n  layout: SelectorLayout;\n  size: SelectorSize;\n  variant: SelectorVariant;\n  gridColumns?: number;\n  virtualScroll?: boolean;\n  searchable?: boolean;\n  clearable?: boolean;\n  groupable?: boolean;\n  validation?: SelectorValidation;\n  placeholder?: string;\n  searchPlaceholder?: string;\n  noResultsMessage?: string;\n  loadingMessage?: string;\n  maxHeight?: string;\n  className?: string;\n}\n\nexport interface SelectorEvents {\n  selectionChange: any | any[];\n  optionSelect: SelectorOption;\n  optionDeselect: SelectorOption;\n  searchChange: string;\n  groupToggle: string;\n  focus: FocusEvent;\n  blur: FocusEvent;\n}\n\nexport interface SelectorKeyboardNavigation {\n  selectedIndex: number;\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface SelectorAsyncConfig {\n  loadOptions?: (searchTerm: string) => Promise<SelectorOption[]>;\n  loadGroups?: (searchTerm: string) => Promise<SelectorGroup[]>;\n  debounceTime?: number;\n  minSearchLength?: number;\n}\n\nexport interface SelectorTheme {\n  colors: {\n    primary: string;\n    secondary: string;\n    success: string;\n    error: string;\n    warning: string;\n  };\n  spacing: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n  borderRadius: string;\n  shadows: {\n    sm: string;\n    md: string;\n    lg: string;\n  };\n}\n\nexport interface SelectorAccessibility {\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n  ariaLabelledBy?: string;\n  ariaMultiSelectable?: boolean;\n  ariaRequired?: boolean;\n  ariaInvalid?: boolean;\n  ariaActivedescendant?: string;\n  role?: string;\n}\n\nexport interface SelectorCustomization {\n  optionTemplate?: TemplateRef<any>;\n  groupHeaderTemplate?: TemplateRef<any>;\n  emptyStateTemplate?: TemplateRef<any>;\n  loadingTemplate?: TemplateRef<any>;\n  searchTemplate?: TemplateRef<any>;\n  selectedTemplate?: TemplateRef<any>;\n}\n\nexport interface SelectorHighlight {\n  enabled: boolean;\n  className?: string;\n  caseSensitive?: boolean;\n  wholeWord?: boolean;\n}\n\nexport interface SelectorPerformance {\n  virtualScrolling?: {\n    enabled: boolean;\n    itemHeight: number;\n    bufferSize?: number;\n  };\n  lazy?: {\n    enabled: boolean;\n    threshold?: number;\n  };\n  debounce?: {\n    search: number;\n    scroll: number;\n  };\n}",
            "properties": [
                {
                    "name": "ariaActivedescendant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "ariaDescribedBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "ariaInvalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "ariaLabelledBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "ariaMultiSelectable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "ariaRequired",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 119
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectorAsyncConfig",
            "id": "interface-SelectorAsyncConfig-574699143c94b7409d10aad02630be7312e57253b1ebbe6eaa1948ada407b5297c8187e47aadf39bf82c22597956fd9235e1065903acbd7d7a895224e6d5a393",
            "file": "src/app/components/selector/selector.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport type SelectorMode = 'single' | 'multiple';\nexport type SelectorLayout = 'grid' | 'list';\nexport type SelectorSize = 'sm' | 'base' | 'lg';\nexport type SelectorVariant = 'default' | 'card' | 'minimal';\n\nexport interface SelectorOption {\n  id: string | number;\n  label: string;\n  value: any;\n  description?: string;\n  icon?: string | TemplateRef<any>;\n  badge?: string;\n  disabled?: boolean;\n  group?: string;\n  metadata?: { [key: string]: any };\n}\n\nexport interface SelectorGroup {\n  id: string;\n  label: string;\n  description?: string;\n  collapsed?: boolean;\n  options: SelectorOption[];\n}\n\nexport interface SelectorState {\n  selectedOptions: SelectorOption[];\n  selectedValues: any[];\n  searchTerm: string;\n  filteredOptions: SelectorOption[];\n  filteredGroups: SelectorGroup[];\n  isSearching: boolean;\n  hasError: boolean;\n  errorMessage?: string;\n}\n\nexport interface SelectorValidation {\n  required?: boolean;\n  minSelection?: number;\n  maxSelection?: number;\n  customValidator?: (selection: any[]) => string | null;\n}\n\nexport interface SelectorConfig {\n  mode: SelectorMode;\n  layout: SelectorLayout;\n  size: SelectorSize;\n  variant: SelectorVariant;\n  gridColumns?: number;\n  virtualScroll?: boolean;\n  searchable?: boolean;\n  clearable?: boolean;\n  groupable?: boolean;\n  validation?: SelectorValidation;\n  placeholder?: string;\n  searchPlaceholder?: string;\n  noResultsMessage?: string;\n  loadingMessage?: string;\n  maxHeight?: string;\n  className?: string;\n}\n\nexport interface SelectorEvents {\n  selectionChange: any | any[];\n  optionSelect: SelectorOption;\n  optionDeselect: SelectorOption;\n  searchChange: string;\n  groupToggle: string;\n  focus: FocusEvent;\n  blur: FocusEvent;\n}\n\nexport interface SelectorKeyboardNavigation {\n  selectedIndex: number;\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface SelectorAsyncConfig {\n  loadOptions?: (searchTerm: string) => Promise<SelectorOption[]>;\n  loadGroups?: (searchTerm: string) => Promise<SelectorGroup[]>;\n  debounceTime?: number;\n  minSearchLength?: number;\n}\n\nexport interface SelectorTheme {\n  colors: {\n    primary: string;\n    secondary: string;\n    success: string;\n    error: string;\n    warning: string;\n  };\n  spacing: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n  borderRadius: string;\n  shadows: {\n    sm: string;\n    md: string;\n    lg: string;\n  };\n}\n\nexport interface SelectorAccessibility {\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n  ariaLabelledBy?: string;\n  ariaMultiSelectable?: boolean;\n  ariaRequired?: boolean;\n  ariaInvalid?: boolean;\n  ariaActivedescendant?: string;\n  role?: string;\n}\n\nexport interface SelectorCustomization {\n  optionTemplate?: TemplateRef<any>;\n  groupHeaderTemplate?: TemplateRef<any>;\n  emptyStateTemplate?: TemplateRef<any>;\n  loadingTemplate?: TemplateRef<any>;\n  searchTemplate?: TemplateRef<any>;\n  selectedTemplate?: TemplateRef<any>;\n}\n\nexport interface SelectorHighlight {\n  enabled: boolean;\n  className?: string;\n  caseSensitive?: boolean;\n  wholeWord?: boolean;\n}\n\nexport interface SelectorPerformance {\n  virtualScrolling?: {\n    enabled: boolean;\n    itemHeight: number;\n    bufferSize?: number;\n  };\n  lazy?: {\n    enabled: boolean;\n    threshold?: number;\n  };\n  debounce?: {\n    search: number;\n    scroll: number;\n  };\n}",
            "properties": [
                {
                    "name": "debounceTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "loadGroups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "loadOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "minSearchLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 85
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectorConfig",
            "id": "interface-SelectorConfig-574699143c94b7409d10aad02630be7312e57253b1ebbe6eaa1948ada407b5297c8187e47aadf39bf82c22597956fd9235e1065903acbd7d7a895224e6d5a393",
            "file": "src/app/components/selector/selector.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport type SelectorMode = 'single' | 'multiple';\nexport type SelectorLayout = 'grid' | 'list';\nexport type SelectorSize = 'sm' | 'base' | 'lg';\nexport type SelectorVariant = 'default' | 'card' | 'minimal';\n\nexport interface SelectorOption {\n  id: string | number;\n  label: string;\n  value: any;\n  description?: string;\n  icon?: string | TemplateRef<any>;\n  badge?: string;\n  disabled?: boolean;\n  group?: string;\n  metadata?: { [key: string]: any };\n}\n\nexport interface SelectorGroup {\n  id: string;\n  label: string;\n  description?: string;\n  collapsed?: boolean;\n  options: SelectorOption[];\n}\n\nexport interface SelectorState {\n  selectedOptions: SelectorOption[];\n  selectedValues: any[];\n  searchTerm: string;\n  filteredOptions: SelectorOption[];\n  filteredGroups: SelectorGroup[];\n  isSearching: boolean;\n  hasError: boolean;\n  errorMessage?: string;\n}\n\nexport interface SelectorValidation {\n  required?: boolean;\n  minSelection?: number;\n  maxSelection?: number;\n  customValidator?: (selection: any[]) => string | null;\n}\n\nexport interface SelectorConfig {\n  mode: SelectorMode;\n  layout: SelectorLayout;\n  size: SelectorSize;\n  variant: SelectorVariant;\n  gridColumns?: number;\n  virtualScroll?: boolean;\n  searchable?: boolean;\n  clearable?: boolean;\n  groupable?: boolean;\n  validation?: SelectorValidation;\n  placeholder?: string;\n  searchPlaceholder?: string;\n  noResultsMessage?: string;\n  loadingMessage?: string;\n  maxHeight?: string;\n  className?: string;\n}\n\nexport interface SelectorEvents {\n  selectionChange: any | any[];\n  optionSelect: SelectorOption;\n  optionDeselect: SelectorOption;\n  searchChange: string;\n  groupToggle: string;\n  focus: FocusEvent;\n  blur: FocusEvent;\n}\n\nexport interface SelectorKeyboardNavigation {\n  selectedIndex: number;\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface SelectorAsyncConfig {\n  loadOptions?: (searchTerm: string) => Promise<SelectorOption[]>;\n  loadGroups?: (searchTerm: string) => Promise<SelectorGroup[]>;\n  debounceTime?: number;\n  minSearchLength?: number;\n}\n\nexport interface SelectorTheme {\n  colors: {\n    primary: string;\n    secondary: string;\n    success: string;\n    error: string;\n    warning: string;\n  };\n  spacing: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n  borderRadius: string;\n  shadows: {\n    sm: string;\n    md: string;\n    lg: string;\n  };\n}\n\nexport interface SelectorAccessibility {\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n  ariaLabelledBy?: string;\n  ariaMultiSelectable?: boolean;\n  ariaRequired?: boolean;\n  ariaInvalid?: boolean;\n  ariaActivedescendant?: string;\n  role?: string;\n}\n\nexport interface SelectorCustomization {\n  optionTemplate?: TemplateRef<any>;\n  groupHeaderTemplate?: TemplateRef<any>;\n  emptyStateTemplate?: TemplateRef<any>;\n  loadingTemplate?: TemplateRef<any>;\n  searchTemplate?: TemplateRef<any>;\n  selectedTemplate?: TemplateRef<any>;\n}\n\nexport interface SelectorHighlight {\n  enabled: boolean;\n  className?: string;\n  caseSensitive?: boolean;\n  wholeWord?: boolean;\n}\n\nexport interface SelectorPerformance {\n  virtualScrolling?: {\n    enabled: boolean;\n    itemHeight: number;\n    bufferSize?: number;\n  };\n  lazy?: {\n    enabled: boolean;\n    threshold?: number;\n  };\n  debounce?: {\n    search: number;\n    scroll: number;\n  };\n}",
            "properties": [
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "clearable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "gridColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "groupable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "layout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectorLayout",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "loadingMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "maxHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectorMode",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "noResultsMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "searchable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "searchPlaceholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectorSize",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "validation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectorValidation",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectorVariant",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "virtualScroll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 52
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectorCustomization",
            "id": "interface-SelectorCustomization-574699143c94b7409d10aad02630be7312e57253b1ebbe6eaa1948ada407b5297c8187e47aadf39bf82c22597956fd9235e1065903acbd7d7a895224e6d5a393",
            "file": "src/app/components/selector/selector.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport type SelectorMode = 'single' | 'multiple';\nexport type SelectorLayout = 'grid' | 'list';\nexport type SelectorSize = 'sm' | 'base' | 'lg';\nexport type SelectorVariant = 'default' | 'card' | 'minimal';\n\nexport interface SelectorOption {\n  id: string | number;\n  label: string;\n  value: any;\n  description?: string;\n  icon?: string | TemplateRef<any>;\n  badge?: string;\n  disabled?: boolean;\n  group?: string;\n  metadata?: { [key: string]: any };\n}\n\nexport interface SelectorGroup {\n  id: string;\n  label: string;\n  description?: string;\n  collapsed?: boolean;\n  options: SelectorOption[];\n}\n\nexport interface SelectorState {\n  selectedOptions: SelectorOption[];\n  selectedValues: any[];\n  searchTerm: string;\n  filteredOptions: SelectorOption[];\n  filteredGroups: SelectorGroup[];\n  isSearching: boolean;\n  hasError: boolean;\n  errorMessage?: string;\n}\n\nexport interface SelectorValidation {\n  required?: boolean;\n  minSelection?: number;\n  maxSelection?: number;\n  customValidator?: (selection: any[]) => string | null;\n}\n\nexport interface SelectorConfig {\n  mode: SelectorMode;\n  layout: SelectorLayout;\n  size: SelectorSize;\n  variant: SelectorVariant;\n  gridColumns?: number;\n  virtualScroll?: boolean;\n  searchable?: boolean;\n  clearable?: boolean;\n  groupable?: boolean;\n  validation?: SelectorValidation;\n  placeholder?: string;\n  searchPlaceholder?: string;\n  noResultsMessage?: string;\n  loadingMessage?: string;\n  maxHeight?: string;\n  className?: string;\n}\n\nexport interface SelectorEvents {\n  selectionChange: any | any[];\n  optionSelect: SelectorOption;\n  optionDeselect: SelectorOption;\n  searchChange: string;\n  groupToggle: string;\n  focus: FocusEvent;\n  blur: FocusEvent;\n}\n\nexport interface SelectorKeyboardNavigation {\n  selectedIndex: number;\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface SelectorAsyncConfig {\n  loadOptions?: (searchTerm: string) => Promise<SelectorOption[]>;\n  loadGroups?: (searchTerm: string) => Promise<SelectorGroup[]>;\n  debounceTime?: number;\n  minSearchLength?: number;\n}\n\nexport interface SelectorTheme {\n  colors: {\n    primary: string;\n    secondary: string;\n    success: string;\n    error: string;\n    warning: string;\n  };\n  spacing: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n  borderRadius: string;\n  shadows: {\n    sm: string;\n    md: string;\n    lg: string;\n  };\n}\n\nexport interface SelectorAccessibility {\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n  ariaLabelledBy?: string;\n  ariaMultiSelectable?: boolean;\n  ariaRequired?: boolean;\n  ariaInvalid?: boolean;\n  ariaActivedescendant?: string;\n  role?: string;\n}\n\nexport interface SelectorCustomization {\n  optionTemplate?: TemplateRef<any>;\n  groupHeaderTemplate?: TemplateRef<any>;\n  emptyStateTemplate?: TemplateRef<any>;\n  loadingTemplate?: TemplateRef<any>;\n  searchTemplate?: TemplateRef<any>;\n  selectedTemplate?: TemplateRef<any>;\n}\n\nexport interface SelectorHighlight {\n  enabled: boolean;\n  className?: string;\n  caseSensitive?: boolean;\n  wholeWord?: boolean;\n}\n\nexport interface SelectorPerformance {\n  virtualScrolling?: {\n    enabled: boolean;\n    itemHeight: number;\n    bufferSize?: number;\n  };\n  lazy?: {\n    enabled: boolean;\n    threshold?: number;\n  };\n  debounce?: {\n    search: number;\n    scroll: number;\n  };\n}",
            "properties": [
                {
                    "name": "emptyStateTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "groupHeaderTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "loadingTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "optionTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "searchTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "selectedTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 128
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectorEvents",
            "id": "interface-SelectorEvents-574699143c94b7409d10aad02630be7312e57253b1ebbe6eaa1948ada407b5297c8187e47aadf39bf82c22597956fd9235e1065903acbd7d7a895224e6d5a393",
            "file": "src/app/components/selector/selector.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport type SelectorMode = 'single' | 'multiple';\nexport type SelectorLayout = 'grid' | 'list';\nexport type SelectorSize = 'sm' | 'base' | 'lg';\nexport type SelectorVariant = 'default' | 'card' | 'minimal';\n\nexport interface SelectorOption {\n  id: string | number;\n  label: string;\n  value: any;\n  description?: string;\n  icon?: string | TemplateRef<any>;\n  badge?: string;\n  disabled?: boolean;\n  group?: string;\n  metadata?: { [key: string]: any };\n}\n\nexport interface SelectorGroup {\n  id: string;\n  label: string;\n  description?: string;\n  collapsed?: boolean;\n  options: SelectorOption[];\n}\n\nexport interface SelectorState {\n  selectedOptions: SelectorOption[];\n  selectedValues: any[];\n  searchTerm: string;\n  filteredOptions: SelectorOption[];\n  filteredGroups: SelectorGroup[];\n  isSearching: boolean;\n  hasError: boolean;\n  errorMessage?: string;\n}\n\nexport interface SelectorValidation {\n  required?: boolean;\n  minSelection?: number;\n  maxSelection?: number;\n  customValidator?: (selection: any[]) => string | null;\n}\n\nexport interface SelectorConfig {\n  mode: SelectorMode;\n  layout: SelectorLayout;\n  size: SelectorSize;\n  variant: SelectorVariant;\n  gridColumns?: number;\n  virtualScroll?: boolean;\n  searchable?: boolean;\n  clearable?: boolean;\n  groupable?: boolean;\n  validation?: SelectorValidation;\n  placeholder?: string;\n  searchPlaceholder?: string;\n  noResultsMessage?: string;\n  loadingMessage?: string;\n  maxHeight?: string;\n  className?: string;\n}\n\nexport interface SelectorEvents {\n  selectionChange: any | any[];\n  optionSelect: SelectorOption;\n  optionDeselect: SelectorOption;\n  searchChange: string;\n  groupToggle: string;\n  focus: FocusEvent;\n  blur: FocusEvent;\n}\n\nexport interface SelectorKeyboardNavigation {\n  selectedIndex: number;\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface SelectorAsyncConfig {\n  loadOptions?: (searchTerm: string) => Promise<SelectorOption[]>;\n  loadGroups?: (searchTerm: string) => Promise<SelectorGroup[]>;\n  debounceTime?: number;\n  minSearchLength?: number;\n}\n\nexport interface SelectorTheme {\n  colors: {\n    primary: string;\n    secondary: string;\n    success: string;\n    error: string;\n    warning: string;\n  };\n  spacing: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n  borderRadius: string;\n  shadows: {\n    sm: string;\n    md: string;\n    lg: string;\n  };\n}\n\nexport interface SelectorAccessibility {\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n  ariaLabelledBy?: string;\n  ariaMultiSelectable?: boolean;\n  ariaRequired?: boolean;\n  ariaInvalid?: boolean;\n  ariaActivedescendant?: string;\n  role?: string;\n}\n\nexport interface SelectorCustomization {\n  optionTemplate?: TemplateRef<any>;\n  groupHeaderTemplate?: TemplateRef<any>;\n  emptyStateTemplate?: TemplateRef<any>;\n  loadingTemplate?: TemplateRef<any>;\n  searchTemplate?: TemplateRef<any>;\n  selectedTemplate?: TemplateRef<any>;\n}\n\nexport interface SelectorHighlight {\n  enabled: boolean;\n  className?: string;\n  caseSensitive?: boolean;\n  wholeWord?: boolean;\n}\n\nexport interface SelectorPerformance {\n  virtualScrolling?: {\n    enabled: boolean;\n    itemHeight: number;\n    bufferSize?: number;\n  };\n  lazy?: {\n    enabled: boolean;\n    threshold?: number;\n  };\n  debounce?: {\n    search: number;\n    scroll: number;\n  };\n}",
            "properties": [
                {
                    "name": "blur",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FocusEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "focus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FocusEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "groupToggle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "optionDeselect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectorOption",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "optionSelect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectorOption",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "searchChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "selectionChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any | any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectorGroup",
            "id": "interface-SelectorGroup-574699143c94b7409d10aad02630be7312e57253b1ebbe6eaa1948ada407b5297c8187e47aadf39bf82c22597956fd9235e1065903acbd7d7a895224e6d5a393",
            "file": "src/app/components/selector/selector.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport type SelectorMode = 'single' | 'multiple';\nexport type SelectorLayout = 'grid' | 'list';\nexport type SelectorSize = 'sm' | 'base' | 'lg';\nexport type SelectorVariant = 'default' | 'card' | 'minimal';\n\nexport interface SelectorOption {\n  id: string | number;\n  label: string;\n  value: any;\n  description?: string;\n  icon?: string | TemplateRef<any>;\n  badge?: string;\n  disabled?: boolean;\n  group?: string;\n  metadata?: { [key: string]: any };\n}\n\nexport interface SelectorGroup {\n  id: string;\n  label: string;\n  description?: string;\n  collapsed?: boolean;\n  options: SelectorOption[];\n}\n\nexport interface SelectorState {\n  selectedOptions: SelectorOption[];\n  selectedValues: any[];\n  searchTerm: string;\n  filteredOptions: SelectorOption[];\n  filteredGroups: SelectorGroup[];\n  isSearching: boolean;\n  hasError: boolean;\n  errorMessage?: string;\n}\n\nexport interface SelectorValidation {\n  required?: boolean;\n  minSelection?: number;\n  maxSelection?: number;\n  customValidator?: (selection: any[]) => string | null;\n}\n\nexport interface SelectorConfig {\n  mode: SelectorMode;\n  layout: SelectorLayout;\n  size: SelectorSize;\n  variant: SelectorVariant;\n  gridColumns?: number;\n  virtualScroll?: boolean;\n  searchable?: boolean;\n  clearable?: boolean;\n  groupable?: boolean;\n  validation?: SelectorValidation;\n  placeholder?: string;\n  searchPlaceholder?: string;\n  noResultsMessage?: string;\n  loadingMessage?: string;\n  maxHeight?: string;\n  className?: string;\n}\n\nexport interface SelectorEvents {\n  selectionChange: any | any[];\n  optionSelect: SelectorOption;\n  optionDeselect: SelectorOption;\n  searchChange: string;\n  groupToggle: string;\n  focus: FocusEvent;\n  blur: FocusEvent;\n}\n\nexport interface SelectorKeyboardNavigation {\n  selectedIndex: number;\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface SelectorAsyncConfig {\n  loadOptions?: (searchTerm: string) => Promise<SelectorOption[]>;\n  loadGroups?: (searchTerm: string) => Promise<SelectorGroup[]>;\n  debounceTime?: number;\n  minSearchLength?: number;\n}\n\nexport interface SelectorTheme {\n  colors: {\n    primary: string;\n    secondary: string;\n    success: string;\n    error: string;\n    warning: string;\n  };\n  spacing: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n  borderRadius: string;\n  shadows: {\n    sm: string;\n    md: string;\n    lg: string;\n  };\n}\n\nexport interface SelectorAccessibility {\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n  ariaLabelledBy?: string;\n  ariaMultiSelectable?: boolean;\n  ariaRequired?: boolean;\n  ariaInvalid?: boolean;\n  ariaActivedescendant?: string;\n  role?: string;\n}\n\nexport interface SelectorCustomization {\n  optionTemplate?: TemplateRef<any>;\n  groupHeaderTemplate?: TemplateRef<any>;\n  emptyStateTemplate?: TemplateRef<any>;\n  loadingTemplate?: TemplateRef<any>;\n  searchTemplate?: TemplateRef<any>;\n  selectedTemplate?: TemplateRef<any>;\n}\n\nexport interface SelectorHighlight {\n  enabled: boolean;\n  className?: string;\n  caseSensitive?: boolean;\n  wholeWord?: boolean;\n}\n\nexport interface SelectorPerformance {\n  virtualScrolling?: {\n    enabled: boolean;\n    itemHeight: number;\n    bufferSize?: number;\n  };\n  lazy?: {\n    enabled: boolean;\n    threshold?: number;\n  };\n  debounce?: {\n    search: number;\n    scroll: number;\n  };\n}",
            "properties": [
                {
                    "name": "collapsed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectorOption[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectorHighlight",
            "id": "interface-SelectorHighlight-574699143c94b7409d10aad02630be7312e57253b1ebbe6eaa1948ada407b5297c8187e47aadf39bf82c22597956fd9235e1065903acbd7d7a895224e6d5a393",
            "file": "src/app/components/selector/selector.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport type SelectorMode = 'single' | 'multiple';\nexport type SelectorLayout = 'grid' | 'list';\nexport type SelectorSize = 'sm' | 'base' | 'lg';\nexport type SelectorVariant = 'default' | 'card' | 'minimal';\n\nexport interface SelectorOption {\n  id: string | number;\n  label: string;\n  value: any;\n  description?: string;\n  icon?: string | TemplateRef<any>;\n  badge?: string;\n  disabled?: boolean;\n  group?: string;\n  metadata?: { [key: string]: any };\n}\n\nexport interface SelectorGroup {\n  id: string;\n  label: string;\n  description?: string;\n  collapsed?: boolean;\n  options: SelectorOption[];\n}\n\nexport interface SelectorState {\n  selectedOptions: SelectorOption[];\n  selectedValues: any[];\n  searchTerm: string;\n  filteredOptions: SelectorOption[];\n  filteredGroups: SelectorGroup[];\n  isSearching: boolean;\n  hasError: boolean;\n  errorMessage?: string;\n}\n\nexport interface SelectorValidation {\n  required?: boolean;\n  minSelection?: number;\n  maxSelection?: number;\n  customValidator?: (selection: any[]) => string | null;\n}\n\nexport interface SelectorConfig {\n  mode: SelectorMode;\n  layout: SelectorLayout;\n  size: SelectorSize;\n  variant: SelectorVariant;\n  gridColumns?: number;\n  virtualScroll?: boolean;\n  searchable?: boolean;\n  clearable?: boolean;\n  groupable?: boolean;\n  validation?: SelectorValidation;\n  placeholder?: string;\n  searchPlaceholder?: string;\n  noResultsMessage?: string;\n  loadingMessage?: string;\n  maxHeight?: string;\n  className?: string;\n}\n\nexport interface SelectorEvents {\n  selectionChange: any | any[];\n  optionSelect: SelectorOption;\n  optionDeselect: SelectorOption;\n  searchChange: string;\n  groupToggle: string;\n  focus: FocusEvent;\n  blur: FocusEvent;\n}\n\nexport interface SelectorKeyboardNavigation {\n  selectedIndex: number;\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface SelectorAsyncConfig {\n  loadOptions?: (searchTerm: string) => Promise<SelectorOption[]>;\n  loadGroups?: (searchTerm: string) => Promise<SelectorGroup[]>;\n  debounceTime?: number;\n  minSearchLength?: number;\n}\n\nexport interface SelectorTheme {\n  colors: {\n    primary: string;\n    secondary: string;\n    success: string;\n    error: string;\n    warning: string;\n  };\n  spacing: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n  borderRadius: string;\n  shadows: {\n    sm: string;\n    md: string;\n    lg: string;\n  };\n}\n\nexport interface SelectorAccessibility {\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n  ariaLabelledBy?: string;\n  ariaMultiSelectable?: boolean;\n  ariaRequired?: boolean;\n  ariaInvalid?: boolean;\n  ariaActivedescendant?: string;\n  role?: string;\n}\n\nexport interface SelectorCustomization {\n  optionTemplate?: TemplateRef<any>;\n  groupHeaderTemplate?: TemplateRef<any>;\n  emptyStateTemplate?: TemplateRef<any>;\n  loadingTemplate?: TemplateRef<any>;\n  searchTemplate?: TemplateRef<any>;\n  selectedTemplate?: TemplateRef<any>;\n}\n\nexport interface SelectorHighlight {\n  enabled: boolean;\n  className?: string;\n  caseSensitive?: boolean;\n  wholeWord?: boolean;\n}\n\nexport interface SelectorPerformance {\n  virtualScrolling?: {\n    enabled: boolean;\n    itemHeight: number;\n    bufferSize?: number;\n  };\n  lazy?: {\n    enabled: boolean;\n    threshold?: number;\n  };\n  debounce?: {\n    search: number;\n    scroll: number;\n  };\n}",
            "properties": [
                {
                    "name": "caseSensitive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 134
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "enabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "wholeWord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 135
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectorKeyboardNavigation",
            "id": "interface-SelectorKeyboardNavigation-574699143c94b7409d10aad02630be7312e57253b1ebbe6eaa1948ada407b5297c8187e47aadf39bf82c22597956fd9235e1065903acbd7d7a895224e6d5a393",
            "file": "src/app/components/selector/selector.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport type SelectorMode = 'single' | 'multiple';\nexport type SelectorLayout = 'grid' | 'list';\nexport type SelectorSize = 'sm' | 'base' | 'lg';\nexport type SelectorVariant = 'default' | 'card' | 'minimal';\n\nexport interface SelectorOption {\n  id: string | number;\n  label: string;\n  value: any;\n  description?: string;\n  icon?: string | TemplateRef<any>;\n  badge?: string;\n  disabled?: boolean;\n  group?: string;\n  metadata?: { [key: string]: any };\n}\n\nexport interface SelectorGroup {\n  id: string;\n  label: string;\n  description?: string;\n  collapsed?: boolean;\n  options: SelectorOption[];\n}\n\nexport interface SelectorState {\n  selectedOptions: SelectorOption[];\n  selectedValues: any[];\n  searchTerm: string;\n  filteredOptions: SelectorOption[];\n  filteredGroups: SelectorGroup[];\n  isSearching: boolean;\n  hasError: boolean;\n  errorMessage?: string;\n}\n\nexport interface SelectorValidation {\n  required?: boolean;\n  minSelection?: number;\n  maxSelection?: number;\n  customValidator?: (selection: any[]) => string | null;\n}\n\nexport interface SelectorConfig {\n  mode: SelectorMode;\n  layout: SelectorLayout;\n  size: SelectorSize;\n  variant: SelectorVariant;\n  gridColumns?: number;\n  virtualScroll?: boolean;\n  searchable?: boolean;\n  clearable?: boolean;\n  groupable?: boolean;\n  validation?: SelectorValidation;\n  placeholder?: string;\n  searchPlaceholder?: string;\n  noResultsMessage?: string;\n  loadingMessage?: string;\n  maxHeight?: string;\n  className?: string;\n}\n\nexport interface SelectorEvents {\n  selectionChange: any | any[];\n  optionSelect: SelectorOption;\n  optionDeselect: SelectorOption;\n  searchChange: string;\n  groupToggle: string;\n  focus: FocusEvent;\n  blur: FocusEvent;\n}\n\nexport interface SelectorKeyboardNavigation {\n  selectedIndex: number;\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface SelectorAsyncConfig {\n  loadOptions?: (searchTerm: string) => Promise<SelectorOption[]>;\n  loadGroups?: (searchTerm: string) => Promise<SelectorGroup[]>;\n  debounceTime?: number;\n  minSearchLength?: number;\n}\n\nexport interface SelectorTheme {\n  colors: {\n    primary: string;\n    secondary: string;\n    success: string;\n    error: string;\n    warning: string;\n  };\n  spacing: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n  borderRadius: string;\n  shadows: {\n    sm: string;\n    md: string;\n    lg: string;\n  };\n}\n\nexport interface SelectorAccessibility {\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n  ariaLabelledBy?: string;\n  ariaMultiSelectable?: boolean;\n  ariaRequired?: boolean;\n  ariaInvalid?: boolean;\n  ariaActivedescendant?: string;\n  role?: string;\n}\n\nexport interface SelectorCustomization {\n  optionTemplate?: TemplateRef<any>;\n  groupHeaderTemplate?: TemplateRef<any>;\n  emptyStateTemplate?: TemplateRef<any>;\n  loadingTemplate?: TemplateRef<any>;\n  searchTemplate?: TemplateRef<any>;\n  selectedTemplate?: TemplateRef<any>;\n}\n\nexport interface SelectorHighlight {\n  enabled: boolean;\n  className?: string;\n  caseSensitive?: boolean;\n  wholeWord?: boolean;\n}\n\nexport interface SelectorPerformance {\n  virtualScrolling?: {\n    enabled: boolean;\n    itemHeight: number;\n    bufferSize?: number;\n  };\n  lazy?: {\n    enabled: boolean;\n    threshold?: number;\n  };\n  debounce?: {\n    search: number;\n    scroll: number;\n  };\n}",
            "properties": [
                {
                    "name": "focusedIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "isKeyboardActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "selectedIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectorOption",
            "id": "interface-SelectorOption-cd0fbf9dec1a28e6877900a934856f8fb0e3de03b24906b66acbdce503b1b409281a5fb9bab13acd619795aa8c15a6e4a04667d703f30268fcb39c39e6f7b155",
            "file": "src/app/components/selector/selector.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport interface SelectorOption {\n  id: string;\n  label: string;\n  value: any;\n  description?: string;\n  badge?: string;\n  disabled?: boolean;\n}\n\n@Component({\n  selector: 'app-selector',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SelectorComponent),\n      multi: true\n    }\n  ],\n  template: `\n    <div class=\"selector-wrapper\">\n      <!-- Label -->\n      <label *ngIf=\"label\" class=\"selector-label\">\n        {{ label }}\n        <span *ngIf=\"required\" class=\"required-asterisk\">*</span>\n      </label>\n      \n      <!-- Helper Text -->\n      <p *ngIf=\"helperText\" class=\"selector-helper\">{{ helperText }}</p>\n      \n      <!-- Single Select Dropdown -->\n      <div *ngIf=\"mode === 'single' && layout === 'dropdown'\" class=\"selector-dropdown\">\n        <select \n          [value]=\"selectedValue?.value || ''\"\n          (change)=\"onSingleSelect($event)\"\n          [disabled]=\"disabled\"\n          class=\"selector-select\">\n          <option value=\"\" disabled>{{ placeholder || 'Select an option...' }}</option>\n          <option \n            *ngFor=\"let option of options\" \n            [value]=\"option.value\"\n            [disabled]=\"option.disabled\">\n            {{ option.label }}\n            <span *ngIf=\"option.badge\"> ({{ option.badge }})</span>\n          </option>\n        </select>\n      </div>\n      \n      <!-- Grid Layout -->\n      <div *ngIf=\"layout === 'grid'\" class=\"selector-grid\" [class]=\"'columns-' + gridColumns\">\n        <div \n          *ngFor=\"let option of options\"\n          class=\"selector-option-card\"\n          [class]=\"getOptionClasses(option)\"\n          (click)=\"onOptionClick(option)\">\n          \n          <div class=\"option-content\">\n            <div class=\"option-header\">\n              <span class=\"option-label\">{{ option.label }}</span>\n              <span *ngIf=\"option.badge\" class=\"option-badge\">{{ option.badge }}</span>\n            </div>\n            <p *ngIf=\"option.description\" class=\"option-description\">{{ option.description }}</p>\n          </div>\n          \n          <!-- Selection indicator -->\n          <div class=\"selection-indicator\" *ngIf=\"isSelected(option)\">\n            <span class=\"checkmark\">✓</span>\n          </div>\n        </div>\n      </div>\n      \n      <!-- List Layout -->\n      <div *ngIf=\"layout === 'list'\" class=\"selector-list\">\n        <div \n          *ngFor=\"let option of options\"\n          class=\"selector-option-item\"\n          [class]=\"getOptionClasses(option)\"\n          (click)=\"onOptionClick(option)\">\n          \n          <div class=\"option-content\">\n            <span class=\"option-label\">{{ option.label }}</span>\n            <span *ngIf=\"option.badge\" class=\"option-badge\">{{ option.badge }}</span>\n            <p *ngIf=\"option.description\" class=\"option-description\">{{ option.description }}</p>\n          </div>\n          \n          <div class=\"selection-indicator\" *ngIf=\"isSelected(option)\">\n            <span class=\"checkmark\">✓</span>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Multiple Selection Display -->\n      <div *ngIf=\"mode === 'multiple' && selectedValues.length > 0\" class=\"selected-items\">\n        <span class=\"selected-count\">{{ selectedValues.length }} selected</span>\n        <div class=\"selected-tags\">\n          <span \n            *ngFor=\"let item of selectedValues\" \n            class=\"selected-tag\">\n            {{ item.label }}\n            <button class=\"tag-remove\" (click)=\"removeSelected(item)\">×</button>\n          </span>\n        </div>\n      </div>\n      \n      <!-- Error Message -->\n      <p *ngIf=\"errorMessage\" class=\"selector-error\">{{ errorMessage }}</p>\n    </div>\n  `,\n  styles: [`\n    .selector-wrapper {\n      width: 100%;\n    }\n    \n    .selector-label {\n      display: block;\n      font-size: 14px;\n      font-weight: 500;\n      color: #2a1f35;\n      margin-bottom: 8px;\n    }\n    \n    .required-asterisk {\n      color: #d92d20;\n      margin-left: 4px;\n    }\n    \n    .selector-helper {\n      font-size: 12px;\n      color: #6b5671;\n      margin: 0 0 12px 0;\n    }\n    \n    .selector-error {\n      font-size: 12px;\n      color: #d92d20;\n      margin: 8px 0 0 0;\n    }\n    \n    /* Dropdown Styles */\n    .selector-select {\n      width: 100%;\n      padding: 12px;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      font-size: 16px;\n      color: #2a1f35;\n      background: white;\n      appearance: none;\n      background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b5671' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e\");\n      background-position: right 12px center;\n      background-repeat: no-repeat;\n      background-size: 16px;\n    }\n    \n    .selector-select:focus {\n      outline: none;\n      border-color: #611F69;\n      box-shadow: 0 0 0 4px #ebd4ef;\n    }\n    \n    .selector-select:disabled {\n      background-color: #efebf2;\n      color: #a695b0;\n      cursor: not-allowed;\n    }\n    \n    /* Grid Layout */\n    .selector-grid {\n      display: grid;\n      gap: 16px;\n    }\n    \n    .selector-grid.columns-1 { grid-template-columns: 1fr; }\n    .selector-grid.columns-2 { grid-template-columns: repeat(2, 1fr); }\n    .selector-grid.columns-3 { grid-template-columns: repeat(3, 1fr); }\n    .selector-grid.columns-4 { grid-template-columns: repeat(4, 1fr); }\n    \n    .selector-option-card {\n      position: relative;\n      padding: 16px;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      background: white;\n      cursor: pointer;\n      transition: all 200ms ease;\n    }\n    \n    .selector-option-card:hover {\n      border-color: #611F69;\n      box-shadow: 0 2px 8px rgba(97, 31, 105, 0.1);\n    }\n    \n    .selector-option-card.selected {\n      border-color: #611F69;\n      background: #f7edf8;\n    }\n    \n    .selector-option-card.disabled {\n      background: #efebf2;\n      cursor: not-allowed;\n      opacity: 0.6;\n    }\n    \n    /* List Layout */\n    .selector-list {\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n    }\n    \n    .selector-option-item {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      padding: 12px 16px;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      background: white;\n      cursor: pointer;\n      transition: all 200ms ease;\n    }\n    \n    .selector-option-item:hover {\n      border-color: #611F69;\n      background: #f7edf8;\n    }\n    \n    .selector-option-item.selected {\n      border-color: #611F69;\n      background: #f7edf8;\n    }\n    \n    .selector-option-item.disabled {\n      background: #efebf2;\n      cursor: not-allowed;\n      opacity: 0.6;\n    }\n    \n    /* Option Content */\n    .option-content {\n      flex: 1;\n    }\n    \n    .option-header {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 4px;\n    }\n    \n    .option-label {\n      font-size: 16px;\n      font-weight: 500;\n      color: #2a1f35;\n    }\n    \n    .option-badge {\n      background: #611F69;\n      color: white;\n      font-size: 11px;\n      font-weight: 500;\n      padding: 2px 6px;\n      border-radius: 4px;\n      text-transform: uppercase;\n    }\n    \n    .option-description {\n      font-size: 14px;\n      color: #6b5671;\n      margin: 0;\n      line-height: 1.4;\n    }\n    \n    /* Selection Indicator */\n    .selection-indicator {\n      width: 24px;\n      height: 24px;\n      border-radius: 50%;\n      background: #611F69;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-shrink: 0;\n    }\n    \n    .checkmark {\n      color: white;\n      font-size: 14px;\n      font-weight: bold;\n    }\n    \n    /* Selected Items */\n    .selected-items {\n      margin-top: 12px;\n    }\n    \n    .selected-count {\n      font-size: 14px;\n      color: #6b5671;\n      margin-bottom: 8px;\n      display: block;\n    }\n    \n    .selected-tags {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 8px;\n    }\n    \n    .selected-tag {\n      display: flex;\n      align-items: center;\n      gap: 6px;\n      background: #f7edf8;\n      color: #611F69;\n      padding: 6px 10px;\n      border-radius: 16px;\n      font-size: 14px;\n      border: 1px solid #ebd4ef;\n    }\n    \n    .tag-remove {\n      background: none;\n      border: none;\n      color: #611F69;\n      cursor: pointer;\n      font-size: 16px;\n      padding: 0;\n      line-height: 1;\n    }\n    \n    .tag-remove:hover {\n      color: #d92d20;\n    }\n    \n    /* Responsive */\n    @media (max-width: 768px) {\n      .selector-grid.columns-3,\n      .selector-grid.columns-4 {\n        grid-template-columns: repeat(2, 1fr);\n      }\n      \n      .selector-grid.columns-2 {\n        grid-template-columns: 1fr;\n      }\n      \n      .option-label {\n        font-size: 14px;\n      }\n      \n      .option-description {\n        font-size: 12px;\n      }\n    }\n  `]\n})\nexport class SelectorComponent implements ControlValueAccessor {\n  @Input() options: SelectorOption[] = [];\n  @Input() mode: 'single' | 'multiple' = 'single';\n  @Input() layout: 'dropdown' | 'grid' | 'list' = 'dropdown';\n  @Input() gridColumns: number = 2;\n  @Input() variant: string = 'default';\n  @Input() size: string = 'base';\n  @Input() label?: string;\n  @Input() placeholder?: string;\n  @Input() helperText?: string;\n  @Input() errorMessage?: string;\n  @Input() required: boolean = false;\n  @Input() disabled: boolean = false;\n  @Input() searchable: boolean = false;\n  @Input() clearable: boolean = false;\n  @Input() maxSelection?: number;\n\n  @Output() selectionChange = new EventEmitter<any>();\n\n  selectedValue: SelectorOption | null = null;\n  selectedValues: SelectorOption[] = [];\n\n  private onChange = (value: any) => {};\n  private onTouched = () => {};\n\n  getOptionClasses(option: SelectorOption): string {\n    const classes = [];\n    if (this.isSelected(option)) classes.push('selected');\n    if (option.disabled) classes.push('disabled');\n    return classes.join(' ');\n  }\n\n  isSelected(option: SelectorOption): boolean {\n    if (this.mode === 'single') {\n      return this.selectedValue?.id === option.id;\n    } else {\n      return this.selectedValues.some(item => item.id === option.id);\n    }\n  }\n\n  onSingleSelect(event: Event): void {\n    const select = event.target as HTMLSelectElement;\n    const selectedOption = this.options.find(option => option.value === select.value);\n    \n    if (selectedOption) {\n      this.selectedValue = selectedOption;\n      this.onChange(selectedOption.value);\n      this.selectionChange.emit(selectedOption.value);\n    }\n  }\n\n  onOptionClick(option: SelectorOption): void {\n    if (option.disabled) return;\n\n    if (this.mode === 'single') {\n      this.selectedValue = option;\n      this.onChange(option.value);\n      this.selectionChange.emit(option.value);\n    } else {\n      if (this.isSelected(option)) {\n        this.selectedValues = this.selectedValues.filter(item => item.id !== option.id);\n      } else {\n        if (!this.maxSelection || this.selectedValues.length < this.maxSelection) {\n          this.selectedValues = [...this.selectedValues, option];\n        }\n      }\n      \n      const values = this.selectedValues.map(item => item.value);\n      this.onChange(values);\n      this.selectionChange.emit(values);\n    }\n  }\n\n  removeSelected(option: SelectorOption): void {\n    this.selectedValues = this.selectedValues.filter(item => item.id !== option.id);\n    const values = this.selectedValues.map(item => item.value);\n    this.onChange(values);\n    this.selectionChange.emit(values);\n  }\n\n  // ControlValueAccessor implementation\n  writeValue(value: any): void {\n    if (this.mode === 'single') {\n      this.selectedValue = this.options.find(option => option.value === value) || null;\n    } else {\n      if (Array.isArray(value)) {\n        this.selectedValues = this.options.filter(option => value.includes(option.value));\n      } else {\n        this.selectedValues = [];\n      }\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n}",
            "properties": [
                {
                    "name": "badge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectorOption",
            "id": "interface-SelectorOption-574699143c94b7409d10aad02630be7312e57253b1ebbe6eaa1948ada407b5297c8187e47aadf39bf82c22597956fd9235e1065903acbd7d7a895224e6d5a393-1",
            "file": "src/app/components/selector/selector.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport type SelectorMode = 'single' | 'multiple';\nexport type SelectorLayout = 'grid' | 'list';\nexport type SelectorSize = 'sm' | 'base' | 'lg';\nexport type SelectorVariant = 'default' | 'card' | 'minimal';\n\nexport interface SelectorOption {\n  id: string | number;\n  label: string;\n  value: any;\n  description?: string;\n  icon?: string | TemplateRef<any>;\n  badge?: string;\n  disabled?: boolean;\n  group?: string;\n  metadata?: { [key: string]: any };\n}\n\nexport interface SelectorGroup {\n  id: string;\n  label: string;\n  description?: string;\n  collapsed?: boolean;\n  options: SelectorOption[];\n}\n\nexport interface SelectorState {\n  selectedOptions: SelectorOption[];\n  selectedValues: any[];\n  searchTerm: string;\n  filteredOptions: SelectorOption[];\n  filteredGroups: SelectorGroup[];\n  isSearching: boolean;\n  hasError: boolean;\n  errorMessage?: string;\n}\n\nexport interface SelectorValidation {\n  required?: boolean;\n  minSelection?: number;\n  maxSelection?: number;\n  customValidator?: (selection: any[]) => string | null;\n}\n\nexport interface SelectorConfig {\n  mode: SelectorMode;\n  layout: SelectorLayout;\n  size: SelectorSize;\n  variant: SelectorVariant;\n  gridColumns?: number;\n  virtualScroll?: boolean;\n  searchable?: boolean;\n  clearable?: boolean;\n  groupable?: boolean;\n  validation?: SelectorValidation;\n  placeholder?: string;\n  searchPlaceholder?: string;\n  noResultsMessage?: string;\n  loadingMessage?: string;\n  maxHeight?: string;\n  className?: string;\n}\n\nexport interface SelectorEvents {\n  selectionChange: any | any[];\n  optionSelect: SelectorOption;\n  optionDeselect: SelectorOption;\n  searchChange: string;\n  groupToggle: string;\n  focus: FocusEvent;\n  blur: FocusEvent;\n}\n\nexport interface SelectorKeyboardNavigation {\n  selectedIndex: number;\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface SelectorAsyncConfig {\n  loadOptions?: (searchTerm: string) => Promise<SelectorOption[]>;\n  loadGroups?: (searchTerm: string) => Promise<SelectorGroup[]>;\n  debounceTime?: number;\n  minSearchLength?: number;\n}\n\nexport interface SelectorTheme {\n  colors: {\n    primary: string;\n    secondary: string;\n    success: string;\n    error: string;\n    warning: string;\n  };\n  spacing: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n  borderRadius: string;\n  shadows: {\n    sm: string;\n    md: string;\n    lg: string;\n  };\n}\n\nexport interface SelectorAccessibility {\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n  ariaLabelledBy?: string;\n  ariaMultiSelectable?: boolean;\n  ariaRequired?: boolean;\n  ariaInvalid?: boolean;\n  ariaActivedescendant?: string;\n  role?: string;\n}\n\nexport interface SelectorCustomization {\n  optionTemplate?: TemplateRef<any>;\n  groupHeaderTemplate?: TemplateRef<any>;\n  emptyStateTemplate?: TemplateRef<any>;\n  loadingTemplate?: TemplateRef<any>;\n  searchTemplate?: TemplateRef<any>;\n  selectedTemplate?: TemplateRef<any>;\n}\n\nexport interface SelectorHighlight {\n  enabled: boolean;\n  className?: string;\n  caseSensitive?: boolean;\n  wholeWord?: boolean;\n}\n\nexport interface SelectorPerformance {\n  virtualScrolling?: {\n    enabled: boolean;\n    itemHeight: number;\n    bufferSize?: number;\n  };\n  lazy?: {\n    enabled: boolean;\n    threshold?: number;\n  };\n  debounce?: {\n    search: number;\n    scroll: number;\n  };\n}",
            "properties": [
                {
                    "name": "badge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | TemplateRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SelectorOption-1"
        },
        {
            "name": "SelectorPerformance",
            "id": "interface-SelectorPerformance-574699143c94b7409d10aad02630be7312e57253b1ebbe6eaa1948ada407b5297c8187e47aadf39bf82c22597956fd9235e1065903acbd7d7a895224e6d5a393",
            "file": "src/app/components/selector/selector.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport type SelectorMode = 'single' | 'multiple';\nexport type SelectorLayout = 'grid' | 'list';\nexport type SelectorSize = 'sm' | 'base' | 'lg';\nexport type SelectorVariant = 'default' | 'card' | 'minimal';\n\nexport interface SelectorOption {\n  id: string | number;\n  label: string;\n  value: any;\n  description?: string;\n  icon?: string | TemplateRef<any>;\n  badge?: string;\n  disabled?: boolean;\n  group?: string;\n  metadata?: { [key: string]: any };\n}\n\nexport interface SelectorGroup {\n  id: string;\n  label: string;\n  description?: string;\n  collapsed?: boolean;\n  options: SelectorOption[];\n}\n\nexport interface SelectorState {\n  selectedOptions: SelectorOption[];\n  selectedValues: any[];\n  searchTerm: string;\n  filteredOptions: SelectorOption[];\n  filteredGroups: SelectorGroup[];\n  isSearching: boolean;\n  hasError: boolean;\n  errorMessage?: string;\n}\n\nexport interface SelectorValidation {\n  required?: boolean;\n  minSelection?: number;\n  maxSelection?: number;\n  customValidator?: (selection: any[]) => string | null;\n}\n\nexport interface SelectorConfig {\n  mode: SelectorMode;\n  layout: SelectorLayout;\n  size: SelectorSize;\n  variant: SelectorVariant;\n  gridColumns?: number;\n  virtualScroll?: boolean;\n  searchable?: boolean;\n  clearable?: boolean;\n  groupable?: boolean;\n  validation?: SelectorValidation;\n  placeholder?: string;\n  searchPlaceholder?: string;\n  noResultsMessage?: string;\n  loadingMessage?: string;\n  maxHeight?: string;\n  className?: string;\n}\n\nexport interface SelectorEvents {\n  selectionChange: any | any[];\n  optionSelect: SelectorOption;\n  optionDeselect: SelectorOption;\n  searchChange: string;\n  groupToggle: string;\n  focus: FocusEvent;\n  blur: FocusEvent;\n}\n\nexport interface SelectorKeyboardNavigation {\n  selectedIndex: number;\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface SelectorAsyncConfig {\n  loadOptions?: (searchTerm: string) => Promise<SelectorOption[]>;\n  loadGroups?: (searchTerm: string) => Promise<SelectorGroup[]>;\n  debounceTime?: number;\n  minSearchLength?: number;\n}\n\nexport interface SelectorTheme {\n  colors: {\n    primary: string;\n    secondary: string;\n    success: string;\n    error: string;\n    warning: string;\n  };\n  spacing: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n  borderRadius: string;\n  shadows: {\n    sm: string;\n    md: string;\n    lg: string;\n  };\n}\n\nexport interface SelectorAccessibility {\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n  ariaLabelledBy?: string;\n  ariaMultiSelectable?: boolean;\n  ariaRequired?: boolean;\n  ariaInvalid?: boolean;\n  ariaActivedescendant?: string;\n  role?: string;\n}\n\nexport interface SelectorCustomization {\n  optionTemplate?: TemplateRef<any>;\n  groupHeaderTemplate?: TemplateRef<any>;\n  emptyStateTemplate?: TemplateRef<any>;\n  loadingTemplate?: TemplateRef<any>;\n  searchTemplate?: TemplateRef<any>;\n  selectedTemplate?: TemplateRef<any>;\n}\n\nexport interface SelectorHighlight {\n  enabled: boolean;\n  className?: string;\n  caseSensitive?: boolean;\n  wholeWord?: boolean;\n}\n\nexport interface SelectorPerformance {\n  virtualScrolling?: {\n    enabled: boolean;\n    itemHeight: number;\n    bufferSize?: number;\n  };\n  lazy?: {\n    enabled: boolean;\n    threshold?: number;\n  };\n  debounce?: {\n    search: number;\n    scroll: number;\n  };\n}",
            "properties": [
                {
                    "name": "debounce",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 148
                },
                {
                    "name": "lazy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 144
                },
                {
                    "name": "virtualScrolling",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 139
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectorState",
            "id": "interface-SelectorState-574699143c94b7409d10aad02630be7312e57253b1ebbe6eaa1948ada407b5297c8187e47aadf39bf82c22597956fd9235e1065903acbd7d7a895224e6d5a393",
            "file": "src/app/components/selector/selector.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport type SelectorMode = 'single' | 'multiple';\nexport type SelectorLayout = 'grid' | 'list';\nexport type SelectorSize = 'sm' | 'base' | 'lg';\nexport type SelectorVariant = 'default' | 'card' | 'minimal';\n\nexport interface SelectorOption {\n  id: string | number;\n  label: string;\n  value: any;\n  description?: string;\n  icon?: string | TemplateRef<any>;\n  badge?: string;\n  disabled?: boolean;\n  group?: string;\n  metadata?: { [key: string]: any };\n}\n\nexport interface SelectorGroup {\n  id: string;\n  label: string;\n  description?: string;\n  collapsed?: boolean;\n  options: SelectorOption[];\n}\n\nexport interface SelectorState {\n  selectedOptions: SelectorOption[];\n  selectedValues: any[];\n  searchTerm: string;\n  filteredOptions: SelectorOption[];\n  filteredGroups: SelectorGroup[];\n  isSearching: boolean;\n  hasError: boolean;\n  errorMessage?: string;\n}\n\nexport interface SelectorValidation {\n  required?: boolean;\n  minSelection?: number;\n  maxSelection?: number;\n  customValidator?: (selection: any[]) => string | null;\n}\n\nexport interface SelectorConfig {\n  mode: SelectorMode;\n  layout: SelectorLayout;\n  size: SelectorSize;\n  variant: SelectorVariant;\n  gridColumns?: number;\n  virtualScroll?: boolean;\n  searchable?: boolean;\n  clearable?: boolean;\n  groupable?: boolean;\n  validation?: SelectorValidation;\n  placeholder?: string;\n  searchPlaceholder?: string;\n  noResultsMessage?: string;\n  loadingMessage?: string;\n  maxHeight?: string;\n  className?: string;\n}\n\nexport interface SelectorEvents {\n  selectionChange: any | any[];\n  optionSelect: SelectorOption;\n  optionDeselect: SelectorOption;\n  searchChange: string;\n  groupToggle: string;\n  focus: FocusEvent;\n  blur: FocusEvent;\n}\n\nexport interface SelectorKeyboardNavigation {\n  selectedIndex: number;\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface SelectorAsyncConfig {\n  loadOptions?: (searchTerm: string) => Promise<SelectorOption[]>;\n  loadGroups?: (searchTerm: string) => Promise<SelectorGroup[]>;\n  debounceTime?: number;\n  minSearchLength?: number;\n}\n\nexport interface SelectorTheme {\n  colors: {\n    primary: string;\n    secondary: string;\n    success: string;\n    error: string;\n    warning: string;\n  };\n  spacing: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n  borderRadius: string;\n  shadows: {\n    sm: string;\n    md: string;\n    lg: string;\n  };\n}\n\nexport interface SelectorAccessibility {\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n  ariaLabelledBy?: string;\n  ariaMultiSelectable?: boolean;\n  ariaRequired?: boolean;\n  ariaInvalid?: boolean;\n  ariaActivedescendant?: string;\n  role?: string;\n}\n\nexport interface SelectorCustomization {\n  optionTemplate?: TemplateRef<any>;\n  groupHeaderTemplate?: TemplateRef<any>;\n  emptyStateTemplate?: TemplateRef<any>;\n  loadingTemplate?: TemplateRef<any>;\n  searchTemplate?: TemplateRef<any>;\n  selectedTemplate?: TemplateRef<any>;\n}\n\nexport interface SelectorHighlight {\n  enabled: boolean;\n  className?: string;\n  caseSensitive?: boolean;\n  wholeWord?: boolean;\n}\n\nexport interface SelectorPerformance {\n  virtualScrolling?: {\n    enabled: boolean;\n    itemHeight: number;\n    bufferSize?: number;\n  };\n  lazy?: {\n    enabled: boolean;\n    threshold?: number;\n  };\n  debounce?: {\n    search: number;\n    scroll: number;\n  };\n}",
            "properties": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "filteredGroups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectorGroup[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "filteredOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectorOption[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "hasError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "isSearching",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "searchTerm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "selectedOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectorOption[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "selectedValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectorTheme",
            "id": "interface-SelectorTheme-574699143c94b7409d10aad02630be7312e57253b1ebbe6eaa1948ada407b5297c8187e47aadf39bf82c22597956fd9235e1065903acbd7d7a895224e6d5a393",
            "file": "src/app/components/selector/selector.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport type SelectorMode = 'single' | 'multiple';\nexport type SelectorLayout = 'grid' | 'list';\nexport type SelectorSize = 'sm' | 'base' | 'lg';\nexport type SelectorVariant = 'default' | 'card' | 'minimal';\n\nexport interface SelectorOption {\n  id: string | number;\n  label: string;\n  value: any;\n  description?: string;\n  icon?: string | TemplateRef<any>;\n  badge?: string;\n  disabled?: boolean;\n  group?: string;\n  metadata?: { [key: string]: any };\n}\n\nexport interface SelectorGroup {\n  id: string;\n  label: string;\n  description?: string;\n  collapsed?: boolean;\n  options: SelectorOption[];\n}\n\nexport interface SelectorState {\n  selectedOptions: SelectorOption[];\n  selectedValues: any[];\n  searchTerm: string;\n  filteredOptions: SelectorOption[];\n  filteredGroups: SelectorGroup[];\n  isSearching: boolean;\n  hasError: boolean;\n  errorMessage?: string;\n}\n\nexport interface SelectorValidation {\n  required?: boolean;\n  minSelection?: number;\n  maxSelection?: number;\n  customValidator?: (selection: any[]) => string | null;\n}\n\nexport interface SelectorConfig {\n  mode: SelectorMode;\n  layout: SelectorLayout;\n  size: SelectorSize;\n  variant: SelectorVariant;\n  gridColumns?: number;\n  virtualScroll?: boolean;\n  searchable?: boolean;\n  clearable?: boolean;\n  groupable?: boolean;\n  validation?: SelectorValidation;\n  placeholder?: string;\n  searchPlaceholder?: string;\n  noResultsMessage?: string;\n  loadingMessage?: string;\n  maxHeight?: string;\n  className?: string;\n}\n\nexport interface SelectorEvents {\n  selectionChange: any | any[];\n  optionSelect: SelectorOption;\n  optionDeselect: SelectorOption;\n  searchChange: string;\n  groupToggle: string;\n  focus: FocusEvent;\n  blur: FocusEvent;\n}\n\nexport interface SelectorKeyboardNavigation {\n  selectedIndex: number;\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface SelectorAsyncConfig {\n  loadOptions?: (searchTerm: string) => Promise<SelectorOption[]>;\n  loadGroups?: (searchTerm: string) => Promise<SelectorGroup[]>;\n  debounceTime?: number;\n  minSearchLength?: number;\n}\n\nexport interface SelectorTheme {\n  colors: {\n    primary: string;\n    secondary: string;\n    success: string;\n    error: string;\n    warning: string;\n  };\n  spacing: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n  borderRadius: string;\n  shadows: {\n    sm: string;\n    md: string;\n    lg: string;\n  };\n}\n\nexport interface SelectorAccessibility {\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n  ariaLabelledBy?: string;\n  ariaMultiSelectable?: boolean;\n  ariaRequired?: boolean;\n  ariaInvalid?: boolean;\n  ariaActivedescendant?: string;\n  role?: string;\n}\n\nexport interface SelectorCustomization {\n  optionTemplate?: TemplateRef<any>;\n  groupHeaderTemplate?: TemplateRef<any>;\n  emptyStateTemplate?: TemplateRef<any>;\n  loadingTemplate?: TemplateRef<any>;\n  searchTemplate?: TemplateRef<any>;\n  selectedTemplate?: TemplateRef<any>;\n}\n\nexport interface SelectorHighlight {\n  enabled: boolean;\n  className?: string;\n  caseSensitive?: boolean;\n  wholeWord?: boolean;\n}\n\nexport interface SelectorPerformance {\n  virtualScrolling?: {\n    enabled: boolean;\n    itemHeight: number;\n    bufferSize?: number;\n  };\n  lazy?: {\n    enabled: boolean;\n    threshold?: number;\n  };\n  debounce?: {\n    search: number;\n    scroll: number;\n  };\n}",
            "properties": [
                {
                    "name": "borderRadius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "colors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "shadows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "spacing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectorValidation",
            "id": "interface-SelectorValidation-574699143c94b7409d10aad02630be7312e57253b1ebbe6eaa1948ada407b5297c8187e47aadf39bf82c22597956fd9235e1065903acbd7d7a895224e6d5a393",
            "file": "src/app/components/selector/selector.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport type SelectorMode = 'single' | 'multiple';\nexport type SelectorLayout = 'grid' | 'list';\nexport type SelectorSize = 'sm' | 'base' | 'lg';\nexport type SelectorVariant = 'default' | 'card' | 'minimal';\n\nexport interface SelectorOption {\n  id: string | number;\n  label: string;\n  value: any;\n  description?: string;\n  icon?: string | TemplateRef<any>;\n  badge?: string;\n  disabled?: boolean;\n  group?: string;\n  metadata?: { [key: string]: any };\n}\n\nexport interface SelectorGroup {\n  id: string;\n  label: string;\n  description?: string;\n  collapsed?: boolean;\n  options: SelectorOption[];\n}\n\nexport interface SelectorState {\n  selectedOptions: SelectorOption[];\n  selectedValues: any[];\n  searchTerm: string;\n  filteredOptions: SelectorOption[];\n  filteredGroups: SelectorGroup[];\n  isSearching: boolean;\n  hasError: boolean;\n  errorMessage?: string;\n}\n\nexport interface SelectorValidation {\n  required?: boolean;\n  minSelection?: number;\n  maxSelection?: number;\n  customValidator?: (selection: any[]) => string | null;\n}\n\nexport interface SelectorConfig {\n  mode: SelectorMode;\n  layout: SelectorLayout;\n  size: SelectorSize;\n  variant: SelectorVariant;\n  gridColumns?: number;\n  virtualScroll?: boolean;\n  searchable?: boolean;\n  clearable?: boolean;\n  groupable?: boolean;\n  validation?: SelectorValidation;\n  placeholder?: string;\n  searchPlaceholder?: string;\n  noResultsMessage?: string;\n  loadingMessage?: string;\n  maxHeight?: string;\n  className?: string;\n}\n\nexport interface SelectorEvents {\n  selectionChange: any | any[];\n  optionSelect: SelectorOption;\n  optionDeselect: SelectorOption;\n  searchChange: string;\n  groupToggle: string;\n  focus: FocusEvent;\n  blur: FocusEvent;\n}\n\nexport interface SelectorKeyboardNavigation {\n  selectedIndex: number;\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface SelectorAsyncConfig {\n  loadOptions?: (searchTerm: string) => Promise<SelectorOption[]>;\n  loadGroups?: (searchTerm: string) => Promise<SelectorGroup[]>;\n  debounceTime?: number;\n  minSearchLength?: number;\n}\n\nexport interface SelectorTheme {\n  colors: {\n    primary: string;\n    secondary: string;\n    success: string;\n    error: string;\n    warning: string;\n  };\n  spacing: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n  borderRadius: string;\n  shadows: {\n    sm: string;\n    md: string;\n    lg: string;\n  };\n}\n\nexport interface SelectorAccessibility {\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n  ariaLabelledBy?: string;\n  ariaMultiSelectable?: boolean;\n  ariaRequired?: boolean;\n  ariaInvalid?: boolean;\n  ariaActivedescendant?: string;\n  role?: string;\n}\n\nexport interface SelectorCustomization {\n  optionTemplate?: TemplateRef<any>;\n  groupHeaderTemplate?: TemplateRef<any>;\n  emptyStateTemplate?: TemplateRef<any>;\n  loadingTemplate?: TemplateRef<any>;\n  searchTemplate?: TemplateRef<any>;\n  selectedTemplate?: TemplateRef<any>;\n}\n\nexport interface SelectorHighlight {\n  enabled: boolean;\n  className?: string;\n  caseSensitive?: boolean;\n  wholeWord?: boolean;\n}\n\nexport interface SelectorPerformance {\n  virtualScrolling?: {\n    enabled: boolean;\n    itemHeight: number;\n    bufferSize?: number;\n  };\n  lazy?: {\n    enabled: boolean;\n    threshold?: number;\n  };\n  debounce?: {\n    search: number;\n    scroll: number;\n  };\n}",
            "properties": [
                {
                    "name": "customValidator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "maxSelection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "minSelection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "StepClickEvent",
            "id": "interface-StepClickEvent-499ad3205f830172a327512574076ef9977667c9786733a5c706cf59141c9dd70eaead29c2a18c3cba4f28e08a76440a9120438c7d32676146696c76d4f2bf01",
            "file": "src/app/components/progress-steps/progress-steps.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StepConfig {\n  id: string;\n  label: string;\n  description?: string;\n  icon?: string;\n  disabled?: boolean;\n  optional?: boolean;\n  completed?: boolean;\n  error?: boolean;\n  href?: string;\n  clickable?: boolean;\n}\n\nexport interface ProgressStepsConfig {\n  steps: StepConfig[];\n  currentStep: number;\n  allowNavigation?: boolean;\n  showLabels?: boolean;\n  showDescriptions?: boolean;\n  orientation?: 'horizontal' | 'vertical';\n  variant?: 'default' | 'compact' | 'minimal';\n  size?: 'small' | 'medium' | 'large';\n}\n\nexport interface StepClickEvent {\n  step: StepConfig;\n  index: number;\n  previousIndex: number;\n}\n\nexport type StepState = 'pending' | 'active' | 'completed' | 'error' | 'disabled' | 'optional';\nexport type StepOrientation = 'horizontal' | 'vertical';\nexport type StepVariant = 'default' | 'compact' | 'minimal';\nexport type StepSize = 'small' | 'medium' | 'large';",
            "properties": [
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "previousIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "step",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StepConfig",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "StepConfig",
            "id": "interface-StepConfig-499ad3205f830172a327512574076ef9977667c9786733a5c706cf59141c9dd70eaead29c2a18c3cba4f28e08a76440a9120438c7d32676146696c76d4f2bf01",
            "file": "src/app/components/progress-steps/progress-steps.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StepConfig {\n  id: string;\n  label: string;\n  description?: string;\n  icon?: string;\n  disabled?: boolean;\n  optional?: boolean;\n  completed?: boolean;\n  error?: boolean;\n  href?: string;\n  clickable?: boolean;\n}\n\nexport interface ProgressStepsConfig {\n  steps: StepConfig[];\n  currentStep: number;\n  allowNavigation?: boolean;\n  showLabels?: boolean;\n  showDescriptions?: boolean;\n  orientation?: 'horizontal' | 'vertical';\n  variant?: 'default' | 'compact' | 'minimal';\n  size?: 'small' | 'medium' | 'large';\n}\n\nexport interface StepClickEvent {\n  step: StepConfig;\n  index: number;\n  previousIndex: number;\n}\n\nexport type StepState = 'pending' | 'active' | 'completed' | 'error' | 'disabled' | 'optional';\nexport type StepOrientation = 'horizontal' | 'vertical';\nexport type StepVariant = 'default' | 'compact' | 'minimal';\nexport type StepSize = 'small' | 'medium' | 'large';",
            "properties": [
                {
                    "name": "clickable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "completed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "optional",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TabAccessibility",
            "id": "interface-TabAccessibility-504fa69cd593ccf092462a80b7de0dd80967c656aebc42cb554dbbc03ddf2424ea329005f3a6bad137e865ae61811ad570f6a00c24664987c2ba28cd584b5d34",
            "file": "src/app/components/tab/tab.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TabItem {\n  /**\n   * Unique identifier for the tab\n   */\n  id: string;\n  \n  /**\n   * Display label for the tab\n   */\n  label: string;\n  \n  /**\n   * Optional icon (can be any template reference or string class)\n   */\n  icon?: any;\n  \n  /**\n   * Content to display when tab is active\n   */\n  content?: any;\n  \n  /**\n   * Disable this specific tab\n   */\n  disabled?: boolean;\n}\n\nexport type TabSize = 'small' | 'medium' | 'large';\nexport type TabVariant = 'line' | 'enclosed' | 'soft-rounded' | 'solid-rounded';\nexport type TabOrientation = 'horizontal' | 'vertical';\nexport type TabAlignment = 'start' | 'center' | 'end' | 'stretch';\n\nexport interface TabConfig {\n  /**\n   * Array of tab items\n   */\n  tabs: TabItem[];\n  \n  /**\n   * Index of the initially active tab\n   * @default 0\n   */\n  defaultActiveTab?: number;\n  \n  /**\n   * Visual variant of the tabs\n   * @default 'line'\n   */\n  variant?: TabVariant;\n  \n  /**\n   * Size of the tabs\n   * @default 'medium'\n   */\n  size?: TabSize;\n  \n  /**\n   * Orientation of the tabs\n   * @default 'horizontal'\n   */\n  orientation?: TabOrientation;\n  \n  /**\n   * Alignment of the tabs\n   * @default 'start'\n   */\n  alignment?: TabAlignment;\n  \n  /**\n   * Whether to lazy load tab content\n   * @default false\n   */\n  lazyMount?: boolean;\n  \n  /**\n   * Whether to keep tab content alive when switching\n   * @default false\n   */\n  keepAlive?: boolean;\n  \n  /**\n   * Whether tabs should be scrollable\n   * @default false\n   */\n  scrollable?: boolean;\n  \n  /**\n   * Whether to animate tab transitions\n   * @default true\n   */\n  animated?: boolean;\n  \n  /**\n   * ARIA label for the tab list\n   */\n  ariaLabel?: string;\n  \n  /**\n   * ARIA labelledby for the tab list\n   */\n  ariaLabelledBy?: string;\n  \n  /**\n   * Additional CSS class names\n   */\n  className?: string;\n  \n  /**\n   * Additional CSS class names for tab list\n   */\n  tabListClassName?: string;\n  \n  /**\n   * Additional CSS class names for tab panels\n   */\n  tabPanelClassName?: string;\n}\n\nexport interface TabState {\n  activeTab: number;\n  previousTab: number;\n  isAnimating: boolean;\n  mountedTabs: Set<number>;\n}\n\nexport interface TabKeyboardNavigation {\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface TabAccessibility {\n  tabListId: string;\n  tabPrefix: string;\n  panelPrefix: string;\n  ariaLabel?: string;\n  ariaLabelledBy?: string;\n}\n\nexport interface TabEvents {\n  tabChange: { index: number; tabId: string; previousIndex: number };\n  tabClick: { index: number; tabId: string; event: Event };\n  tabFocus: { index: number; tabId: string; event: FocusEvent };\n  tabBlur: { index: number; tabId: string; event: FocusEvent };\n  tabKeyDown: { index: number; tabId: string; event: KeyboardEvent };\n}\n\nexport interface TabAnimationConfig {\n  enabled: boolean;\n  duration: number;\n  easing: string;\n  fadeIn: boolean;\n  slideTransition: boolean;\n}\n\nexport interface TabScrollConfig {\n  enabled: boolean;\n  showButtons: boolean;\n  buttonSize: number;\n  scrollAmount: number;\n  autoHide: boolean;\n}\n\nexport interface TabCustomization {\n  showIndicator: boolean;\n  indicatorColor?: string;\n  indicatorHeight?: number;\n  tabSpacing?: number;\n  contentPadding?: string;\n  borderRadius?: string;\n}\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "ariaLabelledBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 136
                },
                {
                    "name": "panelPrefix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 134
                },
                {
                    "name": "tabListId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "tabPrefix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 133
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TabAnimationConfig",
            "id": "interface-TabAnimationConfig-504fa69cd593ccf092462a80b7de0dd80967c656aebc42cb554dbbc03ddf2424ea329005f3a6bad137e865ae61811ad570f6a00c24664987c2ba28cd584b5d34",
            "file": "src/app/components/tab/tab.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TabItem {\n  /**\n   * Unique identifier for the tab\n   */\n  id: string;\n  \n  /**\n   * Display label for the tab\n   */\n  label: string;\n  \n  /**\n   * Optional icon (can be any template reference or string class)\n   */\n  icon?: any;\n  \n  /**\n   * Content to display when tab is active\n   */\n  content?: any;\n  \n  /**\n   * Disable this specific tab\n   */\n  disabled?: boolean;\n}\n\nexport type TabSize = 'small' | 'medium' | 'large';\nexport type TabVariant = 'line' | 'enclosed' | 'soft-rounded' | 'solid-rounded';\nexport type TabOrientation = 'horizontal' | 'vertical';\nexport type TabAlignment = 'start' | 'center' | 'end' | 'stretch';\n\nexport interface TabConfig {\n  /**\n   * Array of tab items\n   */\n  tabs: TabItem[];\n  \n  /**\n   * Index of the initially active tab\n   * @default 0\n   */\n  defaultActiveTab?: number;\n  \n  /**\n   * Visual variant of the tabs\n   * @default 'line'\n   */\n  variant?: TabVariant;\n  \n  /**\n   * Size of the tabs\n   * @default 'medium'\n   */\n  size?: TabSize;\n  \n  /**\n   * Orientation of the tabs\n   * @default 'horizontal'\n   */\n  orientation?: TabOrientation;\n  \n  /**\n   * Alignment of the tabs\n   * @default 'start'\n   */\n  alignment?: TabAlignment;\n  \n  /**\n   * Whether to lazy load tab content\n   * @default false\n   */\n  lazyMount?: boolean;\n  \n  /**\n   * Whether to keep tab content alive when switching\n   * @default false\n   */\n  keepAlive?: boolean;\n  \n  /**\n   * Whether tabs should be scrollable\n   * @default false\n   */\n  scrollable?: boolean;\n  \n  /**\n   * Whether to animate tab transitions\n   * @default true\n   */\n  animated?: boolean;\n  \n  /**\n   * ARIA label for the tab list\n   */\n  ariaLabel?: string;\n  \n  /**\n   * ARIA labelledby for the tab list\n   */\n  ariaLabelledBy?: string;\n  \n  /**\n   * Additional CSS class names\n   */\n  className?: string;\n  \n  /**\n   * Additional CSS class names for tab list\n   */\n  tabListClassName?: string;\n  \n  /**\n   * Additional CSS class names for tab panels\n   */\n  tabPanelClassName?: string;\n}\n\nexport interface TabState {\n  activeTab: number;\n  previousTab: number;\n  isAnimating: boolean;\n  mountedTabs: Set<number>;\n}\n\nexport interface TabKeyboardNavigation {\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface TabAccessibility {\n  tabListId: string;\n  tabPrefix: string;\n  panelPrefix: string;\n  ariaLabel?: string;\n  ariaLabelledBy?: string;\n}\n\nexport interface TabEvents {\n  tabChange: { index: number; tabId: string; previousIndex: number };\n  tabClick: { index: number; tabId: string; event: Event };\n  tabFocus: { index: number; tabId: string; event: FocusEvent };\n  tabBlur: { index: number; tabId: string; event: FocusEvent };\n  tabKeyDown: { index: number; tabId: string; event: KeyboardEvent };\n}\n\nexport interface TabAnimationConfig {\n  enabled: boolean;\n  duration: number;\n  easing: string;\n  fadeIn: boolean;\n  slideTransition: boolean;\n}\n\nexport interface TabScrollConfig {\n  enabled: boolean;\n  showButtons: boolean;\n  buttonSize: number;\n  scrollAmount: number;\n  autoHide: boolean;\n}\n\nexport interface TabCustomization {\n  showIndicator: boolean;\n  indicatorColor?: string;\n  indicatorHeight?: number;\n  tabSpacing?: number;\n  contentPadding?: string;\n  borderRadius?: string;\n}\n",
            "properties": [
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 149
                },
                {
                    "name": "easing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 150
                },
                {
                    "name": "enabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 148
                },
                {
                    "name": "fadeIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 151
                },
                {
                    "name": "slideTransition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 152
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TabConfig",
            "id": "interface-TabConfig-504fa69cd593ccf092462a80b7de0dd80967c656aebc42cb554dbbc03ddf2424ea329005f3a6bad137e865ae61811ad570f6a00c24664987c2ba28cd584b5d34",
            "file": "src/app/components/tab/tab.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TabItem {\n  /**\n   * Unique identifier for the tab\n   */\n  id: string;\n  \n  /**\n   * Display label for the tab\n   */\n  label: string;\n  \n  /**\n   * Optional icon (can be any template reference or string class)\n   */\n  icon?: any;\n  \n  /**\n   * Content to display when tab is active\n   */\n  content?: any;\n  \n  /**\n   * Disable this specific tab\n   */\n  disabled?: boolean;\n}\n\nexport type TabSize = 'small' | 'medium' | 'large';\nexport type TabVariant = 'line' | 'enclosed' | 'soft-rounded' | 'solid-rounded';\nexport type TabOrientation = 'horizontal' | 'vertical';\nexport type TabAlignment = 'start' | 'center' | 'end' | 'stretch';\n\nexport interface TabConfig {\n  /**\n   * Array of tab items\n   */\n  tabs: TabItem[];\n  \n  /**\n   * Index of the initially active tab\n   * @default 0\n   */\n  defaultActiveTab?: number;\n  \n  /**\n   * Visual variant of the tabs\n   * @default 'line'\n   */\n  variant?: TabVariant;\n  \n  /**\n   * Size of the tabs\n   * @default 'medium'\n   */\n  size?: TabSize;\n  \n  /**\n   * Orientation of the tabs\n   * @default 'horizontal'\n   */\n  orientation?: TabOrientation;\n  \n  /**\n   * Alignment of the tabs\n   * @default 'start'\n   */\n  alignment?: TabAlignment;\n  \n  /**\n   * Whether to lazy load tab content\n   * @default false\n   */\n  lazyMount?: boolean;\n  \n  /**\n   * Whether to keep tab content alive when switching\n   * @default false\n   */\n  keepAlive?: boolean;\n  \n  /**\n   * Whether tabs should be scrollable\n   * @default false\n   */\n  scrollable?: boolean;\n  \n  /**\n   * Whether to animate tab transitions\n   * @default true\n   */\n  animated?: boolean;\n  \n  /**\n   * ARIA label for the tab list\n   */\n  ariaLabel?: string;\n  \n  /**\n   * ARIA labelledby for the tab list\n   */\n  ariaLabelledBy?: string;\n  \n  /**\n   * Additional CSS class names\n   */\n  className?: string;\n  \n  /**\n   * Additional CSS class names for tab list\n   */\n  tabListClassName?: string;\n  \n  /**\n   * Additional CSS class names for tab panels\n   */\n  tabPanelClassName?: string;\n}\n\nexport interface TabState {\n  activeTab: number;\n  previousTab: number;\n  isAnimating: boolean;\n  mountedTabs: Set<number>;\n}\n\nexport interface TabKeyboardNavigation {\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface TabAccessibility {\n  tabListId: string;\n  tabPrefix: string;\n  panelPrefix: string;\n  ariaLabel?: string;\n  ariaLabelledBy?: string;\n}\n\nexport interface TabEvents {\n  tabChange: { index: number; tabId: string; previousIndex: number };\n  tabClick: { index: number; tabId: string; event: Event };\n  tabFocus: { index: number; tabId: string; event: FocusEvent };\n  tabBlur: { index: number; tabId: string; event: FocusEvent };\n  tabKeyDown: { index: number; tabId: string; event: KeyboardEvent };\n}\n\nexport interface TabAnimationConfig {\n  enabled: boolean;\n  duration: number;\n  easing: string;\n  fadeIn: boolean;\n  slideTransition: boolean;\n}\n\nexport interface TabScrollConfig {\n  enabled: boolean;\n  showButtons: boolean;\n  buttonSize: number;\n  scrollAmount: number;\n  autoHide: boolean;\n}\n\nexport interface TabCustomization {\n  showIndicator: boolean;\n  indicatorColor?: string;\n  indicatorHeight?: number;\n  tabSpacing?: number;\n  contentPadding?: string;\n  borderRadius?: string;\n}\n",
            "properties": [
                {
                    "name": "alignment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabAlignment",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Alignment of the tabs</p>\n",
                    "line": 67,
                    "rawdescription": "\n\nAlignment of the tabs\n",
                    "jsdoctags": [
                        {
                            "pos": 1147,
                            "end": 1167,
                            "kind": 327,
                            "id": 0,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 1148,
                                "end": 1155,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;start&#39;</p>\n"
                        }
                    ]
                },
                {
                    "name": "animated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Whether to animate tab transitions</p>\n",
                    "line": 91,
                    "rawdescription": "\n\nWhether to animate tab transitions\n",
                    "jsdoctags": [
                        {
                            "pos": 1558,
                            "end": 1575,
                            "kind": 327,
                            "id": 0,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 1559,
                                "end": 1566,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ]
                },
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>ARIA label for the tab list</p>\n",
                    "line": 96,
                    "rawdescription": "\n\nARIA label for the tab list\n"
                },
                {
                    "name": "ariaLabelledBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>ARIA labelledby for the tab list</p>\n",
                    "line": 101,
                    "rawdescription": "\n\nARIA labelledby for the tab list\n"
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Additional CSS class names</p>\n",
                    "line": 106,
                    "rawdescription": "\n\nAdditional CSS class names\n"
                },
                {
                    "name": "defaultActiveTab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Index of the initially active tab</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nIndex of the initially active tab\n",
                    "jsdoctags": [
                        {
                            "pos": 787,
                            "end": 801,
                            "kind": 327,
                            "id": 0,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 788,
                                "end": 795,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "default"
                            },
                            "comment": "<p>0</p>\n"
                        }
                    ]
                },
                {
                    "name": "keepAlive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Whether to keep tab content alive when switching</p>\n",
                    "line": 79,
                    "rawdescription": "\n\nWhether to keep tab content alive when switching\n",
                    "jsdoctags": [
                        {
                            "pos": 1362,
                            "end": 1380,
                            "kind": 327,
                            "id": 0,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 1363,
                                "end": 1370,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ]
                },
                {
                    "name": "lazyMount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Whether to lazy load tab content</p>\n",
                    "line": 73,
                    "rawdescription": "\n\nWhether to lazy load tab content\n",
                    "jsdoctags": [
                        {
                            "pos": 1250,
                            "end": 1268,
                            "kind": 327,
                            "id": 0,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 1251,
                                "end": 1258,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ]
                },
                {
                    "name": "orientation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabOrientation",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Orientation of the tabs</p>\n",
                    "line": 61,
                    "rawdescription": "\n\nOrientation of the tabs\n",
                    "jsdoctags": [
                        {
                            "pos": 1046,
                            "end": 1071,
                            "kind": 327,
                            "id": 0,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 1047,
                                "end": 1054,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;horizontal&#39;</p>\n"
                        }
                    ]
                },
                {
                    "name": "scrollable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Whether tabs should be scrollable</p>\n",
                    "line": 85,
                    "rawdescription": "\n\nWhether tabs should be scrollable\n",
                    "jsdoctags": [
                        {
                            "pos": 1459,
                            "end": 1477,
                            "kind": 327,
                            "id": 0,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 1460,
                                "end": 1467,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ]
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabSize",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Size of the tabs</p>\n",
                    "line": 55,
                    "rawdescription": "\n\nSize of the tabs\n",
                    "jsdoctags": [
                        {
                            "pos": 961,
                            "end": 982,
                            "kind": 327,
                            "id": 0,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 962,
                                "end": 969,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;medium&#39;</p>\n"
                        }
                    ]
                },
                {
                    "name": "tabListClassName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Additional CSS class names for tab list</p>\n",
                    "line": 111,
                    "rawdescription": "\n\nAdditional CSS class names for tab list\n"
                },
                {
                    "name": "tabPanelClassName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Additional CSS class names for tab panels</p>\n",
                    "line": 116,
                    "rawdescription": "\n\nAdditional CSS class names for tab panels\n"
                },
                {
                    "name": "tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Array of tab items</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nArray of tab items\n"
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabVariant",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Visual variant of the tabs</p>\n",
                    "line": 49,
                    "rawdescription": "\n\nVisual variant of the tabs\n",
                    "jsdoctags": [
                        {
                            "pos": 879,
                            "end": 898,
                            "kind": 327,
                            "id": 0,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 880,
                                "end": 887,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;line&#39;</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TabCustomization",
            "id": "interface-TabCustomization-504fa69cd593ccf092462a80b7de0dd80967c656aebc42cb554dbbc03ddf2424ea329005f3a6bad137e865ae61811ad570f6a00c24664987c2ba28cd584b5d34",
            "file": "src/app/components/tab/tab.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TabItem {\n  /**\n   * Unique identifier for the tab\n   */\n  id: string;\n  \n  /**\n   * Display label for the tab\n   */\n  label: string;\n  \n  /**\n   * Optional icon (can be any template reference or string class)\n   */\n  icon?: any;\n  \n  /**\n   * Content to display when tab is active\n   */\n  content?: any;\n  \n  /**\n   * Disable this specific tab\n   */\n  disabled?: boolean;\n}\n\nexport type TabSize = 'small' | 'medium' | 'large';\nexport type TabVariant = 'line' | 'enclosed' | 'soft-rounded' | 'solid-rounded';\nexport type TabOrientation = 'horizontal' | 'vertical';\nexport type TabAlignment = 'start' | 'center' | 'end' | 'stretch';\n\nexport interface TabConfig {\n  /**\n   * Array of tab items\n   */\n  tabs: TabItem[];\n  \n  /**\n   * Index of the initially active tab\n   * @default 0\n   */\n  defaultActiveTab?: number;\n  \n  /**\n   * Visual variant of the tabs\n   * @default 'line'\n   */\n  variant?: TabVariant;\n  \n  /**\n   * Size of the tabs\n   * @default 'medium'\n   */\n  size?: TabSize;\n  \n  /**\n   * Orientation of the tabs\n   * @default 'horizontal'\n   */\n  orientation?: TabOrientation;\n  \n  /**\n   * Alignment of the tabs\n   * @default 'start'\n   */\n  alignment?: TabAlignment;\n  \n  /**\n   * Whether to lazy load tab content\n   * @default false\n   */\n  lazyMount?: boolean;\n  \n  /**\n   * Whether to keep tab content alive when switching\n   * @default false\n   */\n  keepAlive?: boolean;\n  \n  /**\n   * Whether tabs should be scrollable\n   * @default false\n   */\n  scrollable?: boolean;\n  \n  /**\n   * Whether to animate tab transitions\n   * @default true\n   */\n  animated?: boolean;\n  \n  /**\n   * ARIA label for the tab list\n   */\n  ariaLabel?: string;\n  \n  /**\n   * ARIA labelledby for the tab list\n   */\n  ariaLabelledBy?: string;\n  \n  /**\n   * Additional CSS class names\n   */\n  className?: string;\n  \n  /**\n   * Additional CSS class names for tab list\n   */\n  tabListClassName?: string;\n  \n  /**\n   * Additional CSS class names for tab panels\n   */\n  tabPanelClassName?: string;\n}\n\nexport interface TabState {\n  activeTab: number;\n  previousTab: number;\n  isAnimating: boolean;\n  mountedTabs: Set<number>;\n}\n\nexport interface TabKeyboardNavigation {\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface TabAccessibility {\n  tabListId: string;\n  tabPrefix: string;\n  panelPrefix: string;\n  ariaLabel?: string;\n  ariaLabelledBy?: string;\n}\n\nexport interface TabEvents {\n  tabChange: { index: number; tabId: string; previousIndex: number };\n  tabClick: { index: number; tabId: string; event: Event };\n  tabFocus: { index: number; tabId: string; event: FocusEvent };\n  tabBlur: { index: number; tabId: string; event: FocusEvent };\n  tabKeyDown: { index: number; tabId: string; event: KeyboardEvent };\n}\n\nexport interface TabAnimationConfig {\n  enabled: boolean;\n  duration: number;\n  easing: string;\n  fadeIn: boolean;\n  slideTransition: boolean;\n}\n\nexport interface TabScrollConfig {\n  enabled: boolean;\n  showButtons: boolean;\n  buttonSize: number;\n  scrollAmount: number;\n  autoHide: boolean;\n}\n\nexport interface TabCustomization {\n  showIndicator: boolean;\n  indicatorColor?: string;\n  indicatorHeight?: number;\n  tabSpacing?: number;\n  contentPadding?: string;\n  borderRadius?: string;\n}\n",
            "properties": [
                {
                    "name": "borderRadius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 169
                },
                {
                    "name": "contentPadding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 168
                },
                {
                    "name": "indicatorColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 165
                },
                {
                    "name": "indicatorHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 166
                },
                {
                    "name": "showIndicator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 164
                },
                {
                    "name": "tabSpacing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 167
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TabEvents",
            "id": "interface-TabEvents-504fa69cd593ccf092462a80b7de0dd80967c656aebc42cb554dbbc03ddf2424ea329005f3a6bad137e865ae61811ad570f6a00c24664987c2ba28cd584b5d34",
            "file": "src/app/components/tab/tab.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TabItem {\n  /**\n   * Unique identifier for the tab\n   */\n  id: string;\n  \n  /**\n   * Display label for the tab\n   */\n  label: string;\n  \n  /**\n   * Optional icon (can be any template reference or string class)\n   */\n  icon?: any;\n  \n  /**\n   * Content to display when tab is active\n   */\n  content?: any;\n  \n  /**\n   * Disable this specific tab\n   */\n  disabled?: boolean;\n}\n\nexport type TabSize = 'small' | 'medium' | 'large';\nexport type TabVariant = 'line' | 'enclosed' | 'soft-rounded' | 'solid-rounded';\nexport type TabOrientation = 'horizontal' | 'vertical';\nexport type TabAlignment = 'start' | 'center' | 'end' | 'stretch';\n\nexport interface TabConfig {\n  /**\n   * Array of tab items\n   */\n  tabs: TabItem[];\n  \n  /**\n   * Index of the initially active tab\n   * @default 0\n   */\n  defaultActiveTab?: number;\n  \n  /**\n   * Visual variant of the tabs\n   * @default 'line'\n   */\n  variant?: TabVariant;\n  \n  /**\n   * Size of the tabs\n   * @default 'medium'\n   */\n  size?: TabSize;\n  \n  /**\n   * Orientation of the tabs\n   * @default 'horizontal'\n   */\n  orientation?: TabOrientation;\n  \n  /**\n   * Alignment of the tabs\n   * @default 'start'\n   */\n  alignment?: TabAlignment;\n  \n  /**\n   * Whether to lazy load tab content\n   * @default false\n   */\n  lazyMount?: boolean;\n  \n  /**\n   * Whether to keep tab content alive when switching\n   * @default false\n   */\n  keepAlive?: boolean;\n  \n  /**\n   * Whether tabs should be scrollable\n   * @default false\n   */\n  scrollable?: boolean;\n  \n  /**\n   * Whether to animate tab transitions\n   * @default true\n   */\n  animated?: boolean;\n  \n  /**\n   * ARIA label for the tab list\n   */\n  ariaLabel?: string;\n  \n  /**\n   * ARIA labelledby for the tab list\n   */\n  ariaLabelledBy?: string;\n  \n  /**\n   * Additional CSS class names\n   */\n  className?: string;\n  \n  /**\n   * Additional CSS class names for tab list\n   */\n  tabListClassName?: string;\n  \n  /**\n   * Additional CSS class names for tab panels\n   */\n  tabPanelClassName?: string;\n}\n\nexport interface TabState {\n  activeTab: number;\n  previousTab: number;\n  isAnimating: boolean;\n  mountedTabs: Set<number>;\n}\n\nexport interface TabKeyboardNavigation {\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface TabAccessibility {\n  tabListId: string;\n  tabPrefix: string;\n  panelPrefix: string;\n  ariaLabel?: string;\n  ariaLabelledBy?: string;\n}\n\nexport interface TabEvents {\n  tabChange: { index: number; tabId: string; previousIndex: number };\n  tabClick: { index: number; tabId: string; event: Event };\n  tabFocus: { index: number; tabId: string; event: FocusEvent };\n  tabBlur: { index: number; tabId: string; event: FocusEvent };\n  tabKeyDown: { index: number; tabId: string; event: KeyboardEvent };\n}\n\nexport interface TabAnimationConfig {\n  enabled: boolean;\n  duration: number;\n  easing: string;\n  fadeIn: boolean;\n  slideTransition: boolean;\n}\n\nexport interface TabScrollConfig {\n  enabled: boolean;\n  showButtons: boolean;\n  buttonSize: number;\n  scrollAmount: number;\n  autoHide: boolean;\n}\n\nexport interface TabCustomization {\n  showIndicator: boolean;\n  indicatorColor?: string;\n  indicatorHeight?: number;\n  tabSpacing?: number;\n  contentPadding?: string;\n  borderRadius?: string;\n}\n",
            "properties": [
                {
                    "name": "tabBlur",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 143
                },
                {
                    "name": "tabChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "tabClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 141
                },
                {
                    "name": "tabFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 142
                },
                {
                    "name": "tabKeyDown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 144
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TabItem",
            "id": "interface-TabItem-504fa69cd593ccf092462a80b7de0dd80967c656aebc42cb554dbbc03ddf2424ea329005f3a6bad137e865ae61811ad570f6a00c24664987c2ba28cd584b5d34",
            "file": "src/app/components/tab/tab.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TabItem {\n  /**\n   * Unique identifier for the tab\n   */\n  id: string;\n  \n  /**\n   * Display label for the tab\n   */\n  label: string;\n  \n  /**\n   * Optional icon (can be any template reference or string class)\n   */\n  icon?: any;\n  \n  /**\n   * Content to display when tab is active\n   */\n  content?: any;\n  \n  /**\n   * Disable this specific tab\n   */\n  disabled?: boolean;\n}\n\nexport type TabSize = 'small' | 'medium' | 'large';\nexport type TabVariant = 'line' | 'enclosed' | 'soft-rounded' | 'solid-rounded';\nexport type TabOrientation = 'horizontal' | 'vertical';\nexport type TabAlignment = 'start' | 'center' | 'end' | 'stretch';\n\nexport interface TabConfig {\n  /**\n   * Array of tab items\n   */\n  tabs: TabItem[];\n  \n  /**\n   * Index of the initially active tab\n   * @default 0\n   */\n  defaultActiveTab?: number;\n  \n  /**\n   * Visual variant of the tabs\n   * @default 'line'\n   */\n  variant?: TabVariant;\n  \n  /**\n   * Size of the tabs\n   * @default 'medium'\n   */\n  size?: TabSize;\n  \n  /**\n   * Orientation of the tabs\n   * @default 'horizontal'\n   */\n  orientation?: TabOrientation;\n  \n  /**\n   * Alignment of the tabs\n   * @default 'start'\n   */\n  alignment?: TabAlignment;\n  \n  /**\n   * Whether to lazy load tab content\n   * @default false\n   */\n  lazyMount?: boolean;\n  \n  /**\n   * Whether to keep tab content alive when switching\n   * @default false\n   */\n  keepAlive?: boolean;\n  \n  /**\n   * Whether tabs should be scrollable\n   * @default false\n   */\n  scrollable?: boolean;\n  \n  /**\n   * Whether to animate tab transitions\n   * @default true\n   */\n  animated?: boolean;\n  \n  /**\n   * ARIA label for the tab list\n   */\n  ariaLabel?: string;\n  \n  /**\n   * ARIA labelledby for the tab list\n   */\n  ariaLabelledBy?: string;\n  \n  /**\n   * Additional CSS class names\n   */\n  className?: string;\n  \n  /**\n   * Additional CSS class names for tab list\n   */\n  tabListClassName?: string;\n  \n  /**\n   * Additional CSS class names for tab panels\n   */\n  tabPanelClassName?: string;\n}\n\nexport interface TabState {\n  activeTab: number;\n  previousTab: number;\n  isAnimating: boolean;\n  mountedTabs: Set<number>;\n}\n\nexport interface TabKeyboardNavigation {\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface TabAccessibility {\n  tabListId: string;\n  tabPrefix: string;\n  panelPrefix: string;\n  ariaLabel?: string;\n  ariaLabelledBy?: string;\n}\n\nexport interface TabEvents {\n  tabChange: { index: number; tabId: string; previousIndex: number };\n  tabClick: { index: number; tabId: string; event: Event };\n  tabFocus: { index: number; tabId: string; event: FocusEvent };\n  tabBlur: { index: number; tabId: string; event: FocusEvent };\n  tabKeyDown: { index: number; tabId: string; event: KeyboardEvent };\n}\n\nexport interface TabAnimationConfig {\n  enabled: boolean;\n  duration: number;\n  easing: string;\n  fadeIn: boolean;\n  slideTransition: boolean;\n}\n\nexport interface TabScrollConfig {\n  enabled: boolean;\n  showButtons: boolean;\n  buttonSize: number;\n  scrollAmount: number;\n  autoHide: boolean;\n}\n\nexport interface TabCustomization {\n  showIndicator: boolean;\n  indicatorColor?: string;\n  indicatorHeight?: number;\n  tabSpacing?: number;\n  contentPadding?: string;\n  borderRadius?: string;\n}\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Content to display when tab is active</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nContent to display when tab is active\n"
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Disable this specific tab</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nDisable this specific tab\n"
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Optional icon (can be any template reference or string class)</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nOptional icon (can be any template reference or string class)\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Unique identifier for the tab</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nUnique identifier for the tab\n"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Display label for the tab</p>\n",
                    "line": 10,
                    "rawdescription": "\n\nDisplay label for the tab\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TabKeyboardNavigation",
            "id": "interface-TabKeyboardNavigation-504fa69cd593ccf092462a80b7de0dd80967c656aebc42cb554dbbc03ddf2424ea329005f3a6bad137e865ae61811ad570f6a00c24664987c2ba28cd584b5d34",
            "file": "src/app/components/tab/tab.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TabItem {\n  /**\n   * Unique identifier for the tab\n   */\n  id: string;\n  \n  /**\n   * Display label for the tab\n   */\n  label: string;\n  \n  /**\n   * Optional icon (can be any template reference or string class)\n   */\n  icon?: any;\n  \n  /**\n   * Content to display when tab is active\n   */\n  content?: any;\n  \n  /**\n   * Disable this specific tab\n   */\n  disabled?: boolean;\n}\n\nexport type TabSize = 'small' | 'medium' | 'large';\nexport type TabVariant = 'line' | 'enclosed' | 'soft-rounded' | 'solid-rounded';\nexport type TabOrientation = 'horizontal' | 'vertical';\nexport type TabAlignment = 'start' | 'center' | 'end' | 'stretch';\n\nexport interface TabConfig {\n  /**\n   * Array of tab items\n   */\n  tabs: TabItem[];\n  \n  /**\n   * Index of the initially active tab\n   * @default 0\n   */\n  defaultActiveTab?: number;\n  \n  /**\n   * Visual variant of the tabs\n   * @default 'line'\n   */\n  variant?: TabVariant;\n  \n  /**\n   * Size of the tabs\n   * @default 'medium'\n   */\n  size?: TabSize;\n  \n  /**\n   * Orientation of the tabs\n   * @default 'horizontal'\n   */\n  orientation?: TabOrientation;\n  \n  /**\n   * Alignment of the tabs\n   * @default 'start'\n   */\n  alignment?: TabAlignment;\n  \n  /**\n   * Whether to lazy load tab content\n   * @default false\n   */\n  lazyMount?: boolean;\n  \n  /**\n   * Whether to keep tab content alive when switching\n   * @default false\n   */\n  keepAlive?: boolean;\n  \n  /**\n   * Whether tabs should be scrollable\n   * @default false\n   */\n  scrollable?: boolean;\n  \n  /**\n   * Whether to animate tab transitions\n   * @default true\n   */\n  animated?: boolean;\n  \n  /**\n   * ARIA label for the tab list\n   */\n  ariaLabel?: string;\n  \n  /**\n   * ARIA labelledby for the tab list\n   */\n  ariaLabelledBy?: string;\n  \n  /**\n   * Additional CSS class names\n   */\n  className?: string;\n  \n  /**\n   * Additional CSS class names for tab list\n   */\n  tabListClassName?: string;\n  \n  /**\n   * Additional CSS class names for tab panels\n   */\n  tabPanelClassName?: string;\n}\n\nexport interface TabState {\n  activeTab: number;\n  previousTab: number;\n  isAnimating: boolean;\n  mountedTabs: Set<number>;\n}\n\nexport interface TabKeyboardNavigation {\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface TabAccessibility {\n  tabListId: string;\n  tabPrefix: string;\n  panelPrefix: string;\n  ariaLabel?: string;\n  ariaLabelledBy?: string;\n}\n\nexport interface TabEvents {\n  tabChange: { index: number; tabId: string; previousIndex: number };\n  tabClick: { index: number; tabId: string; event: Event };\n  tabFocus: { index: number; tabId: string; event: FocusEvent };\n  tabBlur: { index: number; tabId: string; event: FocusEvent };\n  tabKeyDown: { index: number; tabId: string; event: KeyboardEvent };\n}\n\nexport interface TabAnimationConfig {\n  enabled: boolean;\n  duration: number;\n  easing: string;\n  fadeIn: boolean;\n  slideTransition: boolean;\n}\n\nexport interface TabScrollConfig {\n  enabled: boolean;\n  showButtons: boolean;\n  buttonSize: number;\n  scrollAmount: number;\n  autoHide: boolean;\n}\n\nexport interface TabCustomization {\n  showIndicator: boolean;\n  indicatorColor?: string;\n  indicatorHeight?: number;\n  tabSpacing?: number;\n  contentPadding?: string;\n  borderRadius?: string;\n}\n",
            "properties": [
                {
                    "name": "focusedIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "isKeyboardActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 128
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TabScrollConfig",
            "id": "interface-TabScrollConfig-504fa69cd593ccf092462a80b7de0dd80967c656aebc42cb554dbbc03ddf2424ea329005f3a6bad137e865ae61811ad570f6a00c24664987c2ba28cd584b5d34",
            "file": "src/app/components/tab/tab.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TabItem {\n  /**\n   * Unique identifier for the tab\n   */\n  id: string;\n  \n  /**\n   * Display label for the tab\n   */\n  label: string;\n  \n  /**\n   * Optional icon (can be any template reference or string class)\n   */\n  icon?: any;\n  \n  /**\n   * Content to display when tab is active\n   */\n  content?: any;\n  \n  /**\n   * Disable this specific tab\n   */\n  disabled?: boolean;\n}\n\nexport type TabSize = 'small' | 'medium' | 'large';\nexport type TabVariant = 'line' | 'enclosed' | 'soft-rounded' | 'solid-rounded';\nexport type TabOrientation = 'horizontal' | 'vertical';\nexport type TabAlignment = 'start' | 'center' | 'end' | 'stretch';\n\nexport interface TabConfig {\n  /**\n   * Array of tab items\n   */\n  tabs: TabItem[];\n  \n  /**\n   * Index of the initially active tab\n   * @default 0\n   */\n  defaultActiveTab?: number;\n  \n  /**\n   * Visual variant of the tabs\n   * @default 'line'\n   */\n  variant?: TabVariant;\n  \n  /**\n   * Size of the tabs\n   * @default 'medium'\n   */\n  size?: TabSize;\n  \n  /**\n   * Orientation of the tabs\n   * @default 'horizontal'\n   */\n  orientation?: TabOrientation;\n  \n  /**\n   * Alignment of the tabs\n   * @default 'start'\n   */\n  alignment?: TabAlignment;\n  \n  /**\n   * Whether to lazy load tab content\n   * @default false\n   */\n  lazyMount?: boolean;\n  \n  /**\n   * Whether to keep tab content alive when switching\n   * @default false\n   */\n  keepAlive?: boolean;\n  \n  /**\n   * Whether tabs should be scrollable\n   * @default false\n   */\n  scrollable?: boolean;\n  \n  /**\n   * Whether to animate tab transitions\n   * @default true\n   */\n  animated?: boolean;\n  \n  /**\n   * ARIA label for the tab list\n   */\n  ariaLabel?: string;\n  \n  /**\n   * ARIA labelledby for the tab list\n   */\n  ariaLabelledBy?: string;\n  \n  /**\n   * Additional CSS class names\n   */\n  className?: string;\n  \n  /**\n   * Additional CSS class names for tab list\n   */\n  tabListClassName?: string;\n  \n  /**\n   * Additional CSS class names for tab panels\n   */\n  tabPanelClassName?: string;\n}\n\nexport interface TabState {\n  activeTab: number;\n  previousTab: number;\n  isAnimating: boolean;\n  mountedTabs: Set<number>;\n}\n\nexport interface TabKeyboardNavigation {\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface TabAccessibility {\n  tabListId: string;\n  tabPrefix: string;\n  panelPrefix: string;\n  ariaLabel?: string;\n  ariaLabelledBy?: string;\n}\n\nexport interface TabEvents {\n  tabChange: { index: number; tabId: string; previousIndex: number };\n  tabClick: { index: number; tabId: string; event: Event };\n  tabFocus: { index: number; tabId: string; event: FocusEvent };\n  tabBlur: { index: number; tabId: string; event: FocusEvent };\n  tabKeyDown: { index: number; tabId: string; event: KeyboardEvent };\n}\n\nexport interface TabAnimationConfig {\n  enabled: boolean;\n  duration: number;\n  easing: string;\n  fadeIn: boolean;\n  slideTransition: boolean;\n}\n\nexport interface TabScrollConfig {\n  enabled: boolean;\n  showButtons: boolean;\n  buttonSize: number;\n  scrollAmount: number;\n  autoHide: boolean;\n}\n\nexport interface TabCustomization {\n  showIndicator: boolean;\n  indicatorColor?: string;\n  indicatorHeight?: number;\n  tabSpacing?: number;\n  contentPadding?: string;\n  borderRadius?: string;\n}\n",
            "properties": [
                {
                    "name": "autoHide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 160
                },
                {
                    "name": "buttonSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 158
                },
                {
                    "name": "enabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 156
                },
                {
                    "name": "scrollAmount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 159
                },
                {
                    "name": "showButtons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 157
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TabState",
            "id": "interface-TabState-504fa69cd593ccf092462a80b7de0dd80967c656aebc42cb554dbbc03ddf2424ea329005f3a6bad137e865ae61811ad570f6a00c24664987c2ba28cd584b5d34",
            "file": "src/app/components/tab/tab.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TabItem {\n  /**\n   * Unique identifier for the tab\n   */\n  id: string;\n  \n  /**\n   * Display label for the tab\n   */\n  label: string;\n  \n  /**\n   * Optional icon (can be any template reference or string class)\n   */\n  icon?: any;\n  \n  /**\n   * Content to display when tab is active\n   */\n  content?: any;\n  \n  /**\n   * Disable this specific tab\n   */\n  disabled?: boolean;\n}\n\nexport type TabSize = 'small' | 'medium' | 'large';\nexport type TabVariant = 'line' | 'enclosed' | 'soft-rounded' | 'solid-rounded';\nexport type TabOrientation = 'horizontal' | 'vertical';\nexport type TabAlignment = 'start' | 'center' | 'end' | 'stretch';\n\nexport interface TabConfig {\n  /**\n   * Array of tab items\n   */\n  tabs: TabItem[];\n  \n  /**\n   * Index of the initially active tab\n   * @default 0\n   */\n  defaultActiveTab?: number;\n  \n  /**\n   * Visual variant of the tabs\n   * @default 'line'\n   */\n  variant?: TabVariant;\n  \n  /**\n   * Size of the tabs\n   * @default 'medium'\n   */\n  size?: TabSize;\n  \n  /**\n   * Orientation of the tabs\n   * @default 'horizontal'\n   */\n  orientation?: TabOrientation;\n  \n  /**\n   * Alignment of the tabs\n   * @default 'start'\n   */\n  alignment?: TabAlignment;\n  \n  /**\n   * Whether to lazy load tab content\n   * @default false\n   */\n  lazyMount?: boolean;\n  \n  /**\n   * Whether to keep tab content alive when switching\n   * @default false\n   */\n  keepAlive?: boolean;\n  \n  /**\n   * Whether tabs should be scrollable\n   * @default false\n   */\n  scrollable?: boolean;\n  \n  /**\n   * Whether to animate tab transitions\n   * @default true\n   */\n  animated?: boolean;\n  \n  /**\n   * ARIA label for the tab list\n   */\n  ariaLabel?: string;\n  \n  /**\n   * ARIA labelledby for the tab list\n   */\n  ariaLabelledBy?: string;\n  \n  /**\n   * Additional CSS class names\n   */\n  className?: string;\n  \n  /**\n   * Additional CSS class names for tab list\n   */\n  tabListClassName?: string;\n  \n  /**\n   * Additional CSS class names for tab panels\n   */\n  tabPanelClassName?: string;\n}\n\nexport interface TabState {\n  activeTab: number;\n  previousTab: number;\n  isAnimating: boolean;\n  mountedTabs: Set<number>;\n}\n\nexport interface TabKeyboardNavigation {\n  focusedIndex: number;\n  isKeyboardActive: boolean;\n}\n\nexport interface TabAccessibility {\n  tabListId: string;\n  tabPrefix: string;\n  panelPrefix: string;\n  ariaLabel?: string;\n  ariaLabelledBy?: string;\n}\n\nexport interface TabEvents {\n  tabChange: { index: number; tabId: string; previousIndex: number };\n  tabClick: { index: number; tabId: string; event: Event };\n  tabFocus: { index: number; tabId: string; event: FocusEvent };\n  tabBlur: { index: number; tabId: string; event: FocusEvent };\n  tabKeyDown: { index: number; tabId: string; event: KeyboardEvent };\n}\n\nexport interface TabAnimationConfig {\n  enabled: boolean;\n  duration: number;\n  easing: string;\n  fadeIn: boolean;\n  slideTransition: boolean;\n}\n\nexport interface TabScrollConfig {\n  enabled: boolean;\n  showButtons: boolean;\n  buttonSize: number;\n  scrollAmount: number;\n  autoHide: boolean;\n}\n\nexport interface TabCustomization {\n  showIndicator: boolean;\n  indicatorColor?: string;\n  indicatorHeight?: number;\n  tabSpacing?: number;\n  contentPadding?: string;\n  borderRadius?: string;\n}\n",
            "properties": [
                {
                    "name": "activeTab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "isAnimating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "mountedTabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Set<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "previousTab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 121
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "ModalService",
            "id": "injectable-ModalService-82315ba0f444d6b383f030b29d7e162374548cb050a13d6e54e1c77a6b59d74aaf384eeba1a11d6ee3703ae1a659ee8c1afa6fd3bbae396d0e403bebcdd9934a",
            "file": "src/app/components/modal/modal.service.ts",
            "properties": [
                {
                    "name": "_globalConfig",
                    "defaultValue": "{\n    size: 'base',\n    position: 'center',\n    variant: 'default',\n    closeOnBackdropClick: true,\n    closeOnEscape: true,\n    disableClose: false,\n    hasBackdrop: true,\n    animationEnabled: true,\n    animationDuration: 300,\n    autoFocus: true,\n    restoreFocus: true\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<ModalConfig>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_openModalRefs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModalRef[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "closeAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCloses all open modals\n",
                    "description": "<p>Closes all open modals</p>\n"
                },
                {
                    "name": "closeModal",
                    "args": [
                        {
                            "name": "modalRef",
                            "type": "ModalRef<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 324,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "modalRef",
                            "type": "ModalRef<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createModalRef",
                    "args": [
                        {
                            "name": "overlayRef",
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "Partial<ModalConfig>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModalRef<T>",
                    "typeParameters": [
                        "T",
                        "R"
                    ],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "overlayRef",
                            "type": "OverlayRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "Partial<ModalConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createOverlay",
                    "args": [
                        {
                            "name": "config",
                            "type": "Partial<ModalConfig>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayRef",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "Partial<ModalConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGlobalConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "Partial<ModalConfig>",
                    "typeParameters": [],
                    "line": 235,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the current global configuration\n",
                    "description": "<p>Gets the current global configuration</p>\n"
                },
                {
                    "name": "getOpenModals",
                    "args": [],
                    "optional": false,
                    "returnType": "ModalRef[]",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets all open modal references\n",
                    "description": "<p>Gets all open modal references</p>\n"
                },
                {
                    "name": "hasOpenModals",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if any modal is currently open\n",
                    "description": "<p>Checks if any modal is currently open</p>\n"
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "component",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ModalOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ModalRef<T>",
                    "typeParameters": [
                        "T",
                        "R"
                    ],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens a modal with a component\n",
                    "description": "<p>Opens a modal with a component</p>\n",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ModalOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openAlert",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModalRef<any>",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens an alert modal\n",
                    "description": "<p>Opens an alert modal</p>\n",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openConfirm",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModalRef<any>",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens a confirmation modal\n",
                    "description": "<p>Opens a confirmation modal</p>\n",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openTemplate",
                    "args": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ModalOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ModalRef<any>",
                    "typeParameters": [
                        "R"
                    ],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens a modal with a template\n",
                    "description": "<p>Opens a modal with a template</p>\n",
                    "jsdoctags": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ModalOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setGlobalConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "Partial<ModalConfig>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets global configuration for all modals\n",
                    "description": "<p>Sets global configuration for all modals</p>\n",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "Partial<ModalConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupModalLifecycle",
                    "args": [
                        {
                            "name": "modalRef",
                            "type": "ModalRef<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 299,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "modalRef",
                            "type": "ModalRef<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, TemplateRef, ComponentRef, ViewContainerRef, Injector } from '@angular/core';\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { Subject, Observable } from 'rxjs';\nimport { ModalComponent, ModalConfig, ModalSize, ModalPosition, ModalVariant } from './modal.component';\n\nexport interface ModalRef<T = any> {\n  instance: ModalComponent;\n  componentInstance?: T;\n  overlayRef: OverlayRef;\n  afterClosed: Observable<any>;\n  afterOpened: Observable<void>;\n  close: (result?: any) => void;\n  updateConfig: (config: Partial<ModalConfig>) => void;\n  updateSize: (size: ModalSize) => void;\n  updatePosition: (position: ModalPosition) => void;\n}\n\nexport interface ModalData {\n  [key: string]: any;\n}\n\nexport interface ModalOptions extends Partial<ModalConfig> {\n  data?: ModalData;\n  viewContainerRef?: ViewContainerRef;\n  injector?: Injector;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModalService {\n  private _openModalRefs: ModalRef[] = [];\n  private _globalConfig: Partial<ModalConfig> = {\n    size: 'base',\n    position: 'center',\n    variant: 'default',\n    closeOnBackdropClick: true,\n    closeOnEscape: true,\n    disableClose: false,\n    hasBackdrop: true,\n    animationEnabled: true,\n    animationDuration: 300,\n    autoFocus: true,\n    restoreFocus: true\n  };\n\n  constructor(private overlay: Overlay) {}\n\n  /**\n   * Opens a modal with a component\n   */\n  open<T = any, R = any>(\n    component: any,\n    options?: ModalOptions\n  ): ModalRef<T> {\n    const config = { ...this._globalConfig, ...options };\n    const overlayRef = this.createOverlay(config);\n    const modalRef = this.createModalRef<T, R>(overlayRef, config);\n    \n    // Create component portal\n    const componentPortal = new ComponentPortal(\n      component,\n      options?.viewContainerRef,\n      options?.injector\n    );\n    \n    // Attach component to modal\n    const componentRef = overlayRef.attach(componentPortal);\n    modalRef.componentInstance = componentRef.instance;\n    \n    // Pass data to component if provided\n    if (options?.data) {\n      Object.assign(componentRef.instance, options.data);\n    }\n    \n    // Setup modal lifecycle\n    this.setupModalLifecycle(modalRef);\n    \n    // Track open modal\n    this._openModalRefs.push(modalRef);\n    \n    return modalRef;\n  }\n\n  /**\n   * Opens a modal with a template\n   */\n  openTemplate<R = any>(\n    template: TemplateRef<any>,\n    options?: ModalOptions\n  ): ModalRef<any> {\n    const config = { ...this._globalConfig, ...options };\n    const overlayRef = this.createOverlay(config);\n    const modalRef = this.createModalRef<any, R>(overlayRef, config);\n    \n    // Create template portal\n    const templatePortal = new TemplatePortal(\n      template,\n      options?.viewContainerRef || null,\n      options?.data\n    );\n    \n    // Attach template to modal\n    overlayRef.attach(templatePortal);\n    \n    // Setup modal lifecycle\n    this.setupModalLifecycle(modalRef);\n    \n    // Track open modal\n    this._openModalRefs.push(modalRef);\n    \n    return modalRef;\n  }\n\n  /**\n   * Opens a confirmation modal\n   */\n  openConfirm(options: {\n    title?: string;\n    message?: string;\n    confirmText?: string;\n    cancelText?: string;\n    variant?: ModalVariant;\n    size?: ModalSize;\n  } & ModalOptions): ModalRef<any> {\n    const config = {\n      ...this._globalConfig,\n      ...options,\n      variant: options.variant || 'default',\n      size: options.size || 'sm'\n    };\n    \n    const overlayRef = this.createOverlay(config);\n    const modalRef = this.createModalRef(overlayRef, config);\n    \n    // Create confirmation component (you would create this separately)\n    // For now, we'll use a simple template approach\n    const confirmationData = {\n      title: options.title || 'Confirm Action',\n      message: options.message || 'Are you sure you want to proceed?',\n      confirmText: options.confirmText || 'Confirm',\n      cancelText: options.cancelText || 'Cancel',\n      onConfirm: () => modalRef.close(true),\n      onCancel: () => modalRef.close(false)\n    };\n    \n    // You would typically create a ConfirmationComponent here\n    // For this implementation, we'll simulate it\n    modalRef.componentInstance = confirmationData;\n    \n    // Setup modal lifecycle\n    this.setupModalLifecycle(modalRef);\n    \n    // Track open modal\n    this._openModalRefs.push(modalRef);\n    \n    return modalRef;\n  }\n\n  /**\n   * Opens an alert modal\n   */\n  openAlert(options: {\n    title?: string;\n    message?: string;\n    buttonText?: string;\n    variant?: ModalVariant;\n    size?: ModalSize;\n  } & ModalOptions): ModalRef<any> {\n    const config = {\n      ...this._globalConfig,\n      ...options,\n      variant: options.variant || 'default',\n      size: options.size || 'sm',\n      closeOnBackdropClick: false,\n      closeOnEscape: false\n    };\n    \n    const overlayRef = this.createOverlay(config);\n    const modalRef = this.createModalRef(overlayRef, config);\n    \n    // Create alert data\n    const alertData = {\n      title: options.title || 'Alert',\n      message: options.message || 'This is an alert message.',\n      buttonText: options.buttonText || 'OK',\n      onClose: () => modalRef.close(true)\n    };\n    \n    modalRef.componentInstance = alertData;\n    \n    // Setup modal lifecycle\n    this.setupModalLifecycle(modalRef);\n    \n    // Track open modal\n    this._openModalRefs.push(modalRef);\n    \n    return modalRef;\n  }\n\n  /**\n   * Closes all open modals\n   */\n  closeAll(): void {\n    this._openModalRefs.forEach(modalRef => {\n      modalRef.close();\n    });\n  }\n\n  /**\n   * Gets all open modal references\n   */\n  getOpenModals(): ModalRef[] {\n    return [...this._openModalRefs];\n  }\n\n  /**\n   * Checks if any modal is currently open\n   */\n  hasOpenModals(): boolean {\n    return this._openModalRefs.length > 0;\n  }\n\n  /**\n   * Sets global configuration for all modals\n   */\n  setGlobalConfig(config: Partial<ModalConfig>): void {\n    this._globalConfig = { ...this._globalConfig, ...config };\n  }\n\n  /**\n   * Gets the current global configuration\n   */\n  getGlobalConfig(): Partial<ModalConfig> {\n    return { ...this._globalConfig };\n  }\n\n  private createOverlay(config: Partial<ModalConfig>): OverlayRef {\n    const overlayConfig = {\n      hasBackdrop: config.hasBackdrop !== false,\n      backdropClass: ['modal-backdrop', config.backdropClass].filter(Boolean),\n      panelClass: ['modal-overlay-panel', config.panelClass].filter(Boolean),\n      scrollStrategy: this.overlay.scrollStrategies.block(),\n      positionStrategy: this.overlay.position().global()\n    };\n\n    // Configure position strategy\n    switch (config.position) {\n      case 'top':\n        overlayConfig.positionStrategy.top('5%').centerHorizontally();\n        break;\n      case 'bottom':\n        overlayConfig.positionStrategy.bottom('5%').centerHorizontally();\n        break;\n      default:\n        overlayConfig.positionStrategy.centerHorizontally().centerVertically();\n        break;\n    }\n\n    return this.overlay.create(overlayConfig);\n  }\n\n  private createModalRef<T, R>(\n    overlayRef: OverlayRef,\n    config: Partial<ModalConfig>\n  ): ModalRef<T> {\n    const afterClosed = new Subject<R>();\n    const afterOpened = new Subject<void>();\n\n    const modalRef: ModalRef<T> = {\n      instance: null as any, // Will be set after component creation\n      overlayRef,\n      afterClosed: afterClosed.asObservable(),\n      afterOpened: afterOpened.asObservable(),\n      close: (result?: R) => {\n        this.closeModal(modalRef, result);\n      },\n      updateConfig: (newConfig: Partial<ModalConfig>) => {\n        if (modalRef.instance) {\n          modalRef.instance.updateConfig(newConfig);\n        }\n      },\n      updateSize: (size: ModalSize) => {\n        if (modalRef.instance) {\n          modalRef.instance.size = size;\n        }\n      },\n      updatePosition: (position: ModalPosition) => {\n        if (modalRef.instance) {\n          modalRef.instance.position = position;\n        }\n      }\n    };\n\n    return modalRef;\n  }\n\n  private setupModalLifecycle<T>(modalRef: ModalRef<T>): void {\n    // Handle backdrop clicks\n    if (modalRef.overlayRef.backdropClick) {\n      modalRef.overlayRef.backdropClick().subscribe(() => {\n        if (modalRef.instance && modalRef.instance.closeOnBackdropClick) {\n          modalRef.close();\n        }\n      });\n    }\n\n    // Handle escape key\n    if (modalRef.overlayRef.keydownEvents) {\n      modalRef.overlayRef.keydownEvents().subscribe(event => {\n        if (event.keyCode === 27 && modalRef.instance && modalRef.instance.closeOnEscape) {\n          modalRef.close();\n        }\n      });\n    }\n\n    // Emit opened event\n    setTimeout(() => {\n      (modalRef.afterOpened as Subject<void>).next();\n    });\n  }\n\n  private closeModal<T>(modalRef: ModalRef<T>, result?: any): void {\n    // Remove from open modals list\n    const index = this._openModalRefs.indexOf(modalRef);\n    if (index > -1) {\n      this._openModalRefs.splice(index, 1);\n    }\n\n    // Emit closed event\n    (modalRef.afterClosed as Subject<any>).next(result);\n    (modalRef.afterClosed as Subject<any>).complete();\n\n    // Dispose overlay\n    if (modalRef.overlayRef) {\n      modalRef.overlayRef.dispose();\n    }\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProgressStepsService",
            "id": "injectable-ProgressStepsService-df0c8bde756f94587f3b51b8eb893be221783979d171c5d3862f7901174e7d508d90b15e5f7b9133b90a10c24e8961c7b5160117dbb1f70973f9306ca1a80270",
            "file": "src/app/components/progress-steps/progress-steps.service.ts",
            "properties": [
                {
                    "name": "allowNavigation$",
                    "defaultValue": "this.allowNavigationSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "allowNavigationSubject",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentStep$",
                    "defaultValue": "this.currentStepSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "currentStepSubject",
                    "defaultValue": "new BehaviorSubject<number>(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "steps$",
                    "defaultValue": "this.stepsSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "stepsSubject",
                    "defaultValue": "new BehaviorSubject<StepConfig[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canProceed",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getProgress",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToStep",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isStepAccessible",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markStepCompleted",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markStepError",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markStepPending",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "previousStep",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setAllowNavigation",
                    "args": [
                        {
                            "name": "allow",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "allow",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSteps",
                    "args": [
                        {
                            "name": "steps",
                            "type": "StepConfig[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "steps",
                            "type": "StepConfig[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { StepConfig } from './progress-steps.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProgressStepsService {\n  private stepsSubject = new BehaviorSubject<StepConfig[]>([]);\n  private currentStepSubject = new BehaviorSubject<number>(0);\n  private allowNavigationSubject = new BehaviorSubject<boolean>(false);\n\n  steps$ = this.stepsSubject.asObservable();\n  currentStep$ = this.currentStepSubject.asObservable();\n  allowNavigation$ = this.allowNavigationSubject.asObservable();\n\n  get steps(): StepConfig[] {\n    return this.stepsSubject.value;\n  }\n\n  get currentStep(): number {\n    return this.currentStepSubject.value;\n  }\n\n  get allowNavigation(): boolean {\n    return this.allowNavigationSubject.value;\n  }\n\n  setSteps(steps: StepConfig[]): void {\n    this.stepsSubject.next([...steps]);\n  }\n\n  setAllowNavigation(allow: boolean): void {\n    this.allowNavigationSubject.next(allow);\n  }\n\n  goToStep(index: number): boolean {\n    const steps = this.stepsSubject.value;\n    \n    if (index < 0 || index >= steps.length) {\n      return false;\n    }\n\n    const targetStep = steps[index];\n    if (targetStep.disabled) {\n      return false;\n    }\n\n    // If navigation is not allowed, only allow forward to next step or backward if completed\n    if (!this.allowNavigation) {\n      const currentIndex = this.currentStepSubject.value;\n      \n      // Allow forward to next step only\n      if (index > currentIndex && index !== currentIndex + 1) {\n        return false;\n      }\n      \n      // Allow backward navigation only to completed steps\n      if (index < currentIndex && !steps[index].completed) {\n        return false;\n      }\n    }\n\n    this.currentStepSubject.next(index);\n    return true;\n  }\n\n  nextStep(): boolean {\n    const current = this.currentStepSubject.value;\n    const steps = this.stepsSubject.value;\n    let nextIndex = current + 1;\n\n    // Skip optional steps if not explicitly navigated to\n    while (nextIndex < steps.length && steps[nextIndex].disabled) {\n      nextIndex++;\n    }\n\n    if (nextIndex < steps.length) {\n      return this.goToStep(nextIndex);\n    }\n    \n    return false;\n  }\n\n  previousStep(): boolean {\n    const current = this.currentStepSubject.value;\n    let prevIndex = current - 1;\n\n    // Skip disabled steps when going backward\n    while (prevIndex >= 0 && this.steps[prevIndex].disabled) {\n      prevIndex--;\n    }\n\n    if (prevIndex >= 0) {\n      return this.goToStep(prevIndex);\n    }\n    \n    return false;\n  }\n\n  markStepCompleted(index: number): void {\n    const steps = [...this.stepsSubject.value];\n    if (steps[index]) {\n      steps[index].completed = true;\n      steps[index].error = false;\n      this.setSteps(steps);\n    }\n  }\n\n  markStepError(index: number): void {\n    const steps = [...this.stepsSubject.value];\n    if (steps[index]) {\n      steps[index].error = true;\n      steps[index].completed = false;\n      this.setSteps(steps);\n    }\n  }\n\n  markStepPending(index: number): void {\n    const steps = [...this.stepsSubject.value];\n    if (steps[index]) {\n      steps[index].error = false;\n      steps[index].completed = false;\n      this.setSteps(steps);\n    }\n  }\n\n  isStepAccessible(index: number): boolean {\n    const steps = this.stepsSubject.value;\n    const step = steps[index];\n    \n    if (!step || step.disabled) {\n      return false;\n    }\n\n    if (!this.allowNavigation) {\n      const currentIndex = this.currentStepSubject.value;\n      \n      // Can access current step\n      if (index === currentIndex) {\n        return true;\n      }\n      \n      // Can access next step\n      if (index === currentIndex + 1) {\n        return true;\n      }\n      \n      // Can access completed previous steps\n      if (index < currentIndex && step.completed) {\n        return true;\n      }\n      \n      return false;\n    }\n\n    return true;\n  }\n\n  getProgress(): number {\n    const steps = this.stepsSubject.value;\n    if (steps.length === 0) return 0;\n    \n    const completedSteps = steps.filter(step => step.completed).length;\n    return Math.round((completedSteps / steps.length) * 100);\n  }\n\n  reset(): void {\n    const steps = this.stepsSubject.value.map(step => ({\n      ...step,\n      completed: false,\n      error: false\n    }));\n    this.setSteps(steps);\n    this.currentStepSubject.next(0);\n  }\n\n  hasErrors(): boolean {\n    return this.stepsSubject.value.some(step => step.error);\n  }\n\n  canProceed(): boolean {\n    const current = this.currentStepSubject.value;\n    const steps = this.stepsSubject.value;\n    \n    if (current >= steps.length) return false;\n    \n    const currentStep = steps[current];\n    return !currentStep.error && !currentStep.disabled;\n  }\n}",
            "accessors": {
                "steps": {
                    "name": "steps",
                    "getSignature": {
                        "name": "steps",
                        "type": "[]",
                        "returnType": "StepConfig[]",
                        "line": 17
                    }
                },
                "currentStep": {
                    "name": "currentStep",
                    "getSignature": {
                        "name": "currentStep",
                        "type": "number",
                        "returnType": "number",
                        "line": 21
                    }
                },
                "allowNavigation": {
                    "name": "allowNavigation",
                    "getSignature": {
                        "name": "allowNavigation",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 25
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SelectorService",
            "id": "injectable-SelectorService-4c6089b7cb77de4e685c2faff7b7f7fe40fa7d2ab82bee31af7bde2e3f68916c2b8d25c7d30cc75d74e80f1e72f68e2891c25f0eff690a462ceb5464bf75c57d",
            "file": "src/app/components/selector/selector.service.ts",
            "properties": [
                {
                    "name": "originalGroups",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectorGroup[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "originalOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectorOption[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "searchSubject",
                    "defaultValue": "new Subject<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "state$",
                    "defaultValue": "this.stateSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "stateSubject",
                    "defaultValue": "new BehaviorSubject<SelectorState>({\n    selectedOptions: [],\n    selectedValues: [],\n    searchTerm: '',\n    filteredOptions: [],\n    filteredGroups: [],\n    isSearching: false,\n    hasError: false\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearSelection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear all selections\n",
                    "description": "<p>Clear all selections</p>\n"
                },
                {
                    "name": "deselectOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectorOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeselect an option\n",
                    "description": "<p>Deselect an option</p>\n",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SelectorOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "escapeRegExp",
                    "args": [
                        {
                            "name": "string",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 330,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "string",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterGroups",
                    "args": [
                        {
                            "name": "groups",
                            "type": "SelectorGroup[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SelectorGroup[]",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFilter groups and their options based on search term\n",
                    "description": "<p>Filter groups and their options based on search term</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "groups",
                            "type": "SelectorGroup[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterOptions",
                    "args": [
                        {
                            "name": "options",
                            "type": "SelectorOption[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SelectorOption[]",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFilter options based on search term\n",
                    "description": "<p>Filter options based on search term</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "SelectorOption[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllGroupOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "SelectorOption[]",
                    "typeParameters": [],
                    "line": 326,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getAllGroups",
                    "args": [],
                    "optional": false,
                    "returnType": "SelectorGroup[]",
                    "typeParameters": [],
                    "line": 322,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getAllOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "SelectorOption[]",
                    "typeParameters": [],
                    "line": 318,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHelper methods\n",
                    "description": "<p>Helper methods</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getCurrentState",
                    "args": [],
                    "optional": false,
                    "returnType": "SelectorState",
                    "typeParameters": [],
                    "line": 296,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet current state snapshot\n",
                    "description": "<p>Get current state snapshot</p>\n"
                },
                {
                    "name": "getNavigationOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "SelectorOption[]",
                    "typeParameters": [],
                    "line": 288,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet keyboard navigation suggestions\n",
                    "description": "<p>Get keyboard navigation suggestions</p>\n"
                },
                {
                    "name": "highlightSearchTerm",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "SelectorHighlight",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 271,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHighlight search terms in text\n",
                    "description": "<p>Highlight search terms in text</p>\n",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "SelectorHighlight",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "options",
                            "type": "SelectorOption[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "groups",
                            "type": "SelectorGroup[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        },
                        {
                            "name": "config",
                            "type": "SelectorConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "asyncConfig",
                            "type": "SelectorAsyncConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitialize the service with options and configuration\n",
                    "description": "<p>Initialize the service with options and configuration</p>\n",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "SelectorOption[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "groups",
                            "type": "SelectorGroup[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "SelectorConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "asyncConfig",
                            "type": "SelectorAsyncConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isOptionSelected",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectorOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if an option is selected\n",
                    "description": "<p>Check if an option is selected</p>\n",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SelectorOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "performSearch",
                    "args": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPerform the actual search filtering\n",
                    "description": "<p>Perform the actual search filtering</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 303,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReset service state\n",
                    "description": "<p>Reset service state</p>\n"
                },
                {
                    "name": "selectOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectorOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mode",
                            "type": "SelectorMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect an option\n",
                    "description": "<p>Select an option</p>\n",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SelectorOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mode",
                            "type": "SelectorMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setError",
                    "args": [
                        {
                            "name": "errorMessage",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet error state\n",
                    "description": "<p>Set error state</p>\n",
                    "jsdoctags": [
                        {
                            "name": "errorMessage",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedValues",
                    "args": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet selected values programmatically\n",
                    "description": "<p>Set selected values programmatically</p>\n",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleGroup",
                    "args": [
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle group collapse state\n",
                    "description": "<p>Toggle group collapse state</p>\n",
                    "jsdoctags": [
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSearch",
                    "args": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate search term and trigger filtering\n",
                    "description": "<p>Update search term and trigger filtering</p>\n",
                    "jsdoctags": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateSelection",
                    "args": [
                        {
                            "name": "config",
                            "type": "SelectorConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValidate current selection\n",
                    "description": "<p>Validate current selection</p>\n",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "SelectorConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject, debounceTime, distinctUntilChanged, map } from 'rxjs';\nimport { \n  SelectorOption, \n  SelectorGroup, \n  SelectorState, \n  SelectorConfig, \n  SelectorMode,\n  SelectorAsyncConfig,\n  SelectorHighlight \n} from './selector.types';\n\n@Injectable()\nexport class SelectorService {\n  private stateSubject = new BehaviorSubject<SelectorState>({\n    selectedOptions: [],\n    selectedValues: [],\n    searchTerm: '',\n    filteredOptions: [],\n    filteredGroups: [],\n    isSearching: false,\n    hasError: false\n  });\n\n  private searchSubject = new Subject<string>();\n  public state$ = this.stateSubject.asObservable();\n  \n  // Store original data\n  private originalOptions: SelectorOption[] = [];\n  private originalGroups: SelectorGroup[] = [];\n\n  constructor() {\n    // Setup search debouncing\n    this.searchSubject.pipe(\n      debounceTime(300),\n      distinctUntilChanged()\n    ).subscribe(searchTerm => {\n      this.performSearch(searchTerm);\n    });\n  }\n\n  /**\n   * Initialize the service with options and configuration\n   */\n  initialize(\n    options: SelectorOption[], \n    groups: SelectorGroup[] = [], \n    config: SelectorConfig,\n    asyncConfig?: SelectorAsyncConfig\n  ): void {\n    // Store original data\n    this.originalOptions = [...options];\n    this.originalGroups = [...groups];\n    \n    const initialState: SelectorState = {\n      ...this.stateSubject.value,\n      filteredOptions: options,\n      filteredGroups: groups,\n      searchTerm: '',\n      isSearching: false,\n      hasError: false\n    };\n\n    this.stateSubject.next(initialState);\n  }\n\n  /**\n   * Update search term and trigger filtering\n   */\n  updateSearch(searchTerm: string): void {\n    const currentState = this.stateSubject.value;\n    this.stateSubject.next({\n      ...currentState,\n      searchTerm,\n      isSearching: true\n    });\n\n    this.searchSubject.next(searchTerm);\n  }\n\n  /**\n   * Perform the actual search filtering\n   */\n  private performSearch(searchTerm: string): void {\n    const currentState = this.stateSubject.value;\n    \n    if (!searchTerm.trim()) {\n      this.stateSubject.next({\n        ...currentState,\n        isSearching: false,\n        filteredOptions: this.getAllOptions(),\n        filteredGroups: this.getAllGroups()\n      });\n      return;\n    }\n\n    const filteredOptions = this.filterOptions(this.getAllOptions(), searchTerm);\n    const filteredGroups = this.filterGroups(this.getAllGroups(), searchTerm);\n\n    this.stateSubject.next({\n      ...currentState,\n      filteredOptions,\n      filteredGroups,\n      isSearching: false\n    });\n  }\n\n  /**\n   * Filter options based on search term\n   */\n  private filterOptions(options: SelectorOption[], searchTerm: string): SelectorOption[] {\n    const term = searchTerm.toLowerCase();\n    return options.filter(option => \n      option.label.toLowerCase().includes(term) ||\n      (option.description && option.description.toLowerCase().includes(term)) ||\n      (option.badge && option.badge.toLowerCase().includes(term))\n    );\n  }\n\n  /**\n   * Filter groups and their options based on search term\n   */\n  private filterGroups(groups: SelectorGroup[], searchTerm: string): SelectorGroup[] {\n    const term = searchTerm.toLowerCase();\n    \n    return groups\n      .map(group => ({\n        ...group,\n        options: this.filterOptions(group.options, searchTerm)\n      }))\n      .filter(group => \n        group.label.toLowerCase().includes(term) ||\n        group.options.length > 0\n      );\n  }\n\n  /**\n   * Select an option\n   */\n  selectOption(option: SelectorOption, mode: SelectorMode): void {\n    const currentState = this.stateSubject.value;\n    let selectedOptions: SelectorOption[];\n    let selectedValues: any[];\n\n    if (mode === 'single') {\n      selectedOptions = [option];\n      selectedValues = [option.value];\n    } else {\n      // Multiple selection\n      if (this.isOptionSelected(option)) {\n        // Deselect option\n        selectedOptions = currentState.selectedOptions.filter(opt => opt.id !== option.id);\n        selectedValues = currentState.selectedValues.filter(val => val !== option.value);\n      } else {\n        // Select option\n        selectedOptions = [...currentState.selectedOptions, option];\n        selectedValues = [...currentState.selectedValues, option.value];\n      }\n    }\n\n    this.stateSubject.next({\n      ...currentState,\n      selectedOptions,\n      selectedValues\n    });\n  }\n\n  /**\n   * Deselect an option\n   */\n  deselectOption(option: SelectorOption): void {\n    const currentState = this.stateSubject.value;\n    const selectedOptions = currentState.selectedOptions.filter(opt => opt.id !== option.id);\n    const selectedValues = currentState.selectedValues.filter(val => val !== option.value);\n\n    this.stateSubject.next({\n      ...currentState,\n      selectedOptions,\n      selectedValues\n    });\n  }\n\n  /**\n   * Clear all selections\n   */\n  clearSelection(): void {\n    const currentState = this.stateSubject.value;\n    this.stateSubject.next({\n      ...currentState,\n      selectedOptions: [],\n      selectedValues: []\n    });\n  }\n\n  /**\n   * Set selected values programmatically\n   */\n  setSelectedValues(values: any[]): void {\n    const currentState = this.stateSubject.value;\n    const allOptions = [...this.getAllOptions(), ...this.getAllGroupOptions()];\n    const selectedOptions = allOptions.filter(option => values.includes(option.value));\n\n    this.stateSubject.next({\n      ...currentState,\n      selectedOptions,\n      selectedValues: values\n    });\n  }\n\n  /**\n   * Check if an option is selected\n   */\n  isOptionSelected(option: SelectorOption): boolean {\n    const currentState = this.stateSubject.value;\n    return currentState.selectedOptions.some(opt => opt.id === option.id);\n  }\n\n  /**\n   * Toggle group collapse state\n   */\n  toggleGroup(groupId: string): void {\n    // This would be implemented if groups are managed by the service\n    // For now, groups are managed by the component\n  }\n\n  /**\n   * Validate current selection\n   */\n  validateSelection(config: SelectorConfig): string | null {\n    const currentState = this.stateSubject.value;\n    const selectedCount = currentState.selectedOptions.length;\n\n    if (config.validation) {\n      const { required, minSelection, maxSelection, customValidator } = config.validation;\n\n      if (required && selectedCount === 0) {\n        return 'At least one option must be selected';\n      }\n\n      if (minSelection && selectedCount < minSelection) {\n        return `At least ${minSelection} option${minSelection > 1 ? 's' : ''} must be selected`;\n      }\n\n      if (maxSelection && selectedCount > maxSelection) {\n        return `At most ${maxSelection} option${maxSelection > 1 ? 's' : ''} can be selected`;\n      }\n\n      if (customValidator) {\n        return customValidator(currentState.selectedValues);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Set error state\n   */\n  setError(errorMessage: string | null): void {\n    const currentState = this.stateSubject.value;\n    this.stateSubject.next({\n      ...currentState,\n      hasError: !!errorMessage,\n      errorMessage: errorMessage || undefined\n    });\n  }\n\n  /**\n   * Highlight search terms in text\n   */\n  highlightSearchTerm(text: string, searchTerm: string, config: SelectorHighlight): string {\n    if (!config.enabled || !searchTerm.trim()) {\n      return text;\n    }\n\n    const className = config.className || 'selector-highlight';\n    const flags = config.caseSensitive ? 'g' : 'gi';\n    const pattern = config.wholeWord \n      ? new RegExp(`\\\\b${this.escapeRegExp(searchTerm)}\\\\b`, flags)\n      : new RegExp(this.escapeRegExp(searchTerm), flags);\n\n    return text.replace(pattern, `<span class=\"${className}\">$&</span>`);\n  }\n\n  /**\n   * Get keyboard navigation suggestions\n   */\n  getNavigationOptions(): SelectorOption[] {\n    const currentState = this.stateSubject.value;\n    return currentState.filteredOptions.filter(option => !option.disabled);\n  }\n\n  /**\n   * Get current state snapshot\n   */\n  getCurrentState(): SelectorState {\n    return this.stateSubject.value;\n  }\n\n  /**\n   * Reset service state\n   */\n  reset(): void {\n    this.stateSubject.next({\n      selectedOptions: [],\n      selectedValues: [],\n      searchTerm: '',\n      filteredOptions: [],\n      filteredGroups: [],\n      isSearching: false,\n      hasError: false\n    });\n  }\n\n  /**\n   * Helper methods\n   */\n  private getAllOptions(): SelectorOption[] {\n    return this.originalOptions;\n  }\n\n  private getAllGroups(): SelectorGroup[] {\n    return this.originalGroups;\n  }\n\n  private getAllGroupOptions(): SelectorOption[] {\n    return this.getAllGroups().reduce((acc, group) => [...acc, ...group.options], [] as SelectorOption[]);\n  }\n\n  private escapeRegExp(string: string): string {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 30
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TabService",
            "id": "injectable-TabService-0dfbe36d8b5a4a8c4969f2a6b52a0662f620358f2c78b61ad90b9321cfe46ccd7cb961a042b49be1ca93a147358a571b0366bac1ff44b92d09a1e56f4ca3e731",
            "file": "src/app/components/tab/tab.service.ts",
            "properties": [
                {
                    "name": "_config",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabConfig | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_state",
                    "defaultValue": "new BehaviorSubject<TabState>({\n    activeTab: 0,\n    previousTab: -1,\n    isAnimating: false,\n    mountedTabs: new Set()\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "state$",
                    "defaultValue": "this._state.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "findTabById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type | null",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getActiveTabIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getEnabledTabs",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type[]",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFirstEnabledTab",
                    "args": [],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLastEnabledTab",
                    "args": [],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMountedTabs",
                    "args": [],
                    "optional": false,
                    "returnType": "Set<number>",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getNextEnabledTab",
                    "args": [
                        {
                            "name": "currentIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPreviousEnabledTab",
                    "args": [
                        {
                            "name": "currentIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPreviousTabIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTab",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TabItem | null",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "config",
                            "type": "TabConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "TabConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAnimating",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isTabActive",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isTabMounted",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mountTab",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setActiveTab",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAnimating",
                    "args": [
                        {
                            "name": "isAnimating",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isAnimating",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unmountTab",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "Partial<TabConfig>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "Partial<TabConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateTabIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { TabConfig, TabState, TabItem } from './tab.types';\n\n@Injectable()\nexport class TabService {\n  private _state = new BehaviorSubject<TabState>({\n    activeTab: 0,\n    previousTab: -1,\n    isAnimating: false,\n    mountedTabs: new Set()\n  });\n  \n  private _config: TabConfig | null = null;\n  \n  public state$ = this._state.asObservable();\n  \n  get currentState(): TabState {\n    return this._state.value;\n  }\n  \n  get config(): TabConfig | null {\n    return this._config;\n  }\n  \n  initialize(config: TabConfig): void {\n    this._config = config;\n    \n    const initialState: TabState = {\n      activeTab: Math.max(0, Math.min(config.defaultActiveTab || 0, config.tabs.length - 1)),\n      previousTab: -1,\n      isAnimating: false,\n      mountedTabs: new Set()\n    };\n    \n    // Initialize mounted tabs based on lazy loading setting\n    if (config.lazyMount) {\n      initialState.mountedTabs.add(initialState.activeTab);\n    } else {\n      for (let i = 0; i < config.tabs.length; i++) {\n        initialState.mountedTabs.add(i);\n      }\n    }\n    \n    this._state.next(initialState);\n  }\n  \n  setActiveTab(index: number): void {\n    const currentState = this._state.value;\n    const config = this._config;\n    \n    if (!config || index < 0 || index >= config.tabs.length) return;\n    if (config.tabs[index].disabled) return;\n    if (index === currentState.activeTab) return;\n    \n    const newState: TabState = {\n      ...currentState,\n      previousTab: currentState.activeTab,\n      activeTab: index,\n      isAnimating: config.animated || false\n    };\n    \n    // Mount tab if lazy loading\n    if (config.lazyMount) {\n      newState.mountedTabs.add(index);\n    }\n    \n    this._state.next(newState);\n  }\n  \n  mountTab(index: number): void {\n    const currentState = this._state.value;\n    const config = this._config;\n    \n    if (!config || index < 0 || index >= config.tabs.length) return;\n    \n    if (!currentState.mountedTabs.has(index)) {\n      const newMountedTabs = new Set(currentState.mountedTabs);\n      newMountedTabs.add(index);\n      \n      this._state.next({\n        ...currentState,\n        mountedTabs: newMountedTabs\n      });\n    }\n  }\n  \n  unmountTab(index: number): void {\n    const currentState = this._state.value;\n    const config = this._config;\n    \n    if (!config || index < 0 || index >= config.tabs.length) return;\n    if (index === currentState.activeTab) return; // Don't unmount active tab\n    \n    if (currentState.mountedTabs.has(index)) {\n      const newMountedTabs = new Set(currentState.mountedTabs);\n      newMountedTabs.delete(index);\n      \n      this._state.next({\n        ...currentState,\n        mountedTabs: newMountedTabs\n      });\n    }\n  }\n  \n  setAnimating(isAnimating: boolean): void {\n    const currentState = this._state.value;\n    \n    this._state.next({\n      ...currentState,\n      isAnimating\n    });\n  }\n  \n  updateConfig(config: Partial<TabConfig>): void {\n    if (this._config) {\n      this._config = { ...this._config, ...config };\n    }\n  }\n  \n  reset(): void {\n    this._state.next({\n      activeTab: 0,\n      previousTab: -1,\n      isAnimating: false,\n      mountedTabs: new Set()\n    });\n    this._config = null;\n  }\n  \n  // Helper methods\n  isTabActive(index: number): boolean {\n    return this._state.value.activeTab === index;\n  }\n  \n  isTabMounted(index: number): boolean {\n    return this._state.value.mountedTabs.has(index);\n  }\n  \n  getActiveTabIndex(): number {\n    return this._state.value.activeTab;\n  }\n  \n  getPreviousTabIndex(): number {\n    return this._state.value.previousTab;\n  }\n  \n  isAnimating(): boolean {\n    return this._state.value.isAnimating;\n  }\n  \n  getMountedTabs(): Set<number> {\n    return new Set(this._state.value.mountedTabs);\n  }\n  \n  validateTabIndex(index: number): boolean {\n    return this._config ? index >= 0 && index < this._config.tabs.length : false;\n  }\n  \n  getTab(index: number): TabItem | null {\n    if (!this._config || !this.validateTabIndex(index)) return null;\n    return this._config.tabs[index];\n  }\n  \n  findTabById(id: string): { tab: TabItem; index: number } | null {\n    if (!this._config) return null;\n    \n    const index = this._config.tabs.findIndex(tab => tab.id === id);\n    if (index === -1) return null;\n    \n    return {\n      tab: this._config.tabs[index],\n      index\n    };\n  }\n  \n  getEnabledTabs(): { tab: TabItem; index: number }[] {\n    if (!this._config) return [];\n    \n    return this._config.tabs\n      .map((tab, index) => ({ tab, index }))\n      .filter(({ tab }) => !tab.disabled);\n  }\n  \n  getNextEnabledTab(currentIndex: number): number | null {\n    const enabledTabs = this.getEnabledTabs();\n    if (enabledTabs.length === 0) return null;\n    \n    const currentEnabledIndex = enabledTabs.findIndex(({ index }) => index === currentIndex);\n    if (currentEnabledIndex === -1) return enabledTabs[0].index;\n    \n    const nextIndex = (currentEnabledIndex + 1) % enabledTabs.length;\n    return enabledTabs[nextIndex].index;\n  }\n  \n  getPreviousEnabledTab(currentIndex: number): number | null {\n    const enabledTabs = this.getEnabledTabs();\n    if (enabledTabs.length === 0) return null;\n    \n    const currentEnabledIndex = enabledTabs.findIndex(({ index }) => index === currentIndex);\n    if (currentEnabledIndex === -1) return enabledTabs[enabledTabs.length - 1].index;\n    \n    const prevIndex = currentEnabledIndex === 0 ? enabledTabs.length - 1 : currentEnabledIndex - 1;\n    return enabledTabs[prevIndex].index;\n  }\n  \n  getFirstEnabledTab(): number | null {\n    const enabledTabs = this.getEnabledTabs();\n    return enabledTabs.length > 0 ? enabledTabs[0].index : null;\n  }\n  \n  getLastEnabledTab(): number | null {\n    const enabledTabs = this.getEnabledTabs();\n    return enabledTabs.length > 0 ? enabledTabs[enabledTabs.length - 1].index : null;\n  }\n}",
            "accessors": {
                "currentState": {
                    "name": "currentState",
                    "getSignature": {
                        "name": "currentState",
                        "type": "",
                        "returnType": "TabState",
                        "line": 18
                    }
                },
                "config": {
                    "name": "config",
                    "getSignature": {
                        "name": "config",
                        "type": "",
                        "returnType": "TabConfig | null",
                        "line": 22
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-17ab6c8518b25fbe1f55f7da52a18347ba5839bb768249b9fa22392737d7cc64a8526ba05ee574ad4029f602ab3cd15ef321e1e6e111e9103d3e710665f35457",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checkoutSteps",
                    "defaultValue": "[\n    { \n      id: '1', \n      label: 'Cart', \n      description: 'Review items',\n      completed: true\n    },\n    { \n      id: '2', \n      label: 'Shipping', \n      description: 'Delivery details',\n      completed: true\n    },\n    { \n      id: '3', \n      label: 'Payment', \n      description: 'Payment method'\n    },\n    { \n      id: '4', \n      label: 'Review', \n      description: 'Final confirmation'\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StepConfig[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "countries",
                    "defaultValue": "[\n    { id: 'us', label: 'United States', value: 'US', badge: 'Popular' },\n    { id: 'uk', label: 'United Kingdom', value: 'UK' },\n    { id: 'ca', label: 'Canada', value: 'CA' },\n    { id: 'au', label: 'Australia', value: 'AU' },\n    { id: 'de', label: 'Germany', value: 'DE' },\n    { id: 'fr', label: 'France', value: 'FR' }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectorOption[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 189
                },
                {
                    "name": "currentCheckoutStep",
                    "defaultValue": "2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "currentOnboardingStep",
                    "defaultValue": "2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "emailIcon",
                    "defaultValue": "'<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><path d=\"M2 3H14C14.5523 3 15 3.44772 15 4V12C15 12.5523 14.5523 13 14 13H2C1.44772 13 1 12.5523 1 12V4C1 3.44772 1.44772 3 2 3Z\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M15 4L8 8.5L1 4\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "eyeIcon",
                    "defaultValue": "'<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><path d=\"M1 8C1 8 4 2 8 2C12 2 15 8 15 8C15 8 12 14 8 14C4 14 1 8 1 8Z\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><circle cx=\"8\" cy=\"8\" r=\"3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "onboardingSteps",
                    "defaultValue": "[\n    { \n      id: '1', \n      label: 'Account Setup', \n      description: 'Create your account and basic profile',\n      completed: true\n    },\n    { \n      id: '2', \n      label: 'Verification', \n      description: 'Verify your email and phone number',\n      completed: true\n    },\n    { \n      id: '3', \n      label: 'Preferences', \n      description: 'Set your notification and privacy preferences'\n    },\n    { \n      id: '4', \n      label: 'Integration', \n      description: 'Connect with external services', \n      optional: true \n    },\n    { \n      id: '5', \n      label: 'Complete', \n      description: 'You\\'re all set to get started!'\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StepConfig[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "programmingLanguages",
                    "defaultValue": "[\n    {\n      id: 'js',\n      label: 'JavaScript',\n      value: 'javascript',\n      description: 'Dynamic programming language for web development',\n      badge: 'Popular'\n    },\n    {\n      id: 'ts',\n      label: 'TypeScript',\n      value: 'typescript',\n      description: 'Typed superset of JavaScript',\n      badge: 'Growing'\n    },\n    {\n      id: 'py',\n      label: 'Python',\n      value: 'python',\n      description: 'High-level programming language for AI and web development',\n      badge: 'AI/ML'\n    },\n    {\n      id: 'java',\n      label: 'Java',\n      value: 'java',\n      description: 'Object-oriented programming language'\n    },\n    {\n      id: 'cpp',\n      label: 'C++',\n      value: 'cpp',\n      description: 'Systems programming language',\n      disabled: true\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectorOption[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 152
                },
                {
                    "name": "searchIcon",
                    "defaultValue": "'<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><path d=\"M7 7L13 13M7 7C7 7.66667 7.66667 7 8 7S9 7.66667 9 7S8.33333 6.33333 8 6S7 6.33333 7 7ZM15 7C15 11.4183 11.4183 15 7 15C2.58172 15 -1 11.4183 -1 7C-1 2.58172 2.58172 -1 7 -1C11.4183 -1 15 2.58172 15 7Z\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "selectedCountry",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 200
                },
                {
                    "name": "selectedLanguage",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 198
                },
                {
                    "name": "selectedLanguages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 199
                },
                {
                    "name": "title",
                    "defaultValue": "'Angular Component Library Demo'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "onButtonClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCardClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCountryChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInputChange",
                    "args": [
                        {
                            "name": "inputName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLanguageChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLanguagesChange",
                    "args": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onProgressComplete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onStepChange",
                    "args": [
                        {
                            "name": "stepIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "stepIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onStepClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "StepClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "StepClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetProgress",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "simulateError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "simulateProgress",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "CardComponent",
                    "type": "component"
                },
                {
                    "name": "ModalDemoComponent",
                    "type": "component"
                },
                {
                    "name": "ProgressStepsComponent",
                    "type": "component"
                },
                {
                    "name": "SelectorComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonComponent } from './components/button/button.component';\nimport { InputComponent } from './components/input/input.component';\nimport { CardComponent } from './components/card/card.component';\nimport { ModalDemoComponent } from './modal-demo/modal-demo.component';\nimport { ProgressStepsComponent } from './components/progress-steps/progress-steps.component';\nimport { SelectorComponent } from './components/selector/selector.component';\nimport { StepConfig, StepClickEvent } from './components/progress-steps/progress-steps.types';\nimport { SelectorOption } from './components/selector/selector.component';\n\n@Component({\n  selector: 'app-root',\n  imports: [CommonModule, ButtonComponent, InputComponent, CardComponent, ModalDemoComponent, ProgressStepsComponent, SelectorComponent],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss'\n})\nexport class AppComponent {\n  title = 'Angular Component Library Demo';\n\n  // Icon definitions as string SVGs for demo\n  searchIcon = '<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><path d=\"M7 7L13 13M7 7C7 7.66667 7.66667 7 8 7S9 7.66667 9 7S8.33333 6.33333 8 6S7 6.33333 7 7ZM15 7C15 11.4183 11.4183 15 7 15C2.58172 15 -1 11.4183 -1 7C-1 2.58172 2.58172 -1 7 -1C11.4183 -1 15 2.58172 15 7Z\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>';\n  \n  emailIcon = '<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><path d=\"M2 3H14C14.5523 3 15 3.44772 15 4V12C15 12.5523 14.5523 13 14 13H2C1.44772 13 1 12.5523 1 12V4C1 3.44772 1.44772 3 2 3Z\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M15 4L8 8.5L1 4\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>';\n  \n  eyeIcon = '<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"><path d=\"M1 8C1 8 4 2 8 2C12 2 15 8 15 8C15 8 12 14 8 14C4 14 1 8 1 8Z\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><circle cx=\"8\" cy=\"8\" r=\"3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>';\n\n  // Progress Steps demo data\n  onboardingSteps: StepConfig[] = [\n    { \n      id: '1', \n      label: 'Account Setup', \n      description: 'Create your account and basic profile',\n      completed: true\n    },\n    { \n      id: '2', \n      label: 'Verification', \n      description: 'Verify your email and phone number',\n      completed: true\n    },\n    { \n      id: '3', \n      label: 'Preferences', \n      description: 'Set your notification and privacy preferences'\n    },\n    { \n      id: '4', \n      label: 'Integration', \n      description: 'Connect with external services', \n      optional: true \n    },\n    { \n      id: '5', \n      label: 'Complete', \n      description: 'You\\'re all set to get started!'\n    }\n  ];\n\n  currentOnboardingStep = 2;\n\n  checkoutSteps: StepConfig[] = [\n    { \n      id: '1', \n      label: 'Cart', \n      description: 'Review items',\n      completed: true\n    },\n    { \n      id: '2', \n      label: 'Shipping', \n      description: 'Delivery details',\n      completed: true\n    },\n    { \n      id: '3', \n      label: 'Payment', \n      description: 'Payment method'\n    },\n    { \n      id: '4', \n      label: 'Review', \n      description: 'Final confirmation'\n    }\n  ];\n\n  currentCheckoutStep = 2;\n\n  onButtonClick(event: MouseEvent) {\n    console.log('Button clicked!', event);\n  }\n\n  onInputChange(inputName: string, value: string) {\n    console.log(`Input ${inputName} changed:`, value);\n  }\n\n  onCardClick(event: MouseEvent) {\n    console.log('Card clicked!', event);\n    alert('Card was clicked! Check the console for details.');\n  }\n\n  onStepClick(event: StepClickEvent) {\n    console.log('Step clicked:', event);\n    if (event.step.id === '1' || event.step.id === '2') {\n      this.currentOnboardingStep = event.index;\n    }\n  }\n\n  onStepChange(stepIndex: number) {\n    console.log('Step changed to:', stepIndex);\n    this.currentOnboardingStep = stepIndex;\n  }\n\n  onProgressComplete() {\n    console.log('Progress completed!');\n    alert('Congratulations! You have completed all steps.');\n  }\n\n  simulateProgress() {\n    // Simulate completing current step and moving to next\n    if (this.currentOnboardingStep < this.onboardingSteps.length - 1) {\n      this.onboardingSteps[this.currentOnboardingStep].completed = true;\n      this.currentOnboardingStep++;\n    }\n  }\n\n  simulateError() {\n    // Simulate an error on current step\n    if (this.currentOnboardingStep < this.onboardingSteps.length) {\n      this.onboardingSteps[this.currentOnboardingStep].error = true;\n    }\n  }\n\n  resetProgress() {\n    // Reset all steps\n    this.onboardingSteps.forEach(step => {\n      step.completed = false;\n      step.error = false;\n    });\n    this.onboardingSteps[0].completed = true;\n    this.onboardingSteps[1].completed = true;\n    this.currentOnboardingStep = 2;\n  }\n\n  get onboardingProgress(): number {\n    if (!this.onboardingSteps) return 0;\n    const completedSteps = this.onboardingSteps.filter(step => !!step.completed).length;\n    return Math.round((completedSteps / this.onboardingSteps.length) * 100);\n  }\n\n  // Selector demo data\n  programmingLanguages: SelectorOption[] = [\n    {\n      id: 'js',\n      label: 'JavaScript',\n      value: 'javascript',\n      description: 'Dynamic programming language for web development',\n      badge: 'Popular'\n    },\n    {\n      id: 'ts',\n      label: 'TypeScript',\n      value: 'typescript',\n      description: 'Typed superset of JavaScript',\n      badge: 'Growing'\n    },\n    {\n      id: 'py',\n      label: 'Python',\n      value: 'python',\n      description: 'High-level programming language for AI and web development',\n      badge: 'AI/ML'\n    },\n    {\n      id: 'java',\n      label: 'Java',\n      value: 'java',\n      description: 'Object-oriented programming language'\n    },\n    {\n      id: 'cpp',\n      label: 'C++',\n      value: 'cpp',\n      description: 'Systems programming language',\n      disabled: true\n    }\n  ];\n\n  countries: SelectorOption[] = [\n    { id: 'us', label: 'United States', value: 'US', badge: 'Popular' },\n    { id: 'uk', label: 'United Kingdom', value: 'UK' },\n    { id: 'ca', label: 'Canada', value: 'CA' },\n    { id: 'au', label: 'Australia', value: 'AU' },\n    { id: 'de', label: 'Germany', value: 'DE' },\n    { id: 'fr', label: 'France', value: 'FR' }\n  ];\n\n  selectedLanguage: any = null;\n  selectedLanguages: any[] = [];\n  selectedCountry: any = null;\n\n  onLanguageChange(value: any) {\n    this.selectedLanguage = value;\n    console.log('Selected language:', value);\n  }\n\n  onLanguagesChange(values: any[]) {\n    this.selectedLanguages = values;\n    console.log('Selected languages:', values);\n  }\n\n  onCountryChange(value: any) {\n    this.selectedCountry = value;\n    console.log('Selected country:', value);\n  }\n}\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "onboardingProgress": {
                    "name": "onboardingProgress",
                    "getSignature": {
                        "name": "onboardingProgress",
                        "type": "number",
                        "returnType": "number",
                        "line": 145
                    }
                }
            },
            "templateData": "<div class=\"demo-container\">\n  <h1>{{ title }}</h1>\n  <p class=\"subtitle\">Pixel-perfect Angular Components - 100% parity with React versions</p>\n  \n  <!-- Primary Variants -->\n  <section class=\"demo-section\">\n    <h2>Button Variants</h2>\n    <div class=\"button-grid\">\n      <div class=\"button-demo\">\n        <label>Primary</label>\n        <app-button variant=\"primary\" (onClick)=\"onButtonClick($event)\">Primary Button</app-button>\n      </div>\n      \n      <div class=\"button-demo\">\n        <label>Secondary</label>\n        <app-button variant=\"secondary\" (onClick)=\"onButtonClick($event)\">Secondary Button</app-button>\n      </div>\n      \n      <div class=\"button-demo\">\n        <label>Ghost</label>\n        <app-button variant=\"ghost\" (onClick)=\"onButtonClick($event)\">Ghost Button</app-button>\n      </div>\n      \n      <div class=\"button-demo\">\n        <label>Destructive</label>\n        <app-button variant=\"destructive\" (onClick)=\"onButtonClick($event)\">Delete</app-button>\n      </div>\n      \n      <div class=\"button-demo\">\n        <label>Success</label>\n        <app-button variant=\"success\" (onClick)=\"onButtonClick($event)\">Complete</app-button>\n      </div>\n      \n      <div class=\"button-demo\">\n        <label>Outline</label>\n        <app-button variant=\"outline\" (onClick)=\"onButtonClick($event)\">Outline</app-button>\n      </div>\n    </div>\n  </section>\n\n  <!-- Size Variants -->\n  <section class=\"demo-section\">\n    <h2>Size Variants</h2>\n    <div class=\"button-grid\">\n      <div class=\"button-demo\">\n        <label>Small</label>\n        <app-button size=\"small\" (onClick)=\"onButtonClick($event)\">Small Button</app-button>\n      </div>\n      \n      <div class=\"button-demo\">\n        <label>Medium</label>\n        <app-button size=\"medium\" (onClick)=\"onButtonClick($event)\">Medium Button</app-button>\n      </div>\n      \n      <div class=\"button-demo\">\n        <label>Large</label>\n        <app-button size=\"large\" (onClick)=\"onButtonClick($event)\">Large Button</app-button>\n      </div>\n      \n      <div class=\"button-demo\">\n        <label>XLarge</label>\n        <app-button size=\"xlarge\" (onClick)=\"onButtonClick($event)\">XLarge Button</app-button>\n      </div>\n    </div>\n  </section>\n\n  <!-- State Variants -->\n  <section class=\"demo-section\">\n    <h2>State Variants</h2>\n    <div class=\"button-grid\">\n      <div class=\"button-demo\">\n        <label>Normal</label>\n        <app-button (onClick)=\"onButtonClick($event)\">Normal State</app-button>\n      </div>\n      \n      <div class=\"button-demo\">\n        <label>Disabled</label>\n        <app-button [disabled]=\"true\" (onClick)=\"onButtonClick($event)\">Disabled Button</app-button>\n      </div>\n      \n      <div class=\"button-demo\">\n        <label>Loading</label>\n        <app-button [loading]=\"true\" (onClick)=\"onButtonClick($event)\">Loading...</app-button>\n      </div>\n      \n      <div class=\"button-demo\">\n        <label>Full Width</label>\n        <app-button [fullWidth]=\"true\" (onClick)=\"onButtonClick($event)\">Full Width Button</app-button>\n      </div>\n    </div>\n  </section>\n\n  <!-- Icon Variants -->\n  <section class=\"demo-section\">\n    <h2>Icon Variants</h2>\n    <div class=\"button-grid\">\n      <div class=\"button-demo\">\n        <label>With Icon Left</label>\n        <app-button iconPosition=\"left\" (onClick)=\"onButtonClick($event)\">\n          <svg slot=\"icon-left\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n            <path d=\"M6 12L10 8L6 4\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n          Save & Continue\n        </app-button>\n      </div>\n      \n      <div class=\"button-demo\">\n        <label>With Icon Right</label>\n        <app-button iconPosition=\"right\" (onClick)=\"onButtonClick($event)\">\n          Download\n          <svg slot=\"icon-right\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n            <path d=\"M8 12L12 8L8 4M8 12L4 8L8 4\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </app-button>\n      </div>\n      \n      <div class=\"button-demo\">\n        <label>Icon Only</label>\n        <app-button [iconOnly]=\"true\" variant=\"ghost\" (onClick)=\"onButtonClick($event)\">\n          <svg slot=\"icon\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n            <path d=\"M12 4L4 12M4 4L12 12\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </app-button>\n      </div>\n    </div>\n  </section>\n\n  <!-- Input Component Demo Section -->\n  <section class=\"demo-section\">\n    <h2>Input Component</h2>\n    \n    <!-- Size Variants -->\n    <div class=\"input-subsection\">\n      <h3>Size Variants</h3>\n      <div class=\"input-grid\">\n        <div class=\"input-demo\">\n          <app-input \n            size=\"sm\" \n            label=\"Small Input\" \n            placeholder=\"Enter text here...\"\n            (valueChange)=\"onInputChange('small', $event)\">\n          </app-input>\n        </div>\n        \n        <div class=\"input-demo\">\n          <app-input \n            size=\"base\" \n            label=\"Base Input (Default)\" \n            placeholder=\"Enter text here...\"\n            (valueChange)=\"onInputChange('base', $event)\">\n          </app-input>\n        </div>\n        \n        <div class=\"input-demo\">\n          <app-input \n            size=\"lg\" \n            label=\"Large Input\" \n            placeholder=\"Enter text here...\"\n            (valueChange)=\"onInputChange('large', $event)\">\n          </app-input>\n        </div>\n      </div>\n    </div>\n\n    <!-- Style Variants -->\n    <div class=\"input-subsection\">\n      <h3>Style Variants</h3>\n      <div class=\"input-grid\">\n        <div class=\"input-demo\">\n          <app-input \n            variant=\"default\" \n            label=\"Default Variant\" \n            placeholder=\"Default styling\"\n            (valueChange)=\"onInputChange('default', $event)\">\n          </app-input>\n        </div>\n        \n        <div class=\"input-demo\">\n          <app-input \n            variant=\"filled\" \n            label=\"Filled Variant\" \n            placeholder=\"Filled background\"\n            (valueChange)=\"onInputChange('filled', $event)\">\n          </app-input>\n        </div>\n        \n        <div class=\"input-demo\">\n          <app-input \n            variant=\"ghost\" \n            label=\"Ghost Variant\" \n            placeholder=\"Transparent background\"\n            (valueChange)=\"onInputChange('ghost', $event)\">\n          </app-input>\n        </div>\n      </div>\n    </div>\n\n    <!-- State Variants -->\n    <div class=\"input-subsection\">\n      <h3>State Variants</h3>\n      <div class=\"input-grid\">\n        <div class=\"input-demo\">\n          <app-input \n            state=\"default\" \n            label=\"Default State\" \n            placeholder=\"Normal input\"\n            helperText=\"This is helper text to guide the user\"\n            (valueChange)=\"onInputChange('default-state', $event)\">\n          </app-input>\n        </div>\n        \n        <div class=\"input-demo\">\n          <app-input \n            state=\"error\" \n            label=\"Error State\" \n            placeholder=\"Invalid input\"\n            errorMessage=\"This field is required\"\n            (valueChange)=\"onInputChange('error-state', $event)\">\n          </app-input>\n        </div>\n        \n        <div class=\"input-demo\">\n          <app-input \n            state=\"success\" \n            label=\"Success State\" \n            placeholder=\"Valid input\"\n            helperText=\"This field is valid\"\n            (valueChange)=\"onInputChange('success-state', $event)\">\n          </app-input>\n        </div>\n      </div>\n    </div>\n\n    <!-- Special States -->\n    <div class=\"input-subsection\">\n      <h3>Special States</h3>\n      <div class=\"input-grid\">\n        <div class=\"input-demo\">\n          <app-input \n            label=\"Required Field\" \n            placeholder=\"Required input\"\n            [required]=\"true\"\n            helperText=\"This field is required\"\n            (valueChange)=\"onInputChange('required', $event)\">\n          </app-input>\n        </div>\n        \n        <div class=\"input-demo\">\n          <app-input \n            label=\"Disabled Field\" \n            placeholder=\"Disabled input\"\n            [disabled]=\"true\"\n            value=\"Disabled value\"\n            helperText=\"This field is disabled\">\n          </app-input>\n        </div>\n        \n        <div class=\"input-demo\">\n          <app-input \n            type=\"password\" \n            label=\"Password Field\" \n            placeholder=\"Enter password\"\n            helperText=\"Must be at least 8 characters\"\n            (valueChange)=\"onInputChange('password', $event)\">\n          </app-input>\n        </div>\n      </div>\n    </div>\n\n    <!-- Input Types -->\n    <div class=\"input-subsection\">\n      <h3>Input Types</h3>\n      <div class=\"input-grid\">\n        <div class=\"input-demo\">\n          <app-input \n            type=\"email\" \n            label=\"Email Address\" \n            placeholder=\"user@example.com\"\n            helperText=\"Enter a valid email address\"\n            (valueChange)=\"onInputChange('email', $event)\">\n          </app-input>\n        </div>\n        \n        <div class=\"input-demo\">\n          <app-input \n            type=\"number\" \n            label=\"Phone Number\" \n            placeholder=\"(555) 123-4567\"\n            helperText=\"Include area code\"\n            (valueChange)=\"onInputChange('phone', $event)\">\n          </app-input>\n        </div>\n        \n        <div class=\"input-demo\">\n          <app-input \n            type=\"search\" \n            label=\"Search\" \n            placeholder=\"Search for anything...\"\n            helperText=\"Press Enter to search\"\n            (valueChange)=\"onInputChange('search', $event)\">\n          </app-input>\n        </div>\n      </div>\n    </div>\n\n    <!-- With Icons -->\n    <div class=\"input-subsection\">\n      <h3>With Icons</h3>\n      <div class=\"input-grid\">\n        <div class=\"input-demo\">\n          <app-input \n            label=\"Search with Icon\" \n            placeholder=\"Search...\"\n            [startIcon]=\"searchIcon\"\n            helperText=\"Search across all content\"\n            (valueChange)=\"onInputChange('search-icon', $event)\">\n          </app-input>\n        </div>\n        \n        <div class=\"input-demo\">\n          <app-input \n            label=\"Email with Icon\" \n            type=\"email\"\n            placeholder=\"Enter email\"\n            [endIcon]=\"emailIcon\"\n            helperText=\"We'll never share your email\"\n            (valueChange)=\"onInputChange('email-icon', $event)\">\n          </app-input>\n        </div>\n        \n        <div class=\"input-demo\">\n          <app-input \n            label=\"Password with Toggle\" \n            type=\"password\"\n            placeholder=\"Enter password\"\n            [endIcon]=\"eyeIcon\"\n            helperText=\"At least 8 characters\"\n            (valueChange)=\"onInputChange('password-toggle', $event)\">\n          </app-input>\n        </div>\n      </div>\n    </div>\n  </section>\n\n  <!-- Card Component Demo Section -->\n  <section class=\"demo-section\">\n    <h2>Card Component</h2>\n    \n    <!-- Variant Showcase -->\n    <div class=\"input-subsection\">\n      <h3>Card Variants</h3>\n      <div class=\"card-grid\">\n        <app-card variant=\"default\">\n          <p><strong>Default Card</strong></p>\n          <p>Clean border design with subtle styling perfect for most content layouts.</p>\n        </app-card>\n        \n        <app-card variant=\"elevated\">\n          <p><strong>Elevated Card</strong></p>\n          <p>Subtle shadow provides depth and makes the card appear to float above the page.</p>\n        </app-card>\n        \n        <app-card variant=\"outlined\">\n          <p><strong>Outlined Card</strong></p>\n          <p>Prominent border for clear content separation and definition.</p>\n        </app-card>\n        \n        <app-card variant=\"flat\">\n          <p><strong>Flat Card</strong></p>\n          <p>Background fill design without borders for seamless integration.</p>\n        </app-card>\n      </div>\n    </div>\n\n    <!-- Size Variants -->\n    <div class=\"input-subsection\">\n      <h3>Size Variants</h3>\n      <div class=\"card-grid\">\n        <app-card variant=\"outlined\" size=\"small\">\n          <p><strong>Small Card</strong></p>\n          <p>Compact size perfect for sidebar content or tight layouts.</p>\n        </app-card>\n        \n        <app-card variant=\"outlined\" size=\"medium\">\n          <p><strong>Medium Card</strong></p>\n          <p>Default size that works well for most content types and layouts.</p>\n        </app-card>\n        \n        <app-card variant=\"outlined\" size=\"large\">\n          <p><strong>Large Card</strong></p>\n          <p>Spacious design for detailed content, forms, or complex layouts.</p>\n        </app-card>\n      </div>\n    </div>\n\n    <!-- Interactive Cards -->\n    <div class=\"input-subsection\">\n      <h3>Interactive Cards</h3>\n      <div class=\"card-grid\">\n        <app-card \n          variant=\"elevated\" \n          [clickable]=\"true\" \n          (onClick)=\"onCardClick($event)\"\n          ariaLabel=\"Clickable card example\">\n          <p><strong>Clickable Card</strong></p>\n          <p>This card responds to clicks and keyboard interaction. Try clicking or using Enter/Space!</p>\n        </app-card>\n        \n        <app-card variant=\"default\" [loading]=\"true\">\n          <p><strong>Loading Card</strong></p>\n          <p>This card is in a loading state with spinner overlay.</p>\n        </app-card>\n        \n        <app-card variant=\"outlined\" [disabled]=\"true\" [clickable]=\"true\">\n          <p><strong>Disabled Card</strong></p>\n          <p>This card is disabled and cannot be interacted with.</p>\n        </app-card>\n      </div>\n    </div>\n\n    <!-- Cards with Headers and Footers -->\n    <div class=\"input-subsection\">\n      <h3>Header & Footer Cards</h3>\n      <div class=\"card-grid\">\n        <app-card \n          variant=\"default\" \n          headerTitle=\"User Profile\" \n          headerSubtitle=\"Manage your account settings\">\n          <p>This card includes a header section with title and subtitle for better content organization.</p>\n        </app-card>\n        \n        <app-card \n          variant=\"outlined\" \n          headerTitle=\"Confirmation Required\"\n          [showFooter]=\"true\">\n          <p>Are you sure you want to delete this item? This action cannot be undone.</p>\n          \n          <div slot=\"footer\">\n            <app-button variant=\"secondary\" size=\"small\">Cancel</app-button>\n            <app-button variant=\"destructive\" size=\"small\">Delete</app-button>\n          </div>\n        </app-card>\n      </div>\n    </div>\n\n    <!-- Padding Variations -->\n    <div class=\"input-subsection\">\n      <h3>Padding Variations</h3>\n      <div class=\"card-grid\">\n        <app-card variant=\"outlined\" padding=\"none\">\n          <p><strong>No Padding</strong></p>\n          <p>Content extends to edges.</p>\n        </app-card>\n        \n        <app-card variant=\"outlined\" padding=\"small\">\n          <p><strong>Small Padding</strong></p>\n          <p>Compact spacing for tight layouts.</p>\n        </app-card>\n        \n        <app-card variant=\"outlined\" padding=\"medium\">\n          <p><strong>Medium Padding</strong></p>\n          <p>Balanced spacing (default setting).</p>\n        </app-card>\n        \n        <app-card variant=\"outlined\" padding=\"large\">\n          <p><strong>Large Padding</strong></p>\n          <p>Generous spacing for comfortable reading.</p>\n        </app-card>\n      </div>\n    </div>\n  </section>\n\n  <!-- Modal Component Demo Section -->\n  <section class=\"demo-section\">\n    <h2>Modal Component</h2>\n    <app-modal-demo></app-modal-demo>\n  </section>\n\n  <!-- ProgressSteps Component Demo Section -->\n  <section class=\"demo-section\">\n    <h2>ProgressSteps Component</h2>\n    \n    <!-- Onboarding Example -->\n    <div class=\"input-subsection\">\n      <h3>Onboarding Flow Example</h3>\n      <div class=\"progress-demo\">\n        <app-progress-steps\n          [steps]=\"onboardingSteps\"\n          [currentStep]=\"currentOnboardingStep\"\n          [allowNavigation]=\"true\"\n          [showLabels]=\"true\"\n          [showDescriptions]=\"true\"\n          orientation=\"horizontal\"\n          variant=\"default\"\n          size=\"medium\"\n          [responsive]=\"true\"\n          (stepClick)=\"onStepClick($event)\"\n          (stepChange)=\"onStepChange($event)\"\n          (complete)=\"onProgressComplete()\">\n        </app-progress-steps>\n        \n        <!-- Interactive Controls -->\n        <div class=\"progress-controls\">\n          <app-button variant=\"primary\" size=\"small\" (onClick)=\"simulateProgress()\">\n            Complete Current Step\n          </app-button>\n          <app-button variant=\"destructive\" size=\"small\" (onClick)=\"simulateError()\">\n            Simulate Error\n          </app-button>\n          <app-button variant=\"secondary\" size=\"small\" (onClick)=\"resetProgress()\">\n            Reset Progress\n          </app-button>\n        </div>\n        \n        <div class=\"progress-info\">\n          <p><strong>Current Step:</strong> {{ currentOnboardingStep + 1 }} of {{ onboardingSteps.length }}</p>\n          <p><strong>Progress:</strong> {{ onboardingProgress }}%</p>\n        </div>\n      </div>\n    </div>\n\n    <!-- Checkout Process Example -->\n    <div class=\"input-subsection\">\n      <h3>Checkout Process Example</h3>\n      <div class=\"progress-demo\">\n        <app-progress-steps\n          [steps]=\"checkoutSteps\"\n          [currentStep]=\"currentCheckoutStep\"\n          [allowNavigation]=\"false\"\n          [showLabels]=\"true\"\n          [showDescriptions]=\"true\"\n          orientation=\"horizontal\"\n          variant=\"default\"\n          size=\"medium\"\n          [responsive]=\"true\">\n        </app-progress-steps>\n        \n        <div class=\"progress-info\">\n          <p><strong>Note:</strong> Navigation disabled - users must complete steps in order</p>\n        </div>\n      </div>\n    </div>\n\n    <!-- Size Variants -->\n    <div class=\"input-subsection\">\n      <h3>Size Variants</h3>\n      <div class=\"progress-demo\">\n        <h4>Small Size</h4>\n        <app-progress-steps\n          [steps]=\"[\n            { id: '1', label: 'Step 1', completed: true },\n            { id: '2', label: 'Step 2' },\n            { id: '3', label: 'Step 3' }\n          ]\"\n          [currentStep]=\"1\"\n          [showLabels]=\"true\"\n          [showDescriptions]=\"false\"\n          size=\"small\">\n        </app-progress-steps>\n        \n        <h4>Medium Size (Default)</h4>\n        <app-progress-steps\n          [steps]=\"[\n            { id: '1', label: 'Step 1', completed: true },\n            { id: '2', label: 'Step 2' },\n            { id: '3', label: 'Step 3' }\n          ]\"\n          [currentStep]=\"1\"\n          [showLabels]=\"true\"\n          [showDescriptions]=\"false\"\n          size=\"medium\">\n        </app-progress-steps>\n        \n        <h4>Large Size</h4>\n        <app-progress-steps\n          [steps]=\"[\n            { id: '1', label: 'Step 1', completed: true },\n            { id: '2', label: 'Step 2' },\n            { id: '3', label: 'Step 3' }\n          ]\"\n          [currentStep]=\"1\"\n          [showLabels]=\"true\"\n          [showDescriptions]=\"false\"\n          size=\"large\">\n        </app-progress-steps>\n      </div>\n    </div>\n\n    <!-- Vertical Layout -->\n    <div class=\"input-subsection\">\n      <h3>Vertical Layout</h3>\n      <div class=\"progress-demo vertical-layout\">\n        <app-progress-steps\n          [steps]=\"[\n            { id: '1', label: 'Personal Information', description: 'Basic details', completed: true },\n            { id: '2', label: 'Address Details', description: 'Location info', completed: true },\n            { id: '3', label: 'Payment Method', description: 'Billing info' },\n            { id: '4', label: 'Review & Submit', description: 'Final check' }\n          ]\"\n          [currentStep]=\"2\"\n          [allowNavigation]=\"true\"\n          [showLabels]=\"true\"\n          [showDescriptions]=\"true\"\n          orientation=\"vertical\"\n          size=\"medium\">\n        </app-progress-steps>\n      </div>\n    </div>\n\n    <!-- Variants -->\n    <div class=\"input-subsection\">\n      <h3>Variants</h3>\n      <div class=\"progress-demo\">\n        <h4>Compact Variant</h4>\n        <app-progress-steps\n          [steps]=\"[\n            { id: '1', label: 'Start', completed: true },\n            { id: '2', label: 'Process' },\n            { id: '3', label: 'Review' },\n            { id: '4', label: 'Complete' }\n          ]\"\n          [currentStep]=\"1\"\n          [showLabels]=\"false\"\n          [showDescriptions]=\"false\"\n          variant=\"compact\">\n        </app-progress-steps>\n        \n        <h4>Minimal Variant</h4>\n        <app-progress-steps\n          [steps]=\"[\n            { id: '1', label: 'Start', completed: true },\n            { id: '2', label: 'Process' },\n            { id: '3', label: 'Review' },\n            { id: '4', label: 'Complete' }\n          ]\"\n          [currentStep]=\"1\"\n          [showLabels]=\"true\"\n          [showDescriptions]=\"false\"\n          variant=\"minimal\">\n        </app-progress-steps>\n      </div>\n    </div>\n\n    <!-- Error and Special States -->\n    <div class=\"input-subsection\">\n      <h3>Error and Special States</h3>\n      <div class=\"progress-demo\">\n        <app-progress-steps\n          [steps]=\"[\n            { id: '1', label: 'Validation', description: 'Check data', completed: true },\n            { id: '2', label: 'Processing', description: 'Handle request', error: true },\n            { id: '3', label: 'Optional Step', description: 'Extra config', optional: true },\n            { id: '4', label: 'Finalization', description: 'Complete', disabled: true }\n          ]\"\n          [currentStep]=\"1\"\n          [allowNavigation]=\"true\"\n          [showLabels]=\"true\"\n          [showDescriptions]=\"true\">\n        </app-progress-steps>\n        \n        <div class=\"progress-info\">\n          <p><strong>Legend:</strong></p>\n          <ul>\n            <li>✅ Completed steps</li>\n            <li>❌ Error states</li>\n            <li>⭕ Optional steps</li>\n            <li>🚫 Disabled steps</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </section>\n\n  <!-- Selector Component Demo Section -->\n  <section class=\"demo-section\">\n    <h2>Selector Component</h2>\n    \n    <!-- Basic Selection -->\n    <div class=\"input-subsection\">\n      <h3>Single Selection</h3>\n      <div class=\"selector-demo\">\n        <app-selector\n          [options]=\"programmingLanguages\"\n          mode=\"single\"\n          label=\"Primary Programming Language\"\n          placeholder=\"Choose your main language...\"\n          helperText=\"Select the language you use most often\"\n          [searchable]=\"true\"\n          [clearable]=\"true\"\n          (selectionChange)=\"onLanguageChange($event)\">\n        </app-selector>\n        \n        <div *ngIf=\"selectedLanguage\" class=\"selection-output\">\n          <strong>Selected:</strong> {{ selectedLanguage }}\n        </div>\n      </div>\n    </div>\n\n    <!-- Multiple Selection -->\n    <div class=\"input-subsection\">\n      <h3>Multiple Selection</h3>\n      <div class=\"selector-demo\">\n        <app-selector\n          [options]=\"programmingLanguages\"\n          mode=\"multiple\"\n          label=\"Programming Languages\"\n          placeholder=\"Choose languages you know...\"\n          helperText=\"Select all languages you are proficient in\"\n          [searchable]=\"true\"\n          [clearable]=\"true\"\n          [maxSelection]=\"3\"\n          (selectionChange)=\"onLanguagesChange($event)\">\n        </app-selector>\n        \n        <div *ngIf=\"selectedLanguages.length > 0\" class=\"selection-output\">\n          <strong>Selected:</strong> {{ selectedLanguages.join(', ') }}\n        </div>\n      </div>\n    </div>\n\n    <!-- Grid Layout -->\n    <div class=\"input-subsection\">\n      <h3>Grid Layout</h3>\n      <div class=\"selector-demo\">\n        <app-selector\n          [options]=\"countries\"\n          mode=\"single\"\n          layout=\"grid\"\n          [gridColumns]=\"3\"\n          variant=\"card\"\n          label=\"Country\"\n          placeholder=\"Select your country...\"\n          helperText=\"Choose where you are located\"\n          [searchable]=\"true\"\n          (selectionChange)=\"onCountryChange($event)\">\n        </app-selector>\n        \n        <div *ngIf=\"selectedCountry\" class=\"selection-output\">\n          <strong>Selected Country:</strong> {{ selectedCountry }}\n        </div>\n      </div>\n    </div>\n\n    <!-- Size Variants -->\n    <div class=\"input-subsection\">\n      <h3>Size Variants</h3>\n      <div class=\"selector-grid\">\n        <div class=\"selector-demo\">\n          <h4>Small</h4>\n          <app-selector\n            [options]=\"countries.slice(0, 4)\"\n            mode=\"single\"\n            size=\"sm\"\n            label=\"Country (Small)\"\n            placeholder=\"Select...\"\n            [searchable]=\"false\">\n          </app-selector>\n        </div>\n        \n        <div class=\"selector-demo\">\n          <h4>Base (Default)</h4>\n          <app-selector\n            [options]=\"countries.slice(0, 4)\"\n            mode=\"single\"\n            size=\"base\"\n            label=\"Country (Base)\"\n            placeholder=\"Select...\"\n            [searchable]=\"false\">\n          </app-selector>\n        </div>\n        \n        <div class=\"selector-demo\">\n          <h4>Large</h4>\n          <app-selector\n            [options]=\"countries.slice(0, 4)\"\n            mode=\"single\"\n            size=\"lg\"\n            label=\"Country (Large)\"\n            placeholder=\"Select...\"\n            [searchable]=\"false\">\n          </app-selector>\n        </div>\n      </div>\n    </div>\n\n    <!-- Variant Styles -->\n    <div class=\"input-subsection\">\n      <h3>Variant Styles</h3>\n      <div class=\"selector-grid\">\n        <div class=\"selector-demo\">\n          <h4>Default</h4>\n          <app-selector\n            [options]=\"programmingLanguages.slice(0, 3)\"\n            mode=\"single\"\n            variant=\"default\"\n            label=\"Language\"\n            placeholder=\"Select...\"\n            [searchable]=\"false\">\n          </app-selector>\n        </div>\n        \n        <div class=\"selector-demo\">\n          <h4>Card</h4>\n          <app-selector\n            [options]=\"programmingLanguages.slice(0, 3)\"\n            mode=\"single\"\n            variant=\"card\"\n            label=\"Language\"\n            placeholder=\"Select...\"\n            [searchable]=\"false\">\n          </app-selector>\n        </div>\n        \n        <div class=\"selector-demo\">\n          <h4>Minimal</h4>\n          <app-selector\n            [options]=\"programmingLanguages.slice(0, 3)\"\n            mode=\"single\"\n            variant=\"minimal\"\n            label=\"Language\"\n            placeholder=\"Select...\"\n            [searchable]=\"false\">\n          </app-selector>\n        </div>\n      </div>\n    </div>\n\n    <!-- Validation States -->\n    <div class=\"input-subsection\">\n      <h3>Validation States</h3>\n      <div class=\"selector-grid\">\n        <div class=\"selector-demo\">\n          <h4>Required</h4>\n          <app-selector\n            [options]=\"countries.slice(0, 4)\"\n            mode=\"single\"\n            label=\"Required Selection\"\n            placeholder=\"Must select...\"\n            [required]=\"true\"\n            helperText=\"This field is required\"\n            [searchable]=\"false\">\n          </app-selector>\n        </div>\n        \n        <div class=\"selector-demo\">\n          <h4>With Error</h4>\n          <app-selector\n            [options]=\"countries.slice(0, 4)\"\n            mode=\"single\"\n            label=\"Error State\"\n            placeholder=\"Select...\"\n            errorMessage=\"Please make a selection\"\n            [searchable]=\"false\">\n          </app-selector>\n        </div>\n        \n        <div class=\"selector-demo\">\n          <h4>Disabled</h4>\n          <app-selector\n            [options]=\"countries.slice(0, 4)\"\n            mode=\"single\"\n            label=\"Disabled Selector\"\n            placeholder=\"Cannot select...\"\n            [disabled]=\"true\"\n            helperText=\"This field is disabled\"\n            [searchable]=\"false\">\n          </app-selector>\n        </div>\n      </div>\n    </div>\n  </section>\n\n  <!-- Comparison Section -->\n  <section class=\"demo-section\">\n    <h2>🎯 Pixel-Perfect Comparison</h2>\n    <div class=\"comparison-note\">\n      <p><strong>✅ Visual Parity Achieved:</strong></p>\n      <ul>\n        <li>Exact color values from React design tokens</li>\n        <li>Identical spacing, typography, and sizing</li>\n        <li>Matching hover, focus, and active states</li>\n        <li>Same transitions and form integration</li>\n        <li>Identical accessibility features</li>\n        <li>Complete ControlValueAccessor support</li>\n      </ul>\n      <p><strong>Components Complete:</strong> Button ✅, Input ✅, Card ✅, Form ✅, Modal ✅, ProgressSteps ✅, Selector ✅</p>\n      <p><strong>Next Steps:</strong> Complete Storybook setup for full documentation</p>\n    </div>\n  </section>\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d629e94b3c83ec7be0032dcaaadc2bd9ef56a6f5533a236ab022e17cc01fd4a3c72e5135d587a03a20a8d677b90a67aaf94cced043ea39ee397ed5fb2421356c-1",
            "file": "src/app/components/button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "className",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fullWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "iconOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "iconPosition",
                    "defaultValue": "'left'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "IconPosition",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "ButtonSize",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "ButtonType",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "ButtonVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onButtonClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, HostBinding, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nexport type ButtonVariant = 'primary' | 'secondary' | 'ghost' | 'destructive' | 'success' | 'outline';\nexport type ButtonSize = 'small' | 'medium' | 'large' | 'xlarge';\nexport type ButtonType = 'button' | 'submit' | 'reset';\nexport type IconPosition = 'left' | 'right';\n\n@Component({\n  selector: 'app-button',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ButtonComponent {\n  @Input() variant: ButtonVariant = 'primary';\n  @Input() size: ButtonSize = 'medium';\n  @Input() disabled: boolean = false;\n  @Input() loading: boolean = false;\n  @Input() type: ButtonType = 'button';\n  @Input() fullWidth: boolean = false;\n  @Input() iconPosition: IconPosition = 'left';\n  @Input() iconOnly: boolean = false;\n  @Input() className: string = '';\n  @Input() ariaLabel: string = '';\n\n  @Output() onClick = new EventEmitter<MouseEvent>();\n\n  // Remove HostBinding to avoid conflicts\n\n  get computedClasses(): string {\n    return [\n      'button',\n      this.variant,\n      this.size,\n      this.loading ? 'loading' : '',\n      this.iconOnly ? 'icon-only' : '',\n      this.fullWidth ? 'full-width' : '',\n      this.className\n    ].filter(Boolean).join(' ');\n  }\n\n  get isDisabled(): boolean {\n    return this.disabled || this.loading;\n  }\n\n  onButtonClick(event: MouseEvent): void {\n    if (!this.isDisabled) {\n      this.onClick.emit(event);\n    }\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* Base Button Styles - Exact match with React version */\n.button {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  gap: var(--spacing-2);\n  font-family: var(--font-family-base);\n  font-weight: var(--font-weight-medium);\n  border: none;\n  border-radius: var(--radius-md);\n  cursor: pointer;\n  transition: all var(--animation-duration-base) var(--animation-ease-in-out);\n  outline: none;\n  position: relative;\n  overflow: hidden;\n  text-decoration: none;\n  white-space: nowrap;\n  box-sizing: border-box;\n  min-height: 0;\n  line-height: 1;\n  \n  /* Force height constraints to prevent expansion */\n  flex-shrink: 0;\n  flex-grow: 0;\n  \n  /* Ensure content doesn't expand the button */\n  > * {\n    flex-shrink: 0;\n    line-height: 1;\n  }\n}\n\n.button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.button:focus {\n  box-shadow: var(--shadow-focus);\n}\n\n/* Variants - Exact match with React CSS */\n.primary {\n  background-color: var(--color-primary-600);\n  color: var(--color-text-on-primary);\n  box-shadow: var(--shadow-xs);\n}\n\n.primary:hover:not(:disabled) {\n  background-color: var(--color-primary-700);\n  box-shadow: var(--shadow-sm);\n}\n\n.primary:active:not(:disabled) {\n  background-color: var(--color-primary-800);\n  transform: translateY(1px);\n}\n\n.secondary {\n  background-color: var(--color-background-primary);\n  color: var(--color-text-primary);\n  border: 1px solid var(--color-border-primary);\n  box-shadow: var(--shadow-xs);\n}\n\n.secondary:hover:not(:disabled) {\n  background-color: var(--color-background-secondary);\n  border-color: var(--color-border-hover);\n}\n\n.secondary:active:not(:disabled) {\n  background-color: var(--color-background-tertiary);\n}\n\n.ghost {\n  background-color: transparent;\n  color: var(--color-text-primary);\n  border: 1px solid transparent;\n}\n\n.ghost:hover:not(:disabled) {\n  background-color: var(--color-background-secondary);\n  border-color: var(--color-border-primary);\n}\n\n.ghost:active:not(:disabled) {\n  background-color: var(--color-background-tertiary);\n}\n\n.destructive {\n  background-color: var(--color-error-600);\n  color: var(--color-text-on-primary);\n  box-shadow: var(--shadow-xs);\n}\n\n.destructive:hover:not(:disabled) {\n  background-color: var(--color-error-700);\n  box-shadow: var(--shadow-sm);\n}\n\n.destructive:active:not(:disabled) {\n  background-color: var(--color-error-800);\n  transform: translateY(1px);\n}\n\n.destructive:focus {\n  box-shadow: var(--shadow-error-focus);\n}\n\n.success {\n  background-color: var(--color-success-600);\n  color: var(--color-text-on-primary);\n  box-shadow: var(--shadow-xs);\n}\n\n.success:hover:not(:disabled) {\n  background-color: var(--color-success-700);\n  box-shadow: var(--shadow-sm);\n}\n\n.success:active:not(:disabled) {\n  background-color: var(--color-success-800);\n  transform: translateY(1px);\n}\n\n.outline {\n  background-color: transparent;\n  color: var(--color-primary-600);\n  border: 1px solid var(--color-primary-600);\n}\n\n.outline:hover:not(:disabled) {\n  background-color: var(--color-primary-50);\n  border-color: var(--color-primary-700);\n  color: var(--color-primary-700);\n}\n\n.outline:active:not(:disabled) {\n  background-color: var(--color-primary-100);\n}\n\n/* Sizes - Exact match with React CSS */\n.small {\n  padding: 0 var(--spacing-3);\n  font-size: var(--font-size-sm);\n  height: var(--button-height-sm) !important;\n  min-height: var(--button-height-sm) !important;\n  max-height: var(--button-height-sm) !important;\n  gap: var(--spacing-1);\n  line-height: 1 !important;\n}\n\n.medium {\n  padding: 0 var(--spacing-4);\n  font-size: var(--font-size-sm);\n  height: var(--button-height-base) !important;\n  min-height: var(--button-height-base) !important;\n  max-height: var(--button-height-base) !important;\n  gap: var(--spacing-2);\n  line-height: 1 !important;\n}\n\n.large {\n  padding: 0 var(--spacing-5);\n  font-size: var(--font-size-base);\n  height: var(--button-height-lg) !important;\n  min-height: var(--button-height-lg) !important;\n  max-height: var(--button-height-lg) !important;\n  gap: var(--spacing-2);\n  line-height: 1 !important;\n}\n\n.xlarge {\n  padding: 0 var(--spacing-6);\n  font-size: var(--font-size-lg);\n  height: var(--button-height-xl) !important;\n  min-height: var(--button-height-xl) !important;\n  max-height: var(--button-height-xl) !important;\n  gap: var(--spacing-3);\n  line-height: 1 !important;\n}\n\n/* Icon */\n.icon {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n}\n\n.icon svg {\n  width: 16px;\n  height: 16px;\n}\n\n.small .icon svg {\n  width: 14px;\n  height: 14px;\n}\n\n.large .icon svg {\n  width: 18px;\n  height: 18px;\n}\n\n.xlarge .icon svg {\n  width: 20px;\n  height: 20px;\n}\n\n/* Loading state */\n.loading {\n  position: relative;\n  color: transparent;\n}\n\n.loading-spinner {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 16px;\n  height: 16px;\n  border: 2px solid transparent;\n  border-top: 2px solid currentColor;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: translate(-50%, -50%) rotate(0deg); }\n  100% { transform: translate(-50%, -50%) rotate(360deg); }\n}\n\n/* Full width */\n.full-width {\n  width: 100%;\n}\n\n/* Icon only */\n.icon-only {\n  aspect-ratio: 1;\n  padding: 0;\n}\n\n.icon-only.small {\n  width: var(--button-height-sm);\n}\n\n.icon-only.medium {\n  width: var(--button-height-base);\n}\n\n.icon-only.large {\n  width: var(--button-height-lg);\n}\n\n.icon-only.xlarge {\n  width: var(--button-height-xl);\n}\n\n/* CRITICAL: Strict height enforcement to prevent button expansion */\n.button {\n  /* Override any inherited line-height */\n  line-height: 1 !important;\n  \n  /* Prevent content from expanding button */\n  .loading-spinner,\n  .icon,\n  span {\n    line-height: 1 !important;\n    flex-shrink: 0 !important;\n    max-height: 100% !important;\n  }\n  \n  /* Ensure all content respects button constraints */\n  > * {\n    line-height: 1 !important;\n    max-height: 100% !important;\n    box-sizing: border-box !important;\n  }\n  \n  /* Handle text content specifically */\n  ng-content {\n    line-height: 1 !important;\n    display: inline-flex !important;\n    align-items: center !important;\n  }\n}\n\n/* Additional safety measures */\napp-button {\n  display: inline-block;\n  line-height: 1 !important;\n  \n  * {\n    line-height: 1 !important;\n  }\n}",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "computedClasses": {
                    "name": "computedClasses",
                    "getSignature": {
                        "name": "computedClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 34
                    }
                },
                "isDisabled": {
                    "name": "isDisabled",
                    "getSignature": {
                        "name": "isDisabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 46
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<button\n  [type]=\"type\"\n  [class]=\"computedClasses\"\n  [disabled]=\"isDisabled\"\n  [attr.aria-disabled]=\"isDisabled\"\n  [attr.aria-label]=\"ariaLabel\"\n  (click)=\"onButtonClick($event)\"\n>\n  <!-- Loading Spinner -->\n  <div *ngIf=\"loading\" class=\"loading-spinner\"></div>\n  \n  <!-- Left Icon Slot -->\n  <span *ngIf=\"iconPosition === 'left'\" class=\"icon\">\n    <ng-content select=\"[slot=icon-left]\"></ng-content>\n  </span>\n  \n  <!-- Content -->\n  <ng-content *ngIf=\"!iconOnly\"></ng-content>\n  \n  <!-- Right Icon Slot -->\n  <span *ngIf=\"iconPosition === 'right'\" class=\"icon\">\n    <ng-content select=\"[slot=icon-right]\"></ng-content>\n  </span>\n  \n  <!-- Icon Only Content -->\n  <ng-content *ngIf=\"iconOnly\" select=\"[slot=icon]\"></ng-content>\n</button>"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-3203ac5fba0a934ff59a7fa4f44017ce06d557b30c6f7ededdcaab5dfa28a8ae6e2ff1e27d101b5db6724e3a97810766766249d7f24ce783b6bf131cc1805d30",
            "file": "src/app/components/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [],
            "styles": [
                "\n    .card {\n      background: white;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      padding: 0;\n      margin: 0;\n      display: block;\n      width: 100%;\n      box-sizing: border-box;\n    }\n    \n    .card-default {\n      border: 1px solid #ddd6e3;\n      box-shadow: none;\n    }\n    \n    .card-elevated {\n      border: 1px solid transparent;\n      box-shadow: 0 1px 3px rgba(16, 24, 40, 0.1), 0 1px 2px rgba(16, 24, 40, 0.06);\n    }\n    \n    .card-outlined {\n      border: 2px solid #ddd6e3;\n      box-shadow: none;\n    }\n    \n    .card-flat {\n      background: #f8f6fa;\n      border: 1px solid transparent;\n      box-shadow: none;\n    }\n    \n    .card-header {\n      padding: 16px 16px 12px 16px;\n      border-bottom: 1px solid #ddd6e3;\n    }\n    \n    .card-header h3 {\n      margin: 0;\n      color: #2a1f35;\n      font-size: 16px;\n      font-weight: 500;\n    }\n    \n    .card-header p {\n      margin: 4px 0 0 0;\n      color: #6b5671;\n      font-size: 14px;\n    }\n    \n    .card-body {\n      padding: 16px;\n      color: #2a1f35;\n      line-height: 1.5;\n    }\n    \n    .card-footer {\n      padding: 12px 16px 16px 16px;\n      border-top: 1px solid #ddd6e3;\n      display: flex;\n      gap: 12px;\n      justify-content: flex-end;\n    }\n    \n    .clickable {\n      cursor: pointer;\n    }\n    \n    .clickable:hover {\n      transform: translateY(-1px);\n      box-shadow: 0 4px 6px rgba(16, 24, 40, 0.1), 0 2px 4px rgba(16, 24, 40, 0.06);\n    }\n  "
            ],
            "template": "<div [class]=\"cardClasses\" (click)=\"handleClick($event)\">\n  <div class=\"card-header\" *ngIf=\"headerTitle || headerSubtitle\">\n    <h3 *ngIf=\"headerTitle\">{{ headerTitle }}</h3>\n    <p *ngIf=\"headerSubtitle\">{{ headerSubtitle }}</p>\n  </div>\n\n  <div class=\"card-body\">\n    <ng-content></ng-content>\n  </div>\n\n  <div class=\"card-footer\" *ngIf=\"showFooter\">\n    <ng-content select=\"[slot=footer]\"></ng-content>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 109,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "clickable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 106,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "headerSubtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 104,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "headerTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 103,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 107,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "padding",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 102,
                    "type": "\"none\" | \"small\" | \"medium\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 110,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showFooter",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 108,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 101,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 100,
                    "type": "\"default\" | \"elevated\" | \"outlined\" | \"flat\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 112,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-card',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <div [class]=\"cardClasses\" (click)=\"handleClick($event)\">\n      <div class=\"card-header\" *ngIf=\"headerTitle || headerSubtitle\">\n        <h3 *ngIf=\"headerTitle\">{{ headerTitle }}</h3>\n        <p *ngIf=\"headerSubtitle\">{{ headerSubtitle }}</p>\n      </div>\n      \n      <div class=\"card-body\">\n        <ng-content></ng-content>\n      </div>\n      \n      <div class=\"card-footer\" *ngIf=\"showFooter\">\n        <ng-content select=\"[slot=footer]\"></ng-content>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .card {\n      background: white;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      padding: 0;\n      margin: 0;\n      display: block;\n      width: 100%;\n      box-sizing: border-box;\n    }\n    \n    .card-default {\n      border: 1px solid #ddd6e3;\n      box-shadow: none;\n    }\n    \n    .card-elevated {\n      border: 1px solid transparent;\n      box-shadow: 0 1px 3px rgba(16, 24, 40, 0.1), 0 1px 2px rgba(16, 24, 40, 0.06);\n    }\n    \n    .card-outlined {\n      border: 2px solid #ddd6e3;\n      box-shadow: none;\n    }\n    \n    .card-flat {\n      background: #f8f6fa;\n      border: 1px solid transparent;\n      box-shadow: none;\n    }\n    \n    .card-header {\n      padding: 16px 16px 12px 16px;\n      border-bottom: 1px solid #ddd6e3;\n    }\n    \n    .card-header h3 {\n      margin: 0;\n      color: #2a1f35;\n      font-size: 16px;\n      font-weight: 500;\n    }\n    \n    .card-header p {\n      margin: 4px 0 0 0;\n      color: #6b5671;\n      font-size: 14px;\n    }\n    \n    .card-body {\n      padding: 16px;\n      color: #2a1f35;\n      line-height: 1.5;\n    }\n    \n    .card-footer {\n      padding: 12px 16px 16px 16px;\n      border-top: 1px solid #ddd6e3;\n      display: flex;\n      gap: 12px;\n      justify-content: flex-end;\n    }\n    \n    .clickable {\n      cursor: pointer;\n    }\n    \n    .clickable:hover {\n      transform: translateY(-1px);\n      box-shadow: 0 4px 6px rgba(16, 24, 40, 0.1), 0 2px 4px rgba(16, 24, 40, 0.06);\n    }\n  `]\n})\nexport class CardComponent {\n  @Input() variant: 'default' | 'elevated' | 'outlined' | 'flat' = 'default';\n  @Input() size: 'small' | 'medium' | 'large' = 'medium';\n  @Input() padding: 'none' | 'small' | 'medium' | 'large' = 'medium';\n  @Input() headerTitle?: string;\n  @Input() headerSubtitle?: string;\n  @Input() clickable: boolean = false;\n  @Input() disabled: boolean = false;\n  @Input() loading: boolean = false;\n  @Input() showFooter: boolean = false;\n  @Input() ariaLabel?: string;\n  @Input() role?: string;\n\n  @Output() onClick = new EventEmitter<MouseEvent>();\n\n  get cardClasses(): string {\n    return [\n      'card',\n      `card-${this.variant}`,\n      this.clickable ? 'clickable' : ''\n    ].filter(Boolean).join(' ');\n  }\n\n  handleClick(event: MouseEvent): void {\n    if (this.clickable && !this.disabled && !this.loading) {\n      this.onClick.emit(event);\n    }\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .card {\n      background: white;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      padding: 0;\n      margin: 0;\n      display: block;\n      width: 100%;\n      box-sizing: border-box;\n    }\n    \n    .card-default {\n      border: 1px solid #ddd6e3;\n      box-shadow: none;\n    }\n    \n    .card-elevated {\n      border: 1px solid transparent;\n      box-shadow: 0 1px 3px rgba(16, 24, 40, 0.1), 0 1px 2px rgba(16, 24, 40, 0.06);\n    }\n    \n    .card-outlined {\n      border: 2px solid #ddd6e3;\n      box-shadow: none;\n    }\n    \n    .card-flat {\n      background: #f8f6fa;\n      border: 1px solid transparent;\n      box-shadow: none;\n    }\n    \n    .card-header {\n      padding: 16px 16px 12px 16px;\n      border-bottom: 1px solid #ddd6e3;\n    }\n    \n    .card-header h3 {\n      margin: 0;\n      color: #2a1f35;\n      font-size: 16px;\n      font-weight: 500;\n    }\n    \n    .card-header p {\n      margin: 4px 0 0 0;\n      color: #6b5671;\n      font-size: 14px;\n    }\n    \n    .card-body {\n      padding: 16px;\n      color: #2a1f35;\n      line-height: 1.5;\n    }\n    \n    .card-footer {\n      padding: 12px 16px 16px 16px;\n      border-top: 1px solid #ddd6e3;\n      display: flex;\n      gap: 12px;\n      justify-content: flex-end;\n    }\n    \n    .clickable {\n      cursor: pointer;\n    }\n    \n    .clickable:hover {\n      transform: translateY(-1px);\n      box-shadow: 0 4px 6px rgba(16, 24, 40, 0.1), 0 2px 4px rgba(16, 24, 40, 0.06);\n    }\n  \n",
            "extends": [],
            "accessors": {
                "cardClasses": {
                    "name": "cardClasses",
                    "getSignature": {
                        "name": "cardClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 114
                    }
                }
            }
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-3bced1c992c5f8750475b30adc44e20e30b78887b6f22f461199cdf12b9855b7f804b10bf77ef3cc2a99423969f51e7c97d5fea205a066f71b3c2baa468e2b5b",
            "file": "src/app/components/form/form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form",
            "styleUrls": [
                "./form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaDescribedBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 117,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 116,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autoComplete",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 101,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "cancelText",
                    "defaultValue": "'Cancel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 106,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 111,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formClassName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 112,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 95,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "layout",
                    "defaultValue": "'single'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "FormLayout",
                    "decorators": []
                },
                {
                    "name": "noValidate",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 100,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "sectionClassName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 113,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "sections",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "FormSection[]",
                    "decorators": []
                },
                {
                    "name": "showCancel",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 107,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showRequiredIndicator",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 102,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'base'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "FormSize",
                    "decorators": []
                },
                {
                    "name": "submitDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 108,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "submitState",
                    "defaultValue": "'idle'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "SubmitState",
                    "decorators": []
                },
                {
                    "name": "submitText",
                    "defaultValue": "'Submit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "validationMode",
                    "defaultValue": "'onSubmit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 97,
                    "type": "FormValidationMode",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCancel",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 121,
                    "type": "EventEmitter"
                },
                {
                    "name": "onFieldChange",
                    "defaultValue": "new EventEmitter<{ fieldName: string; value: any; valid: boolean }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 124,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSectionToggle",
                    "defaultValue": "new EventEmitter<{ sectionId: string; collapsed: boolean }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 123,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSubmit",
                    "defaultValue": "new EventEmitter<FormGroup>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 120,
                    "type": "EventEmitter"
                },
                {
                    "name": "onValidationChange",
                    "defaultValue": "new EventEmitter<{ valid: boolean; errors: ValidationErrors | null }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 122,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_uniqueId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 128,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 127,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "focusFirstInvalidField",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 361,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFieldError",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 330,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSectionClasses",
                    "args": [
                        {
                            "name": "section",
                            "type": "FormSection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "section",
                            "type": "FormSection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markAllFieldsAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 287,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "markFormGroupTouched",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 303,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFormCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 282,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFormSubmit",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 267,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 317,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setFieldError",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "error",
                            "type": "ValidationErrors | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 354,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": "ValidationErrors | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFieldValue",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 347,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupFormValidation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toggleSection",
                    "args": [
                        {
                            "name": "section",
                            "type": "FormSection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "section",
                            "type": "FormSection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateFormValidation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "validateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 323,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { \n  Component, \n  Input, \n  Output, \n  EventEmitter, \n  ChangeDetectionStrategy, \n  ViewEncapsulation,\n  OnInit,\n  OnDestroy,\n  TemplateRef,\n  ContentChildren,\n  QueryList,\n  AfterContentInit\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { \n  FormGroup, \n  FormBuilder, \n  ReactiveFormsModule,\n  AbstractControl,\n  ValidationErrors\n} from '@angular/forms';\nimport { Subject, takeUntil } from 'rxjs';\n\nexport type FormLayout = 'single' | 'two-column' | 'grid' | 'inline';\nexport type FormSize = 'sm' | 'base' | 'lg';\nexport type SubmitState = 'idle' | 'loading' | 'success' | 'error';\nexport type FormValidationMode = 'onSubmit' | 'onChange' | 'onBlur';\n\nexport interface FormSection {\n  id: string;\n  title?: string;\n  description?: string;\n  fields: string[];\n  collapsible?: boolean;\n  collapsed?: boolean;\n}\n\nexport interface FormComponentProps {\n  // Layout Properties\n  layout: FormLayout;\n  size: FormSize;\n  sections: FormSection[];\n  \n  // Form State\n  formGroup?: FormGroup;\n  submitState: SubmitState;\n  validationMode: FormValidationMode;\n  \n  // Form Configuration\n  noValidate: boolean;\n  autoComplete: boolean;\n  showRequiredIndicator: boolean;\n  \n  // Submit Configuration\n  submitText: string;\n  cancelText: string;\n  showCancel: boolean;\n  submitDisabled: boolean;\n  \n  // Styling\n  className?: string;\n  formClassName?: string;\n  sectionClassName?: string;\n  \n  // Accessibility\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n}\n\nexport interface FormComponentEvents {\n  onSubmit: EventEmitter<FormGroup>;\n  onCancel: EventEmitter<void>;\n  onValidationChange: EventEmitter<{ valid: boolean; errors: ValidationErrors | null }>;\n  onSectionToggle: EventEmitter<{ sectionId: string; collapsed: boolean }>;\n  onFieldChange: EventEmitter<{ fieldName: string; value: any; valid: boolean }>;\n}\n\n@Component({\n  selector: 'app-form',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class FormComponent implements OnInit, OnDestroy, AfterContentInit {\n  // Layout Properties\n  @Input() layout: FormLayout = 'single';\n  @Input() size: FormSize = 'base';\n  @Input() sections: FormSection[] = [];\n  \n  // Form State\n  @Input() formGroup?: FormGroup;\n  @Input() submitState: SubmitState = 'idle';\n  @Input() validationMode: FormValidationMode = 'onSubmit';\n  \n  // Form Configuration\n  @Input() noValidate: boolean = false;\n  @Input() autoComplete: boolean = true;\n  @Input() showRequiredIndicator: boolean = true;\n  \n  // Submit Configuration\n  @Input() submitText: string = 'Submit';\n  @Input() cancelText: string = 'Cancel';\n  @Input() showCancel: boolean = false;\n  @Input() submitDisabled: boolean = false;\n  \n  // Styling\n  @Input() className?: string;\n  @Input() formClassName?: string;\n  @Input() sectionClassName?: string;\n  \n  // Accessibility\n  @Input() ariaLabel?: string;\n  @Input() ariaDescribedBy?: string;\n\n  // Output Events\n  @Output() onSubmit = new EventEmitter<FormGroup>();\n  @Output() onCancel = new EventEmitter<void>();\n  @Output() onValidationChange = new EventEmitter<{ valid: boolean; errors: ValidationErrors | null }>();\n  @Output() onSectionToggle = new EventEmitter<{ sectionId: string; collapsed: boolean }>();\n  @Output() onFieldChange = new EventEmitter<{ fieldName: string; value: any; valid: boolean }>();\n\n  // Internal properties\n  private destroy$ = new Subject<void>();\n  private _uniqueId: string = '';\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    // Generate unique ID\n    this._uniqueId = `form-${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Initialize form if not provided\n    if (!this.formGroup) {\n      this.formGroup = this.fb.group({});\n    }\n\n    // Setup form validation monitoring\n    this.setupFormValidation();\n  }\n\n  ngAfterContentInit() {\n    // Additional setup after content initialization\n    this.updateFormValidation();\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  // Getters for computed properties\n  get formId(): string {\n    return this._uniqueId;\n  }\n\n  get formClasses(): string {\n    return [\n      'form',\n      `layout-${this.layout}`,\n      `size-${this.size}`,\n      `submit-${this.submitState}`,\n      this.formGroup?.invalid && this.formGroup?.touched ? 'form-invalid' : '',\n      this.className\n    ].filter(Boolean).join(' ');\n  }\n\n  get containerClasses(): string {\n    return [\n      'form-container',\n      this.formClassName\n    ].filter(Boolean).join(' ');\n  }\n\n  get isSubmitting(): boolean {\n    return this.submitState === 'loading';\n  }\n\n  get hasErrors(): boolean {\n    return this.submitState === 'error';\n  }\n\n  get isSuccess(): boolean {\n    return this.submitState === 'success';\n  }\n\n  get isSubmitDisabled(): boolean {\n    return this.submitDisabled || \n           this.isSubmitting || \n           (this.formGroup?.invalid === true && this.validationMode === 'onChange');\n  }\n\n  get gridColumns(): number {\n    if (this.layout === 'grid') {\n      return this.size === 'sm' ? 1 : this.size === 'base' ? 2 : 3;\n    }\n    return this.layout === 'two-column' ? 2 : 1;\n  }\n\n  // Section Management\n  getSectionClasses(section: FormSection): string {\n    return [\n      'form-section',\n      section.collapsible ? 'collapsible' : '',\n      section.collapsed ? 'collapsed' : '',\n      this.sectionClassName\n    ].filter(Boolean).join(' ');\n  }\n\n  toggleSection(section: FormSection): void {\n    if (section.collapsible) {\n      section.collapsed = !section.collapsed;\n      this.onSectionToggle.emit({\n        sectionId: section.id,\n        collapsed: section.collapsed\n      });\n    }\n  }\n\n  // Form Validation Setup\n  private setupFormValidation(): void {\n    if (!this.formGroup) return;\n\n    // Monitor form value changes\n    this.formGroup.valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((value) => {\n        this.updateFormValidation();\n        \n        // Emit field changes\n        Object.keys(value).forEach(key => {\n          const control = this.formGroup?.get(key);\n          if (control) {\n            this.onFieldChange.emit({\n              fieldName: key,\n              value: control.value,\n              valid: control.valid\n            });\n          }\n        });\n      });\n\n    // Monitor form status changes\n    this.formGroup.statusChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.updateFormValidation();\n      });\n  }\n\n  private updateFormValidation(): void {\n    if (!this.formGroup) return;\n\n    const isValid = this.formGroup.valid;\n    const errors = this.formGroup.errors;\n\n    this.onValidationChange.emit({\n      valid: isValid,\n      errors: errors\n    });\n  }\n\n  // Event Handlers\n  onFormSubmit(event: Event): void {\n    event.preventDefault();\n    \n    if (!this.formGroup || this.isSubmitDisabled) {\n      return;\n    }\n\n    // Mark all fields as touched to show validation errors\n    this.markAllFieldsAsTouched();\n\n    if (this.formGroup.valid) {\n      this.onSubmit.emit(this.formGroup);\n    }\n  }\n\n  onFormCancel(): void {\n    this.onCancel.emit();\n  }\n\n  // Utility Methods\n  private markAllFieldsAsTouched(): void {\n    if (!this.formGroup) return;\n\n    Object.keys(this.formGroup.controls).forEach(key => {\n      const control = this.formGroup?.get(key);\n      if (control) {\n        control.markAsTouched();\n        \n        // Handle nested form groups\n        if (control instanceof FormGroup) {\n          this.markFormGroupTouched(control);\n        }\n      }\n    });\n  }\n\n  private markFormGroupTouched(formGroup: FormGroup): void {\n    Object.keys(formGroup.controls).forEach(key => {\n      const control = formGroup.get(key);\n      if (control) {\n        control.markAsTouched();\n        \n        if (control instanceof FormGroup) {\n          this.markFormGroupTouched(control);\n        }\n      }\n    });\n  }\n\n  // Public API Methods\n  resetForm(): void {\n    if (this.formGroup) {\n      this.formGroup.reset();\n    }\n  }\n\n  validateForm(): boolean {\n    if (!this.formGroup) return false;\n    \n    this.markAllFieldsAsTouched();\n    return this.formGroup.valid;\n  }\n\n  getFieldError(fieldName: string): string | null {\n    const control = this.formGroup?.get(fieldName);\n    if (!control || !control.errors || !control.touched) {\n      return null;\n    }\n\n    // Return first error message\n    const errors = control.errors;\n    if (errors['required']) return 'This field is required';\n    if (errors['email']) return 'Please enter a valid email address';\n    if (errors['minlength']) return `Minimum length is ${errors['minlength'].requiredLength}`;\n    if (errors['maxlength']) return `Maximum length is ${errors['maxlength'].requiredLength}`;\n    if (errors['pattern']) return 'Please enter a valid format';\n    \n    return 'Invalid value';\n  }\n\n  setFieldValue(fieldName: string, value: any): void {\n    const control = this.formGroup?.get(fieldName);\n    if (control) {\n      control.setValue(value);\n    }\n  }\n\n  setFieldError(fieldName: string, error: ValidationErrors | null): void {\n    const control = this.formGroup?.get(fieldName);\n    if (control) {\n      control.setErrors(error);\n    }\n  }\n\n  focusFirstInvalidField(): void {\n    if (!this.formGroup) return;\n\n    const firstInvalidControl = Object.keys(this.formGroup.controls)\n      .find(key => {\n        const control = this.formGroup?.get(key);\n        return control && control.invalid && control.touched;\n      });\n\n    if (firstInvalidControl) {\n      const element = document.querySelector(`[formControlName=\"${firstInvalidControl}\"]`) as HTMLElement;\n      if (element && element.focus) {\n        element.focus();\n      }\n    }\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* Form Component Styles */\n\n.form-container {\n  width: 100%;\n  max-width: 100%;\n}\n\n.form {\n  display: flex;\n  flex-direction: column;\n  gap: var(--spacing-6);\n  width: 100%;\n  \n  // Size variants\n  &.size-sm {\n    gap: var(--spacing-4);\n    \n    .form-content {\n      gap: var(--spacing-4);\n    }\n    \n    .section-fields,\n    .form-fields {\n      gap: var(--spacing-3);\n    }\n  }\n  \n  &.size-base {\n    gap: var(--spacing-6);\n    \n    .form-content {\n      gap: var(--spacing-6);\n    }\n    \n    .section-fields,\n    .form-fields {\n      gap: var(--spacing-4);\n    }\n  }\n  \n  &.size-lg {\n    gap: var(--spacing-8);\n    \n    .form-content {\n      gap: var(--spacing-8);\n    }\n    \n    .section-fields,\n    .form-fields {\n      gap: var(--spacing-6);\n    }\n  }\n  \n  // Submit state styling\n  &.submit-loading {\n    pointer-events: none;\n    opacity: 0.7;\n  }\n  \n  &.submit-error {\n    .form-actions {\n      border-top: 2px solid var(--color-error-300);\n    }\n  }\n  \n  &.submit-success {\n    .form-actions {\n      border-top: 2px solid var(--color-success-300);\n    }\n  }\n  \n  &.form-invalid {\n    .form-actions {\n      border-top: 1px solid var(--color-error-300);\n    }\n  }\n}\n\n/* Form Content Layout */\n.form-content {\n  display: flex;\n  flex-direction: column;\n  gap: var(--spacing-6);\n  width: 100%;\n}\n\n/* Field Layout Variants */\n.section-fields,\n.form-fields {\n  display: flex;\n  flex-direction: column;\n  gap: var(--spacing-4);\n  \n  // Single column layout (default)\n  &.layout-single {\n    display: flex;\n    flex-direction: column;\n  }\n  \n  // Two column layout\n  &.layout-two-column {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: var(--spacing-4) var(--spacing-6);\n    align-items: start;\n    \n    // Full width elements\n    .full-width,\n    .form-section,\n    .form-actions {\n      grid-column: 1 / -1;\n    }\n  }\n  \n  // Grid layout\n  &.layout-grid {\n    display: grid;\n    gap: var(--spacing-4) var(--spacing-6);\n    align-items: start;\n    \n    // Grid columns based on size\n    .form.size-sm & {\n      grid-template-columns: 1fr;\n    }\n    \n    .form.size-base & {\n      grid-template-columns: repeat(2, 1fr);\n    }\n    \n    .form.size-lg & {\n      grid-template-columns: repeat(3, 1fr);\n    }\n    \n    // Full width elements\n    .full-width,\n    .form-section,\n    .form-actions {\n      grid-column: 1 / -1;\n    }\n  }\n  \n  // Inline layout\n  &.layout-inline {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: end;\n    gap: var(--spacing-4);\n    \n    // Make form controls inline\n    ::ng-deep .container {\n      flex: 1;\n      min-width: 200px;\n    }\n  }\n}\n\n/* Form Sections */\n.form-section {\n  display: flex;\n  flex-direction: column;\n  gap: var(--spacing-4);\n  width: 100%;\n  \n  &.collapsible {\n    border-radius: var(--radius-md);\n    border: 1px solid var(--color-border-primary);\n    overflow: hidden;\n    \n    .section-header {\n      cursor: pointer;\n      transition: background-color var(--animation-duration-base) var(--animation-ease-in-out);\n      \n      &:hover {\n        background-color: var(--color-background-secondary);\n      }\n      \n      &:focus-within {\n        outline: 2px solid var(--color-primary-600);\n        outline-offset: -2px;\n      }\n    }\n  }\n  \n  &.collapsed {\n    .section-content {\n      display: none;\n    }\n    \n    .toggle-icon {\n      transform: rotate(0deg);\n    }\n  }\n}\n\n/* Section Header */\n.section-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--spacing-4) var(--spacing-5);\n  \n  &.clickable {\n    user-select: none;\n    \n    &:focus {\n      outline: 2px solid var(--color-primary-600);\n      outline-offset: -2px;\n    }\n  }\n}\n\n.section-header-content {\n  flex: 1;\n}\n\n.section-title {\n  font-size: var(--font-size-lg);\n  font-weight: var(--font-weight-semibold);\n  color: var(--color-text-primary);\n  margin: 0 0 var(--spacing-1) 0;\n  \n  .required-indicator {\n    color: var(--color-error-500);\n    margin-left: var(--spacing-1);\n  }\n}\n\n.section-description {\n  font-size: var(--font-size-sm);\n  color: var(--color-text-secondary);\n  margin: 0;\n  line-height: 1.5;\n}\n\n.section-toggle {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: var(--spacing-1);\n  \n  .toggle-icon {\n    transition: transform var(--animation-duration-base) var(--animation-ease-in-out);\n    color: var(--color-text-secondary);\n    \n    &.rotated {\n      transform: rotate(90deg);\n    }\n  }\n}\n\n/* Section Content */\n.section-content {\n  padding: 0 var(--spacing-5) var(--spacing-5);\n  \n  &.collapsed {\n    display: none;\n  }\n}\n\n/* Form Actions */\n.form-actions {\n  display: flex;\n  flex-direction: column;\n  gap: var(--spacing-4);\n  padding-top: var(--spacing-6);\n  border-top: 1px solid var(--color-border-primary);\n  margin-top: var(--spacing-6);\n}\n\n/* Form Messages */\n.form-messages {\n  display: flex;\n  flex-direction: column;\n  gap: var(--spacing-3);\n}\n\n.error-message,\n.success-message {\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-2);\n  padding: var(--spacing-3) var(--spacing-4);\n  border-radius: var(--radius-md);\n  font-size: var(--font-size-sm);\n  font-weight: var(--font-weight-medium);\n  \n  .message-icon {\n    flex-shrink: 0;\n  }\n}\n\n.error-message {\n  background-color: var(--color-error-100);\n  color: var(--color-error-700);\n  border: 1px solid var(--color-error-300);\n  \n  .message-icon {\n    color: var(--color-error-500);\n  }\n}\n\n.success-message {\n  background-color: var(--color-success-100);\n  color: var(--color-success-700);\n  border: 1px solid var(--color-success-300);\n  \n  .message-icon {\n    color: var(--color-success-500);\n  }\n}\n\n/* Action Buttons */\n.action-buttons {\n  display: flex;\n  gap: var(--spacing-3);\n  justify-content: flex-end;\n  flex-wrap: wrap;\n  \n  .button {\n    // Button styles are handled by the button component\n    // This ensures consistent button styling\n  }\n}\n\n/* Loading States */\n.loading-spinner {\n  animation: spin 1s linear infinite;\n  margin-right: var(--spacing-2);\n}\n\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n.button-content {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  \n  &.loading {\n    .loading-spinner {\n      margin-right: var(--spacing-2);\n    }\n  }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .form {\n    gap: var(--spacing-4);\n    \n    .form-content {\n      gap: var(--spacing-4);\n    }\n  }\n  \n  .section-fields,\n  .form-fields {\n    // Force single column on mobile\n    &.layout-two-column,\n    &.layout-grid {\n      grid-template-columns: 1fr !important;\n      gap: var(--spacing-3);\n    }\n    \n    &.layout-inline {\n      flex-direction: column;\n      align-items: stretch;\n      \n      ::ng-deep .container {\n        min-width: unset;\n      }\n    }\n  }\n  \n  .section-header {\n    padding: var(--spacing-3) var(--spacing-4);\n  }\n  \n  .section-content {\n    padding: 0 var(--spacing-4) var(--spacing-4);\n  }\n  \n  .section-title {\n    font-size: var(--font-size-base);\n  }\n  \n  .action-buttons {\n    flex-direction: column-reverse;\n    \n    .button {\n      width: 100%;\n    }\n  }\n  \n  .form-actions {\n    margin-top: var(--spacing-4);\n    padding-top: var(--spacing-4);\n  }\n}\n\n@media (max-width: 480px) {\n  .form.size-lg {\n    gap: var(--spacing-4);\n    \n    .form-content {\n      gap: var(--spacing-4);\n    }\n    \n    .section-fields,\n    .form-fields {\n      gap: var(--spacing-3);\n    }\n  }\n}\n\n/* Focus Management */\n.form {\n  // Ensure proper focus order and accessibility\n  *:focus {\n    outline: 2px solid var(--color-primary-600);\n    outline-offset: 2px;\n  }\n  \n  // Focus trap for sections\n  .section-content:focus-within {\n    .section-header {\n      background-color: var(--color-background-secondary);\n    }\n  }\n}\n\n/* High Contrast Mode Support */\n@media (prefers-contrast: high) {\n  .form-section.collapsible {\n    border-width: 2px;\n  }\n  \n  .error-message,\n  .success-message {\n    border-width: 2px;\n  }\n  \n  .form-actions {\n    border-top-width: 2px;\n  }\n}\n\n/* Reduced Motion Support */\n@media (prefers-reduced-motion: reduce) {\n  .toggle-icon,\n  .section-header,\n  .loading-spinner {\n    transition: none;\n    animation: none;\n  }\n}\n\n/* Print Styles */\n@media print {\n  .form {\n    background: white;\n    color: black;\n  }\n  \n  .form-actions,\n  .action-buttons {\n    display: none;\n  }\n  \n  .section-content.collapsed {\n    display: block !important;\n  }\n  \n  .toggle-icon {\n    display: none;\n  }\n}",
                    "styleUrl": "./form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 128,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterContentInit"
            ],
            "accessors": {
                "formId": {
                    "name": "formId",
                    "getSignature": {
                        "name": "formId",
                        "type": "string",
                        "returnType": "string",
                        "line": 156
                    }
                },
                "formClasses": {
                    "name": "formClasses",
                    "getSignature": {
                        "name": "formClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 160
                    }
                },
                "containerClasses": {
                    "name": "containerClasses",
                    "getSignature": {
                        "name": "containerClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 171
                    }
                },
                "isSubmitting": {
                    "name": "isSubmitting",
                    "getSignature": {
                        "name": "isSubmitting",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 178
                    }
                },
                "hasErrors": {
                    "name": "hasErrors",
                    "getSignature": {
                        "name": "hasErrors",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 182
                    }
                },
                "isSuccess": {
                    "name": "isSuccess",
                    "getSignature": {
                        "name": "isSuccess",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 186
                    }
                },
                "isSubmitDisabled": {
                    "name": "isSubmitDisabled",
                    "getSignature": {
                        "name": "isSubmitDisabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 190
                    }
                },
                "gridColumns": {
                    "name": "gridColumns",
                    "getSignature": {
                        "name": "gridColumns",
                        "type": "number",
                        "returnType": "number",
                        "line": 196
                    }
                }
            },
            "templateData": "<div [class]=\"containerClasses\">\n  <form \n    [id]=\"formId\"\n    [class]=\"formClasses\"\n    [formGroup]=\"formGroup!\"\n    [attr.novalidate]=\"noValidate ? '' : null\"\n    [attr.autocomplete]=\"autoComplete ? 'on' : 'off'\"\n    [attr.aria-label]=\"ariaLabel\"\n    [attr.aria-describedby]=\"ariaDescribedBy\"\n    (ngSubmit)=\"onFormSubmit($event)\">\n    \n    <!-- Form Content -->\n    <div class=\"form-content\" \n         [style.grid-template-columns]=\"layout === 'grid' ? 'repeat(' + gridColumns + ', 1fr)' : null\">\n      \n      <!-- Sections Layout -->\n      <ng-container *ngIf=\"sections.length > 0; else defaultContent\">\n        <div *ngFor=\"let section of sections\" \n             [class]=\"getSectionClasses(section)\"\n             [attr.id]=\"section.id\">\n          \n          <!-- Section Header -->\n          <div class=\"section-header\" \n               *ngIf=\"section.title || section.description\"\n               [class.clickable]=\"section.collapsible\"\n               (click)=\"section.collapsible ? toggleSection(section) : null\">\n            \n            <div class=\"section-header-content\">\n              <h3 class=\"section-title\" *ngIf=\"section.title\">\n                {{ section.title }}\n                <span class=\"required-indicator\" \n                      *ngIf=\"showRequiredIndicator\">*</span>\n              </h3>\n              \n              <p class=\"section-description\" *ngIf=\"section.description\">\n                {{ section.description }}\n              </p>\n            </div>\n            \n            <!-- Toggle Icon -->\n            <div class=\"section-toggle\" *ngIf=\"section.collapsible\">\n              <svg class=\"toggle-icon\" \n                   [class.rotated]=\"!section.collapsed\"\n                   width=\"16\" \n                   height=\"16\" \n                   viewBox=\"0 0 16 16\" \n                   fill=\"none\">\n                <path d=\"M6 12L10 8L6 4\" \n                      stroke=\"currentColor\" \n                      stroke-width=\"2\" \n                      stroke-linecap=\"round\" \n                      stroke-linejoin=\"round\"/>\n              </svg>\n            </div>\n          </div>\n          \n          <!-- Section Content -->\n          <div class=\"section-content\" \n               [class.collapsed]=\"section.collapsed\"\n               [attr.aria-hidden]=\"section.collapsed\">\n            \n            <!-- Section Fields Container -->\n            <div class=\"section-fields\" \n                 [class]=\"'layout-' + layout\">\n              <ng-content select=\"[slot='section-' + section.id + '-content']\"></ng-content>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n      \n      <!-- Default Content (No Sections) -->\n      <ng-template #defaultContent>\n        <div class=\"form-fields\" [class]=\"'layout-' + layout\">\n          <ng-content></ng-content>\n        </div>\n      </ng-template>\n    </div>\n    \n    <!-- Form Actions -->\n    <div class=\"form-actions\">\n      <!-- Submit State Messages -->\n      <div class=\"form-messages\" *ngIf=\"hasErrors || isSuccess\">\n        <div class=\"error-message\" *ngIf=\"hasErrors\">\n          <svg class=\"message-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n            <circle cx=\"8\" cy=\"8\" r=\"7\" stroke=\"currentColor\" stroke-width=\"2\"/>\n            <path d=\"M8 4v4\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n            <path d=\"M8 12h.01\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n          </svg>\n          <span>Please fix the errors below and try again.</span>\n        </div>\n        \n        <div class=\"success-message\" *ngIf=\"isSuccess\">\n          <svg class=\"message-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n            <circle cx=\"8\" cy=\"8\" r=\"7\" stroke=\"currentColor\" stroke-width=\"2\"/>\n            <path d=\"M5.5 8.5L7 10L10.5 6.5\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n          <span>Form submitted successfully!</span>\n        </div>\n      </div>\n      \n      <!-- Action Buttons -->\n      <div class=\"action-buttons\">\n        <button type=\"button\" \n                class=\"button secondary\"\n                *ngIf=\"showCancel\"\n                (click)=\"onFormCancel()\">\n          {{ cancelText }}\n        </button>\n        \n        <button type=\"submit\" \n                class=\"button primary\"\n                [class.loading]=\"isSubmitting\"\n                [disabled]=\"isSubmitDisabled\">\n          \n          <!-- Loading State -->\n          <span class=\"button-content\" *ngIf=\"!isSubmitting\">\n            {{ submitText }}\n          </span>\n          \n          <!-- Loading Spinner -->\n          <span class=\"button-content loading\" *ngIf=\"isSubmitting\">\n            <svg class=\"loading-spinner\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n              <circle cx=\"8\" cy=\"8\" r=\"6\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-dasharray=\"31.416\" stroke-dashoffset=\"31.416\">\n                <animate attributeName=\"stroke-dasharray\" dur=\"2s\" values=\"0 31.416;15.708 15.708;0 31.416\" repeatCount=\"indefinite\"/>\n                <animate attributeName=\"stroke-dashoffset\" dur=\"2s\" values=\"0;-15.708;-31.416\" repeatCount=\"indefinite\"/>\n              </circle>\n            </svg>\n            Submitting...\n          </span>\n        </button>\n      </div>\n    </div>\n  </form>\n</div>"
        },
        {
            "name": "FormDemoComponent",
            "id": "component-FormDemoComponent-6066cd13ed0439a95d9e8f35b62ceecbcb4a4a678564152408dd8fdd2e1f3a531314903023ce34ae5d7be2a47222a18085f1b726350281dcc461723d3eac34bf",
            "file": "src/app/form-demo/form-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form-demo",
            "styleUrls": [
                "./form-demo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-demo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "advancedForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "basicForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "currentLayout",
                    "defaultValue": "'single'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormLayout",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "currentSize",
                    "defaultValue": "'base'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormSize",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "currentSubmitState",
                    "defaultValue": "'idle'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubmitState",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "formSections",
                    "defaultValue": "[\n    {\n      id: 'personal',\n      title: 'Personal Information',\n      description: 'Please provide your personal details',\n      fields: ['firstName', 'lastName', 'email'],\n      collapsible: true,\n      collapsed: false\n    },\n    {\n      id: 'contact',\n      title: 'Contact Information',\n      description: 'Additional contact details (optional)',\n      fields: ['phone', 'company', 'address'],\n      collapsible: true,\n      collapsed: false\n    },\n    {\n      id: 'preferences',\n      title: 'Preferences',\n      description: 'Customize your experience',\n      fields: ['newsletter', 'notifications'],\n      collapsible: true,\n      collapsed: true\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormSection[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "layouts",
                    "defaultValue": "['single', 'two-column', 'grid', 'inline']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormLayout[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "sectionedForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "sizes",
                    "defaultValue": "['sm', 'base', 'lg']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormSize[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "changeLayout",
                    "args": [
                        {
                            "name": "layout",
                            "type": "FormLayout",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "layout",
                            "type": "FormLayout",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeSize",
                    "args": [
                        {
                            "name": "size",
                            "type": "FormSize",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "FormSize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createAdvancedForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "createBasicForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "createSectionedForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAdvancedFormSubmit",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onBasicFormSubmit",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFieldChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFormCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSectionedFormSubmit",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSectionToggle",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onValidationChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetForms",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "simulateSubmission",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormComponent",
                    "type": "component"
                },
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "CardComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { FormComponent, FormLayout, FormSize, SubmitState, FormSection } from '../components/form/form.component';\nimport { InputComponent } from '../components/input/input.component';\nimport { CardComponent } from '../components/card/card.component';\n\n@Component({\n  selector: 'app-form-demo',\n  standalone: true,\n  imports: [\n    CommonModule, \n    ReactiveFormsModule, \n    FormComponent, \n    InputComponent, \n    CardComponent\n  ],\n  templateUrl: './form-demo.component.html',\n  styleUrls: ['./form-demo.component.scss']\n})\nexport class FormDemoComponent implements OnInit {\n  // Form configurations\n  layouts: FormLayout[] = ['single', 'two-column', 'grid', 'inline'];\n  sizes: FormSize[] = ['sm', 'base', 'lg'];\n  \n  // Current settings\n  currentLayout: FormLayout = 'single';\n  currentSize: FormSize = 'base';\n  currentSubmitState: SubmitState = 'idle';\n  \n  // Forms\n  basicForm: FormGroup;\n  advancedForm: FormGroup;\n  sectionedForm: FormGroup;\n  \n  // Form sections\n  formSections: FormSection[] = [\n    {\n      id: 'personal',\n      title: 'Personal Information',\n      description: 'Please provide your personal details',\n      fields: ['firstName', 'lastName', 'email'],\n      collapsible: true,\n      collapsed: false\n    },\n    {\n      id: 'contact',\n      title: 'Contact Information',\n      description: 'Additional contact details (optional)',\n      fields: ['phone', 'company', 'address'],\n      collapsible: true,\n      collapsed: false\n    },\n    {\n      id: 'preferences',\n      title: 'Preferences',\n      description: 'Customize your experience',\n      fields: ['newsletter', 'notifications'],\n      collapsible: true,\n      collapsed: true\n    }\n  ];\n\n  constructor(private fb: FormBuilder) {\n    this.basicForm = this.createBasicForm();\n    this.advancedForm = this.createAdvancedForm();\n    this.sectionedForm = this.createSectionedForm();\n  }\n\n  ngOnInit() {\n    // Initialize demo\n  }\n\n  // Form creation methods\n  private createBasicForm(): FormGroup {\n    return this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      message: ['', [Validators.required, Validators.minLength(10)]]\n    });\n  }\n\n  private createAdvancedForm(): FormGroup {\n    return this.fb.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      phone: ['', Validators.pattern(/^\\+?[\\d\\s\\-\\(\\)]+$/)],\n      company: [''],\n      position: [''],\n      experience: ['', Validators.required],\n      skills: [''],\n      portfolio: ['', Validators.pattern(/^https?:\\/\\/.+/)],\n      availability: ['', Validators.required],\n      salary: ['', [Validators.required, Validators.min(0)]],\n      comments: ['']\n    });\n  }\n\n  private createSectionedForm(): FormGroup {\n    return this.fb.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      phone: [''],\n      company: [''],\n      address: [''],\n      newsletter: [true],\n      notifications: [false]\n    });\n  }\n\n  // Event handlers\n  onBasicFormSubmit(form: FormGroup): void {\n    console.log('Basic form submitted:', form.value);\n    this.simulateSubmission();\n  }\n\n  onAdvancedFormSubmit(form: FormGroup): void {\n    console.log('Advanced form submitted:', form.value);\n    this.simulateSubmission();\n  }\n\n  onSectionedFormSubmit(form: FormGroup): void {\n    console.log('Sectioned form submitted:', form.value);\n    this.simulateSubmission();\n  }\n\n  onFormCancel(): void {\n    console.log('Form cancelled');\n  }\n\n  onValidationChange(event: { valid: boolean; errors: any }): void {\n    console.log('Validation changed:', event);\n  }\n\n  onSectionToggle(event: { sectionId: string; collapsed: boolean }): void {\n    console.log('Section toggled:', event);\n  }\n\n  onFieldChange(event: { fieldName: string; value: any; valid: boolean }): void {\n    console.log('Field changed:', event);\n  }\n\n  // Utility methods\n  private simulateSubmission(): void {\n    this.currentSubmitState = 'loading';\n    \n    setTimeout(() => {\n      // Randomly simulate success or error\n      const isSuccess = Math.random() > 0.3;\n      this.currentSubmitState = isSuccess ? 'success' : 'error';\n      \n      // Reset to idle after showing result\n      setTimeout(() => {\n        this.currentSubmitState = 'idle';\n      }, 3000);\n    }, 2000);\n  }\n\n  resetForms(): void {\n    this.basicForm.reset();\n    this.advancedForm.reset();\n    this.sectionedForm.reset();\n    this.currentSubmitState = 'idle';\n  }\n\n  changeLayout(layout: FormLayout): void {\n    this.currentLayout = layout;\n  }\n\n  changeSize(size: FormSize): void {\n    this.currentSize = size;\n  }\n\n  // Getters for template\n  get isFormValid(): boolean {\n    return this.basicForm.valid;\n  }\n\n  get formErrors(): string[] {\n    const errors: string[] = [];\n    \n    Object.keys(this.basicForm.controls).forEach(key => {\n      const control = this.basicForm.get(key);\n      if (control && control.errors && control.touched) {\n        if (control.errors['required']) {\n          errors.push(`${key} is required`);\n        }\n        if (control.errors['email']) {\n          errors.push(`${key} must be a valid email`);\n        }\n        if (control.errors['minlength']) {\n          errors.push(`${key} must be at least ${control.errors['minlength'].requiredLength} characters`);\n        }\n      }\n    });\n    \n    return errors;\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-demo {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: var(--spacing-6);\n  display: flex;\n  flex-direction: column;\n  gap: var(--spacing-8);\n}\n\n.demo-header {\n  text-align: center;\n  margin-bottom: var(--spacing-6);\n  \n  h1 {\n    font-size: var(--font-size-xl);\n    font-weight: var(--font-weight-semibold);\n    color: var(--color-text-primary);\n    margin: 0 0 var(--spacing-3) 0;\n  }\n  \n  p {\n    font-size: var(--font-size-base);\n    color: var(--color-text-secondary);\n    margin: 0;\n    line-height: 1.5;\n  }\n}\n\n.config-card {\n  .config-header {\n    margin-bottom: var(--spacing-6);\n    \n    h2 {\n      font-size: var(--font-size-lg);\n      font-weight: var(--font-weight-semibold);\n      color: var(--color-text-primary);\n      margin: 0 0 var(--spacing-2) 0;\n    }\n    \n    p {\n      font-size: var(--font-size-sm);\n      color: var(--color-text-secondary);\n      margin: 0;\n    }\n  }\n  \n  .config-controls {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: var(--spacing-6);\n    align-items: start;\n  }\n  \n  .control-group {\n    display: flex;\n    flex-direction: column;\n    gap: var(--spacing-3);\n    \n    label {\n      font-size: var(--font-size-sm);\n      font-weight: var(--font-weight-medium);\n      color: var(--color-text-primary);\n    }\n  }\n  \n  .button-group {\n    display: flex;\n    gap: var(--spacing-2);\n    flex-wrap: wrap;\n  }\n  \n  .config-button {\n    padding: var(--spacing-2) var(--spacing-4);\n    border: 1px solid var(--color-border-primary);\n    background: var(--color-background-primary);\n    color: var(--color-text-primary);\n    border-radius: var(--radius-md);\n    cursor: pointer;\n    font-size: var(--font-size-sm);\n    font-weight: var(--font-weight-medium);\n    transition: all var(--animation-duration-base) var(--animation-ease-in-out);\n    \n    &:hover {\n      background: var(--color-background-secondary);\n      border-color: var(--color-border-hover);\n    }\n    \n    &.active {\n      background: var(--color-primary-600);\n      color: var(--color-text-on-primary);\n      border-color: var(--color-primary-600);\n    }\n    \n    &:focus {\n      outline: 2px solid var(--color-primary-600);\n      outline-offset: 2px;\n    }\n  }\n  \n  .reset-button {\n    padding: var(--spacing-3) var(--spacing-5);\n    background: var(--color-error-600);\n    color: white;\n    border: none;\n    border-radius: var(--radius-md);\n    cursor: pointer;\n    font-size: var(--font-size-sm);\n    font-weight: var(--font-weight-medium);\n    transition: background-color var(--animation-duration-base) var(--animation-ease-in-out);\n    \n    &:hover {\n      background: var(--color-error-700);\n    }\n    \n    &:focus {\n      outline: 2px solid var(--color-error-600);\n      outline-offset: 2px;\n    }\n  }\n}\n\n.demo-forms {\n  display: flex;\n  flex-direction: column;\n  gap: var(--spacing-8);\n}\n\n.demo-card {\n  .card-header {\n    margin-bottom: var(--spacing-6);\n    padding-bottom: var(--spacing-4);\n    border-bottom: 1px solid var(--color-border-primary);\n    \n    h2 {\n      font-size: var(--font-size-lg);\n      font-weight: var(--font-weight-semibold);\n      color: var(--color-text-primary);\n      margin: 0 0 var(--spacing-2) 0;\n    }\n    \n    p {\n      font-size: var(--font-size-sm);\n      color: var(--color-text-secondary);\n      margin: 0;\n    }\n  }\n}\n\n.info-card {\n  .info-header {\n    margin-bottom: var(--spacing-4);\n    \n    h2 {\n      font-size: var(--font-size-lg);\n      font-weight: var(--font-weight-semibold);\n      color: var(--color-text-primary);\n      margin: 0;\n    }\n  }\n  \n  .status-info {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: var(--spacing-4);\n  }\n  \n  .status-item {\n    font-size: var(--font-size-sm);\n    color: var(--color-text-primary);\n    \n    strong {\n      font-weight: var(--font-weight-medium);\n    }\n    \n    ul {\n      margin: var(--spacing-2) 0 0 var(--spacing-4);\n      padding: 0;\n      \n      li {\n        color: var(--color-error-600);\n        margin-bottom: var(--spacing-1);\n      }\n    }\n  }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .form-demo {\n    padding: var(--spacing-4);\n    gap: var(--spacing-6);\n  }\n  \n  .config-controls {\n    grid-template-columns: 1fr;\n    gap: var(--spacing-4);\n  }\n  \n  .button-group {\n    justify-content: center;\n  }\n  \n  .demo-forms {\n    gap: var(--spacing-6);\n  }\n  \n  .status-info {\n    grid-template-columns: 1fr;\n    gap: var(--spacing-3);\n  }\n}\n\n@media (max-width: 480px) {\n  .demo-header {\n    h1 {\n      font-size: var(--font-size-lg);\n    }\n  }\n  \n  .card-header {\n    h2 {\n      font-size: var(--font-size-base);\n    }\n  }\n  \n  .config-button,\n  .reset-button {\n    font-size: var(--font-size-xs);\n    padding: var(--spacing-2) var(--spacing-3);\n  }\n}",
                    "styleUrl": "./form-demo.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isFormValid": {
                    "name": "isFormValid",
                    "getSignature": {
                        "name": "isFormValid",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 178
                    }
                },
                "formErrors": {
                    "name": "formErrors",
                    "getSignature": {
                        "name": "formErrors",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 182
                    }
                }
            },
            "templateData": "<div class=\"form-demo\">\n  <div class=\"demo-header\">\n    <h1>Angular Form Component Demo</h1>\n    <p>A comprehensive demonstration of the Form component with multiple layouts, validation, and features.</p>\n  </div>\n\n  <!-- Configuration Controls -->\n  <app-card variant=\"outlined\" padding=\"medium\" className=\"config-card\">\n    <div class=\"config-header\">\n      <h2>Configuration</h2>\n      <p>Adjust the form settings to see different behaviors</p>\n    </div>\n    \n    <div class=\"config-controls\">\n      <div class=\"control-group\">\n        <label>Layout:</label>\n        <div class=\"button-group\">\n          <button *ngFor=\"let layout of layouts\" \n                  [class.active]=\"currentLayout === layout\"\n                  (click)=\"changeLayout(layout)\"\n                  class=\"config-button\">\n            {{ layout }}\n          </button>\n        </div>\n      </div>\n      \n      <div class=\"control-group\">\n        <label>Size:</label>\n        <div class=\"button-group\">\n          <button *ngFor=\"let size of sizes\" \n                  [class.active]=\"currentSize === size\"\n                  (click)=\"changeSize(size)\"\n                  class=\"config-button\">\n            {{ size }}\n          </button>\n        </div>\n      </div>\n      \n      <div class=\"control-group\">\n        <button (click)=\"resetForms()\" class=\"reset-button\">\n          Reset All Forms\n        </button>\n      </div>\n    </div>\n  </app-card>\n\n  <!-- Demo Forms Container -->\n  <div class=\"demo-forms\">\n    \n    <!-- Basic Form Demo -->\n    <app-card variant=\"elevated\" padding=\"large\" className=\"demo-card\">\n      <div class=\"card-header\">\n        <h2>Basic Form</h2>\n        <p>Simple contact form with validation</p>\n      </div>\n      \n      <app-form [formGroup]=\"basicForm\"\n                [layout]=\"currentLayout\"\n                [size]=\"currentSize\"\n                [submitState]=\"currentSubmitState\"\n                [validationMode]=\"'onSubmit'\"\n                [showCancel]=\"true\"\n                [submitText]=\"'Send Message'\"\n                [cancelText]=\"'Clear'\"\n                ariaLabel=\"Contact form\"\n                (onSubmit)=\"onBasicFormSubmit($event)\"\n                (onCancel)=\"onFormCancel()\"\n                (onValidationChange)=\"onValidationChange($event)\"\n                (onFieldChange)=\"onFieldChange($event)\">\n        \n        <app-input label=\"Full Name\"\n                   formControlName=\"name\"\n                   [required]=\"true\"\n                   placeholder=\"Enter your full name\"\n                   helperText=\"This will be used to identify you\">\n        </app-input>\n        \n        <app-input label=\"Email Address\"\n                   type=\"email\"\n                   formControlName=\"email\"\n                   [required]=\"true\"\n                   placeholder=\"Enter your email address\"\n                   helperText=\"We'll never share your email\">\n        </app-input>\n        \n        <app-input label=\"Message\"\n                   formControlName=\"message\"\n                   [required]=\"true\"\n                   placeholder=\"Enter your message (minimum 10 characters)\"\n                   helperText=\"Please provide as much detail as possible\"\n                   [className]=\"currentLayout === 'two-column' || currentLayout === 'grid' ? 'full-width' : ''\">\n        </app-input>\n      </app-form>\n    </app-card>\n\n    <!-- Advanced Form Demo -->\n    <app-card variant=\"elevated\" padding=\"large\" className=\"demo-card\">\n      <div class=\"card-header\">\n        <h2>Advanced Form</h2>\n        <p>Job application form with complex validation</p>\n      </div>\n      \n      <app-form [formGroup]=\"advancedForm\"\n                [layout]=\"currentLayout\"\n                [size]=\"currentSize\"\n                [submitState]=\"currentSubmitState\"\n                [validationMode]=\"'onChange'\"\n                [showCancel]=\"true\"\n                [submitText]=\"'Submit Application'\"\n                [cancelText]=\"'Save Draft'\"\n                ariaLabel=\"Job application form\"\n                (onSubmit)=\"onAdvancedFormSubmit($event)\"\n                (onCancel)=\"onFormCancel()\">\n        \n        <app-input label=\"First Name\"\n                   formControlName=\"firstName\"\n                   [required]=\"true\"\n                   placeholder=\"Enter first name\">\n        </app-input>\n        \n        <app-input label=\"Last Name\"\n                   formControlName=\"lastName\"\n                   [required]=\"true\"\n                   placeholder=\"Enter last name\">\n        </app-input>\n        \n        <app-input label=\"Email\"\n                   type=\"email\"\n                   formControlName=\"email\"\n                   [required]=\"true\"\n                   placeholder=\"Enter email address\"\n                   [className]=\"currentLayout === 'grid' ? 'full-width' : ''\">\n        </app-input>\n        \n        <app-input label=\"Phone\"\n                   type=\"tel\"\n                   formControlName=\"phone\"\n                   placeholder=\"Enter phone number\">\n        </app-input>\n        \n        <app-input label=\"Company\"\n                   formControlName=\"company\"\n                   placeholder=\"Current company\">\n        </app-input>\n        \n        <app-input label=\"Position\"\n                   formControlName=\"position\"\n                   placeholder=\"Current position\">\n        </app-input>\n        \n        <app-input label=\"Years of Experience\"\n                   type=\"number\"\n                   formControlName=\"experience\"\n                   [required]=\"true\"\n                   placeholder=\"Enter years of experience\">\n        </app-input>\n        \n        <app-input label=\"Skills\"\n                   formControlName=\"skills\"\n                   placeholder=\"List your key skills\">\n        </app-input>\n        \n        <app-input label=\"Portfolio URL\"\n                   type=\"url\"\n                   formControlName=\"portfolio\"\n                   placeholder=\"https://your-portfolio.com\">\n        </app-input>\n        \n        <app-input label=\"Availability\"\n                   formControlName=\"availability\"\n                   [required]=\"true\"\n                   placeholder=\"When can you start?\">\n        </app-input>\n        \n        <app-input label=\"Expected Salary\"\n                   type=\"number\"\n                   formControlName=\"salary\"\n                   [required]=\"true\"\n                   placeholder=\"Enter expected salary\">\n        </app-input>\n        \n        <app-input label=\"Additional Comments\"\n                   formControlName=\"comments\"\n                   placeholder=\"Any additional information\"\n                   [className]=\"currentLayout === 'two-column' || currentLayout === 'grid' ? 'full-width' : ''\">\n        </app-input>\n      </app-form>\n    </app-card>\n\n    <!-- Sectioned Form Demo -->\n    <app-card variant=\"elevated\" padding=\"large\" className=\"demo-card\">\n      <div class=\"card-header\">\n        <h2>Sectioned Form</h2>\n        <p>Form with collapsible sections and organization</p>\n      </div>\n      \n      <app-form [formGroup]=\"sectionedForm\"\n                [layout]=\"'single'\"\n                [size]=\"currentSize\"\n                [sections]=\"formSections\"\n                [submitState]=\"currentSubmitState\"\n                [validationMode]=\"'onBlur'\"\n                [showCancel]=\"true\"\n                [submitText]=\"'Complete Registration'\"\n                [cancelText]=\"'Cancel'\"\n                ariaLabel=\"Registration form with sections\"\n                (onSubmit)=\"onSectionedFormSubmit($event)\"\n                (onCancel)=\"onFormCancel()\"\n                (onSectionToggle)=\"onSectionToggle($event)\">\n        \n        <div slot=\"section-personal-content\">\n          <app-input label=\"First Name\"\n                     formControlName=\"firstName\"\n                     [required]=\"true\"\n                     placeholder=\"Enter first name\">\n          </app-input>\n          \n          <app-input label=\"Last Name\"\n                     formControlName=\"lastName\"\n                     [required]=\"true\"\n                     placeholder=\"Enter last name\">\n          </app-input>\n          \n          <app-input label=\"Email Address\"\n                     type=\"email\"\n                     formControlName=\"email\"\n                     [required]=\"true\"\n                     placeholder=\"Enter email address\">\n          </app-input>\n        </div>\n        \n        <div slot=\"section-contact-content\">\n          <app-input label=\"Phone Number\"\n                     type=\"tel\"\n                     formControlName=\"phone\"\n                     placeholder=\"Enter phone number\">\n          </app-input>\n          \n          <app-input label=\"Company\"\n                     formControlName=\"company\"\n                     placeholder=\"Enter company name\">\n          </app-input>\n          \n          <app-input label=\"Address\"\n                     formControlName=\"address\"\n                     placeholder=\"Enter your address\">\n          </app-input>\n        </div>\n        \n        <div slot=\"section-preferences-content\">\n          <!-- Note: These would typically be checkbox/toggle components -->\n          <app-input label=\"Newsletter Subscription\"\n                     formControlName=\"newsletter\"\n                     placeholder=\"Subscribe to newsletter? (true/false)\">\n          </app-input>\n          \n          <app-input label=\"Push Notifications\"\n                     formControlName=\"notifications\"\n                     placeholder=\"Enable notifications? (true/false)\">\n          </app-input>\n        </div>\n      </app-form>\n    </app-card>\n  </div>\n\n  <!-- Demo Information -->\n  <app-card variant=\"outlined\" padding=\"medium\" className=\"info-card\">\n    <div class=\"info-header\">\n      <h2>Form Status Information</h2>\n    </div>\n    \n    <div class=\"status-info\">\n      <div class=\"status-item\">\n        <strong>Current Layout:</strong> {{ currentLayout }}\n      </div>\n      <div class=\"status-item\">\n        <strong>Current Size:</strong> {{ currentSize }}\n      </div>\n      <div class=\"status-item\">\n        <strong>Submit State:</strong> {{ currentSubmitState }}\n      </div>\n      <div class=\"status-item\">\n        <strong>Basic Form Valid:</strong> {{ isFormValid ? 'Yes' : 'No' }}\n      </div>\n      <div class=\"status-item\" *ngIf=\"formErrors.length > 0\">\n        <strong>Form Errors:</strong>\n        <ul>\n          <li *ngFor=\"let error of formErrors\">{{ error }}</li>\n        </ul>\n      </div>\n    </div>\n  </app-card>\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-c1aae40ad667090ce1eb760e895b9cf2c48631121a7e6d324f69bfef0b0a7830ea56ac3e81b68ca3dcdab3cec5fa43eadbf87106ba7432c3efd89661010fac9a",
            "file": "src/app/components/input/input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 101,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "containerClassName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 102,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "endIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "TemplateRef<any> | string",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helperText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'base'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "InputSize",
                    "decorators": []
                },
                {
                    "name": "startIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 97,
                    "type": "TemplateRef<any> | string",
                    "decorators": []
                },
                {
                    "name": "state",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "InputState",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "InputType",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "InputVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "blurEvent",
                    "defaultValue": "new EventEmitter<FocusEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 106,
                    "type": "EventEmitter"
                },
                {
                    "name": "focusEvent",
                    "defaultValue": "new EventEmitter<FocusEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 107,
                    "type": "EventEmitter"
                },
                {
                    "name": "inputEvent",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 108,
                    "type": "EventEmitter"
                },
                {
                    "name": "keydownEvent",
                    "defaultValue": "new EventEmitter<KeyboardEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 110,
                    "type": "EventEmitter"
                },
                {
                    "name": "keyupEvent",
                    "defaultValue": "new EventEmitter<KeyboardEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 109,
                    "type": "EventEmitter"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_helpTextId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 117,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_uniqueId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 116,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 115,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "inputElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 112,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputElement', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 120,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 121,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "blurInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "focusInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isString",
                    "args": [
                        {
                            "name": "icon",
                            "type": "TemplateRef<any> | string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "icon",
                            "type": "TemplateRef<any> | string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isTemplate",
                    "args": [
                        {
                            "name": "icon",
                            "type": "TemplateRef<any> | string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "icon",
                            "type": "TemplateRef<any> | string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeyDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeyUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectText",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 252,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { \n  Component, \n  Input, \n  Output, \n  EventEmitter, \n  ChangeDetectionStrategy, \n  ViewEncapsulation,\n  forwardRef,\n  ViewChild,\n  ElementRef,\n  TemplateRef,\n  OnInit,\n  OnDestroy,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport type InputType = 'text' | 'email' | 'password' | 'number' | 'search' | 'tel' | 'url';\nexport type InputSize = 'sm' | 'base' | 'lg';\nexport type InputVariant = 'default' | 'filled' | 'ghost';\nexport type InputState = 'default' | 'error' | 'success';\n\nexport interface InputComponentProps {\n  // Basic Properties\n  type: InputType;\n  placeholder?: string;\n  value?: string;\n  disabled: boolean;\n  required: boolean;\n  id?: string;\n  \n  // Styling Properties\n  size: InputSize;\n  variant: InputVariant;\n  state: InputState;\n  \n  // Label and Help Text\n  label?: string;\n  helperText?: string;\n  errorMessage?: string;\n  \n  // Icons\n  startIcon?: TemplateRef<any> | string;\n  endIcon?: TemplateRef<any> | string;\n  \n  // CSS Classes\n  className?: string;\n  containerClassName?: string;\n}\n\nexport interface InputComponentEvents {\n  valueChange: EventEmitter<string>;\n  blurEvent: EventEmitter<FocusEvent>;\n  focusEvent: EventEmitter<FocusEvent>;\n  inputEvent: EventEmitter<Event>;\n  keyupEvent: EventEmitter<KeyboardEvent>;\n  keydownEvent: EventEmitter<KeyboardEvent>;\n}\n\n@Component({\n  selector: 'app-input',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputComponent),\n      multi: true\n    }\n  ]\n})\nexport class InputComponent implements ControlValueAccessor, OnInit, OnDestroy {\n  // Basic Properties\n  @Input() type: InputType = 'text';\n  @Input() placeholder?: string;\n  @Input() value?: string;\n  @Input() disabled: boolean = false;\n  @Input() required: boolean = false;\n  @Input() id?: string;\n  \n  // Styling Properties\n  @Input() size: InputSize = 'base';\n  @Input() variant: InputVariant = 'default';\n  @Input() state: InputState = 'default';\n  \n  // Label and Help Text\n  @Input() label?: string;\n  @Input() helperText?: string;\n  @Input() errorMessage?: string;\n  \n  // Icons\n  @Input() startIcon?: TemplateRef<any> | string;\n  @Input() endIcon?: TemplateRef<any> | string;\n  \n  // CSS Classes\n  @Input() className?: string;\n  @Input() containerClassName?: string;\n\n  // Output Events\n  @Output() valueChange = new EventEmitter<string>();\n  @Output() blurEvent = new EventEmitter<FocusEvent>();\n  @Output() focusEvent = new EventEmitter<FocusEvent>();\n  @Output() inputEvent = new EventEmitter<Event>();\n  @Output() keyupEvent = new EventEmitter<KeyboardEvent>();\n  @Output() keydownEvent = new EventEmitter<KeyboardEvent>();\n\n  @ViewChild('inputElement', { static: false }) inputElement!: ElementRef<HTMLInputElement>;\n\n  // Internal properties\n  private _value: string = '';\n  private _uniqueId: string = '';\n  private _helpTextId: string = '';\n\n  // ControlValueAccessor implementation\n  private onChange = (value: string) => {};\n  private onTouched = () => {};\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    // Generate unique ID if not provided\n    this._uniqueId = this.id || `input-${Math.random().toString(36).substr(2, 9)}`;\n    this._helpTextId = `${this._uniqueId}-help`;\n  }\n\n  ngOnDestroy() {\n    // Cleanup if needed\n  }\n\n  // Getters for computed properties\n  get inputId(): string {\n    return this._uniqueId;\n  }\n\n  get helpTextId(): string {\n    return this._helpTextId;\n  }\n\n  get hasError(): boolean {\n    return this.state === 'error' || !!this.errorMessage;\n  }\n\n  get hasSuccess(): boolean {\n    return this.state === 'success';\n  }\n\n  get hasStartIcon(): boolean {\n    return !!this.startIcon;\n  }\n\n  get hasEndIcon(): boolean {\n    return !!this.endIcon;\n  }\n\n  get inputClasses(): string {\n    return [\n      'input',\n      this.size,\n      this.variant,\n      this.state,\n      this.hasStartIcon && 'hasStartIcon',\n      this.hasEndIcon && 'hasEndIcon',\n      this.disabled && 'disabled',\n      this.hasError && 'error',\n      this.hasSuccess && 'success',\n      this.className\n    ].filter(Boolean).join(' ');\n  }\n\n  get containerClasses(): string {\n    return [\n      'container',\n      this.containerClassName\n    ].filter(Boolean).join(' ');\n  }\n\n  // Template helper methods\n  isTemplate(icon: TemplateRef<any> | string | undefined): boolean {\n    return icon instanceof TemplateRef;\n  }\n\n  isString(icon: TemplateRef<any> | string | undefined): boolean {\n    return typeof icon === 'string';\n  }\n\n  // Event handlers\n  onInput(event: Event): void {\n    const target = event.target as HTMLInputElement;\n    const value = target.value;\n    \n    this._value = value;\n    this.onChange(value);\n    this.valueChange.emit(value);\n    this.inputEvent.emit(event);\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focusEvent.emit(event);\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.onTouched();\n    this.blurEvent.emit(event);\n  }\n\n  onKeyUp(event: KeyboardEvent): void {\n    this.keyupEvent.emit(event);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    this.keydownEvent.emit(event);\n  }\n\n  // ControlValueAccessor implementation\n  writeValue(value: any): void {\n    this._value = value || '';\n    this.value = this._value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: (value: string) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.cdr.markForCheck();\n  }\n\n  // Public methods for external access\n  focusInput(): void {\n    if (this.inputElement) {\n      this.inputElement.nativeElement.focus();\n    }\n  }\n\n  blurInput(): void {\n    if (this.inputElement) {\n      this.inputElement.nativeElement.blur();\n    }\n  }\n\n  selectText(): void {\n    if (this.inputElement) {\n      this.inputElement.nativeElement.select();\n    }\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* Input Component Styles - Exact match with React version */\n\n/* Container */\n.container {\n  width: 100%;\n  display: block;\n}\n\n/* Label */\n.label {\n  display: block;\n  font-family: var(--font-family-base);\n  font-size: 14px;\n  font-weight: 500;\n  color: var(--color-text-primary);\n  margin-bottom: 8px;\n  line-height: 1.25;\n}\n\n.required {\n  color: var(--color-error-500);\n  margin-left: 4px;\n}\n\n/* Input Wrapper */\n.inputWrapper {\n  position: relative;\n  display: flex;\n  align-items: center;\n}\n\n/* Base Input Styles */\n.input {\n  width: 100%;\n  border: 1px solid var(--color-border-primary);\n  border-radius: 8px;\n  background-color: var(--color-background-primary);\n  color: var(--color-text-primary);\n  font-family: var(--font-family-base);\n  font-size: 14px;\n  line-height: 1.5;\n  transition: all 200ms cubic-bezier(0.4, 0, 0.2, 1);\n  outline: none;\n  box-sizing: border-box;\n}\n\n.input::placeholder {\n  color: var(--color-text-placeholder);\n}\n\n/* Size Variants */\n.input.sm {\n  height: 32px;\n  padding: 0 12px;\n  font-size: 12px;\n}\n\n.input.sm.hasStartIcon {\n  padding-left: 32px;\n}\n\n.input.sm.hasEndIcon {\n  padding-right: 32px;\n}\n\n.input.base {\n  height: 40px;\n  padding: 0 16px;\n  font-size: 14px;\n}\n\n.input.base.hasStartIcon {\n  padding-left: 40px;\n}\n\n.input.base.hasEndIcon {\n  padding-right: 40px;\n}\n\n.input.lg {\n  height: 48px;\n  padding: 0 20px;\n  font-size: 16px;\n}\n\n.input.lg.hasStartIcon {\n  padding-left: 48px;\n}\n\n.input.lg.hasEndIcon {\n  padding-right: 48px;\n}\n\n/* Style Variants */\n.input.default {\n  border: 1px solid var(--color-border-primary);\n  background-color: var(--color-background-primary);\n}\n\n.input.filled {\n  background-color: var(--color-background-secondary);\n  border-color: transparent;\n}\n\n.input.filled:hover:not(:disabled) {\n  background-color: var(--color-background-tertiary);\n}\n\n.input.filled:focus {\n  background-color: var(--color-background-primary);\n  border-color: var(--color-primary-600);\n}\n\n.input.ghost {\n  background-color: transparent;\n  border-color: transparent;\n  padding-left: 0;\n  padding-right: 0;\n}\n\n/* Ghost variant icon padding overrides */\n.input.ghost.hasStartIcon {\n  padding-left: 24px;\n}\n\n.input.ghost.hasEndIcon {\n  padding-right: 24px;\n}\n\n.input.ghost:hover:not(:disabled) {\n  background-color: var(--color-background-secondary);\n  border-color: var(--color-border-primary);\n}\n\n.input.ghost:focus {\n  background-color: var(--color-background-primary);\n  border-color: var(--color-primary-600);\n}\n\n/* Interactive States */\n.input:hover:not(:disabled) {\n  border-color: var(--color-border-hover);\n}\n\n.input:focus {\n  border-color: var(--color-primary-600);\n  box-shadow: var(--shadow-focus);\n}\n\n/* Error State */\n.input.error {\n  border-color: var(--color-error-300);\n  background-color: var(--color-background-primary);\n}\n\n.input.error:focus {\n  border-color: var(--color-error-500);\n  box-shadow: var(--shadow-error-focus);\n}\n\n/* Success State */\n.input.success {\n  border-color: var(--color-success-300);\n}\n\n.input.success:focus {\n  border-color: var(--color-success-500);\n  box-shadow: 0 0 0 4px var(--color-success-100);\n}\n\n/* Disabled State */\n.input:disabled {\n  background-color: var(--color-background-disabled);\n  border-color: var(--color-border-disabled);\n  color: var(--color-text-disabled);\n  cursor: not-allowed;\n}\n\n/* Icon Containers */\n.startIcon,\n.endIcon {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: var(--color-text-tertiary);\n  pointer-events: none;\n  z-index: 1;\n}\n\n.startIcon {\n  left: 12px;\n}\n\n.endIcon {\n  right: 12px;\n}\n\n/* Icon Size */\n.startIcon svg,\n.endIcon svg {\n  width: 16px;\n  height: 16px;\n  flex-shrink: 0;\n}\n\n/* Help Text Container */\n.helpText {\n  margin-top: 8px;\n  font-size: 12px;\n  line-height: 1.25;\n}\n\n/* Helper Text */\n.helperText {\n  color: var(--color-text-secondary);\n}\n\n/* Error Text */\n.errorText {\n  color: var(--color-text-error);\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.errorText svg {\n  width: 12px;\n  height: 12px;\n  flex-shrink: 0;\n}\n\n/* Focus management for labels */\n.label:focus-within {\n  color: var(--color-primary-600);\n}\n\n/* Enhanced accessibility for disabled state */\n.input:disabled + .startIcon,\n.input:disabled + .endIcon {\n  color: var(--color-text-disabled);\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n  .input.lg {\n    height: 44px;\n    font-size: 15px;\n  }\n  \n  .input.base {\n    height: 38px;\n  }\n  \n  .input.sm {\n    height: 30px;\n  }\n}",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 121,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "inputId": {
                    "name": "inputId",
                    "getSignature": {
                        "name": "inputId",
                        "type": "string",
                        "returnType": "string",
                        "line": 136
                    }
                },
                "helpTextId": {
                    "name": "helpTextId",
                    "getSignature": {
                        "name": "helpTextId",
                        "type": "string",
                        "returnType": "string",
                        "line": 140
                    }
                },
                "hasError": {
                    "name": "hasError",
                    "getSignature": {
                        "name": "hasError",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 144
                    }
                },
                "hasSuccess": {
                    "name": "hasSuccess",
                    "getSignature": {
                        "name": "hasSuccess",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 148
                    }
                },
                "hasStartIcon": {
                    "name": "hasStartIcon",
                    "getSignature": {
                        "name": "hasStartIcon",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 152
                    }
                },
                "hasEndIcon": {
                    "name": "hasEndIcon",
                    "getSignature": {
                        "name": "hasEndIcon",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 156
                    }
                },
                "inputClasses": {
                    "name": "inputClasses",
                    "getSignature": {
                        "name": "inputClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 160
                    }
                },
                "containerClasses": {
                    "name": "containerClasses",
                    "getSignature": {
                        "name": "containerClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 175
                    }
                }
            },
            "templateData": "<div [class]=\"containerClasses\">\n  <!-- Label -->\n  <label *ngIf=\"label\" [for]=\"inputId\" class=\"label\">\n    {{label}}\n    <span class=\"required\" *ngIf=\"required\">*</span>\n  </label>\n  \n  <!-- Input Wrapper -->\n  <div class=\"inputWrapper\">\n    <!-- Start Icon -->\n    <div class=\"startIcon\" *ngIf=\"startIcon\">\n      <ng-container *ngIf=\"isTemplate(startIcon); else stringStartIcon\">\n        <ng-container *ngTemplateOutlet=\"$any(startIcon)\"></ng-container>\n      </ng-container>\n      <ng-template #stringStartIcon>\n        <span *ngIf=\"isString(startIcon)\" [innerHTML]=\"startIcon\"></span>\n      </ng-template>\n    </div>\n    \n    <!-- Input Element -->\n    <input\n      #inputElement\n      [id]=\"inputId\"\n      [type]=\"type\"\n      [placeholder]=\"placeholder\"\n      [disabled]=\"disabled\"\n      [required]=\"required\"\n      [value]=\"value || ''\"\n      [class]=\"inputClasses\"\n      [attr.aria-invalid]=\"hasError\"\n      [attr.aria-describedby]=\"helpTextId\"\n      [attr.aria-required]=\"required\"\n      [attr.aria-label]=\"label\"\n      (input)=\"onInput($event)\"\n      (blur)=\"onBlur($event)\"\n      (focus)=\"onFocus($event)\"\n      (keyup)=\"onKeyUp($event)\"\n      (keydown)=\"onKeyDown($event)\"\n    />\n    \n    <!-- End Icon -->\n    <div class=\"endIcon\" *ngIf=\"endIcon\">\n      <ng-container *ngIf=\"isTemplate(endIcon); else stringEndIcon\">\n        <ng-container *ngTemplateOutlet=\"$any(endIcon)\"></ng-container>\n      </ng-container>\n      <ng-template #stringEndIcon>\n        <span *ngIf=\"isString(endIcon)\" [innerHTML]=\"endIcon\"></span>\n      </ng-template>\n    </div>\n  </div>\n  \n  <!-- Help Text / Error Message -->\n  <div class=\"helpText\" [id]=\"helpTextId\" *ngIf=\"helperText || errorMessage\">\n    <!-- Error Message -->\n    <span class=\"errorText\" *ngIf=\"hasError\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M8 1.5C4.4 1.5 1.5 4.4 1.5 8S4.4 14.5 8 14.5S14.5 11.6 14.5 8S11.6 1.5 8 1.5ZM8 10.5C7.7 10.5 7.5 10.3 7.5 10V8C7.5 7.7 7.7 7.5 8 7.5S8.5 7.7 8.5 8V10C8.5 10.3 8.3 10.5 8 10.5ZM8 6.5C7.7 6.5 7.5 6.3 7.5 6S7.7 5.5 8 5.5S8.5 5.7 8.5 6S8.3 6.5 8 6.5Z\" fill=\"currentColor\"/>\n      </svg>\n      {{errorMessage}}\n    </span>\n    \n    <!-- Helper Text -->\n    <span class=\"helperText\" *ngIf=\"!hasError && helperText\">{{helperText}}</span>\n  </div>\n</div>"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-896a8a34b9ffd28e619538f357346ac487df6db49072374a23006032b34ce21ab899a5a3288037c1e36a84bcf14fe496d6088ff26f88e0af0b7d7c6d50b99d33",
            "file": "src/app/components/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal",
            "styleUrls": [],
            "styles": [
                "\n    .modal-backdrop {\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: rgba(16, 24, 40, 0.7);\n      backdrop-filter: blur(8px);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      z-index: 1000;\n      padding: 16px;\n      box-sizing: border-box;\n    }\n    \n    .modal-panel {\n      background: white;\n      border-radius: 12px;\n      box-shadow: 0 25px 50px rgba(16, 24, 40, 0.25);\n      max-height: calc(100vh - 32px);\n      overflow-y: auto;\n      position: relative;\n      width: 100%;\n      max-width: 500px;\n    }\n    \n    .modal-panel.size-sm {\n      max-width: 400px;\n    }\n    \n    .modal-panel.size-base {\n      max-width: 500px;\n    }\n    \n    .modal-panel.size-lg {\n      max-width: 700px;\n    }\n    \n    .modal-panel.size-xl {\n      max-width: 900px;\n    }\n    \n    .modal-header {\n      display: flex;\n      align-items: flex-start;\n      justify-content: space-between;\n      padding: 24px 24px 16px 24px;\n      border-bottom: 1px solid #ddd6e3;\n    }\n    \n    .modal-header-content {\n      flex: 1;\n      margin-right: 16px;\n    }\n    \n    .modal-title {\n      margin: 0 0 4px 0;\n      color: #2a1f35;\n      font-size: 18px;\n      font-weight: 600;\n      line-height: 1.4;\n    }\n    \n    .modal-description {\n      margin: 0;\n      color: #6b5671;\n      font-size: 14px;\n      line-height: 1.4;\n    }\n    \n    .modal-close-button {\n      width: 40px;\n      height: 40px;\n      border: none;\n      background: transparent;\n      border-radius: 8px;\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: #6b5671;\n      transition: all 200ms ease;\n      flex-shrink: 0;\n    }\n    \n    .modal-close-button:hover {\n      background: #efebf2;\n      color: #2a1f35;\n    }\n    \n    .modal-body {\n      padding: 24px;\n      color: #2a1f35;\n      line-height: 1.5;\n    }\n    \n    .modal-footer {\n      padding: 16px 24px 24px 24px;\n      border-top: 1px solid #ddd6e3;\n      display: flex;\n      gap: 12px;\n      justify-content: flex-end;\n      background: #f8f6fa;\n      border-radius: 0 0 12px 12px;\n    }\n    \n    @media (max-width: 768px) {\n      .modal-backdrop {\n        padding: 8px;\n      }\n      \n      .modal-panel {\n        max-width: 100%;\n        max-height: calc(100vh - 16px);\n      }\n      \n      .modal-header,\n      .modal-body,\n      .modal-footer {\n        padding-left: 16px;\n        padding-right: 16px;\n      }\n    }\n  "
            ],
            "template": "<div class=\"modal-backdrop\" *ngIf=\"isOpen\" (click)=\"onBackdropClick($event)\">\n  <div class=\"modal-panel\" [class]=\"modalSizeClass\" (click)=\"$event.stopPropagation()\">\n    <!-- Header -->\n    <div class=\"modal-header\" *ngIf=\"title || description\">\n      <div class=\"modal-header-content\">\n        <h2 class=\"modal-title\" *ngIf=\"title\">{{ title }}</h2>\n        <p class=\"modal-description\" *ngIf=\"description\">{{ description }}</p>\n      </div>\n      <button class=\"modal-close-button\" (click)=\"closeModal()\" type=\"button\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n          <path d=\"M12 4L4 12M4 4L12 12\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n        </svg>\n      </button>\n    </div>\n\n    <!-- Body -->\n    <div class=\"modal-body\">\n      <ng-content></ng-content>\n    </div>\n\n    <!-- Footer -->\n    <div class=\"modal-footer\" *ngIf=\"showFooter\">\n      <ng-content select=\"[slot=footer]\"></ng-content>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "animationEnabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 173,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "closeOnBackdropClick",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 169,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "closeOnEscape",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 170,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 167,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 164,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 171,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showFooter",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 168,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'base'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 165,
                    "type": "\"sm\" | \"base\" | \"lg\" | \"xl\"",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 166,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 172,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 175,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBackdropClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEscapeKey",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown.escape', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:keydown.escape",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 192
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, HostListener } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-modal',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <div class=\"modal-backdrop\" *ngIf=\"isOpen\" (click)=\"onBackdropClick($event)\">\n      <div class=\"modal-panel\" [class]=\"modalSizeClass\" (click)=\"$event.stopPropagation()\">\n        <!-- Header -->\n        <div class=\"modal-header\" *ngIf=\"title || description\">\n          <div class=\"modal-header-content\">\n            <h2 class=\"modal-title\" *ngIf=\"title\">{{ title }}</h2>\n            <p class=\"modal-description\" *ngIf=\"description\">{{ description }}</p>\n          </div>\n          <button class=\"modal-close-button\" (click)=\"closeModal()\" type=\"button\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n              <path d=\"M12 4L4 12M4 4L12 12\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n            </svg>\n          </button>\n        </div>\n        \n        <!-- Body -->\n        <div class=\"modal-body\">\n          <ng-content></ng-content>\n        </div>\n        \n        <!-- Footer -->\n        <div class=\"modal-footer\" *ngIf=\"showFooter\">\n          <ng-content select=\"[slot=footer]\"></ng-content>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .modal-backdrop {\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: rgba(16, 24, 40, 0.7);\n      backdrop-filter: blur(8px);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      z-index: 1000;\n      padding: 16px;\n      box-sizing: border-box;\n    }\n    \n    .modal-panel {\n      background: white;\n      border-radius: 12px;\n      box-shadow: 0 25px 50px rgba(16, 24, 40, 0.25);\n      max-height: calc(100vh - 32px);\n      overflow-y: auto;\n      position: relative;\n      width: 100%;\n      max-width: 500px;\n    }\n    \n    .modal-panel.size-sm {\n      max-width: 400px;\n    }\n    \n    .modal-panel.size-base {\n      max-width: 500px;\n    }\n    \n    .modal-panel.size-lg {\n      max-width: 700px;\n    }\n    \n    .modal-panel.size-xl {\n      max-width: 900px;\n    }\n    \n    .modal-header {\n      display: flex;\n      align-items: flex-start;\n      justify-content: space-between;\n      padding: 24px 24px 16px 24px;\n      border-bottom: 1px solid #ddd6e3;\n    }\n    \n    .modal-header-content {\n      flex: 1;\n      margin-right: 16px;\n    }\n    \n    .modal-title {\n      margin: 0 0 4px 0;\n      color: #2a1f35;\n      font-size: 18px;\n      font-weight: 600;\n      line-height: 1.4;\n    }\n    \n    .modal-description {\n      margin: 0;\n      color: #6b5671;\n      font-size: 14px;\n      line-height: 1.4;\n    }\n    \n    .modal-close-button {\n      width: 40px;\n      height: 40px;\n      border: none;\n      background: transparent;\n      border-radius: 8px;\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: #6b5671;\n      transition: all 200ms ease;\n      flex-shrink: 0;\n    }\n    \n    .modal-close-button:hover {\n      background: #efebf2;\n      color: #2a1f35;\n    }\n    \n    .modal-body {\n      padding: 24px;\n      color: #2a1f35;\n      line-height: 1.5;\n    }\n    \n    .modal-footer {\n      padding: 16px 24px 24px 24px;\n      border-top: 1px solid #ddd6e3;\n      display: flex;\n      gap: 12px;\n      justify-content: flex-end;\n      background: #f8f6fa;\n      border-radius: 0 0 12px 12px;\n    }\n    \n    @media (max-width: 768px) {\n      .modal-backdrop {\n        padding: 8px;\n      }\n      \n      .modal-panel {\n        max-width: 100%;\n        max-height: calc(100vh - 16px);\n      }\n      \n      .modal-header,\n      .modal-body,\n      .modal-footer {\n        padding-left: 16px;\n        padding-right: 16px;\n      }\n    }\n  `]\n})\nexport class ModalComponent {\n  @Input() isOpen: boolean = false;\n  @Input() size: 'sm' | 'base' | 'lg' | 'xl' = 'base';\n  @Input() title?: string;\n  @Input() description?: string;\n  @Input() showFooter: boolean = true;\n  @Input() closeOnBackdropClick: boolean = true;\n  @Input() closeOnEscape: boolean = true;\n  @Input() position?: string;\n  @Input() variant?: string;\n  @Input() animationEnabled?: boolean;\n\n  @Output() onClose = new EventEmitter<void>();\n\n  get modalSizeClass(): string {\n    return `size-${this.size}`;\n  }\n\n  closeModal(): void {\n    this.onClose.emit();\n  }\n\n  onBackdropClick(event: Event): void {\n    if (this.closeOnBackdropClick && event.target === event.currentTarget) {\n      this.closeModal();\n    }\n  }\n\n  @HostListener('document:keydown.escape', ['$event'])\n  onEscapeKey(event: KeyboardEvent): void {\n    if (this.isOpen && this.closeOnEscape) {\n      this.closeModal();\n    }\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .modal-backdrop {\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: rgba(16, 24, 40, 0.7);\n      backdrop-filter: blur(8px);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      z-index: 1000;\n      padding: 16px;\n      box-sizing: border-box;\n    }\n    \n    .modal-panel {\n      background: white;\n      border-radius: 12px;\n      box-shadow: 0 25px 50px rgba(16, 24, 40, 0.25);\n      max-height: calc(100vh - 32px);\n      overflow-y: auto;\n      position: relative;\n      width: 100%;\n      max-width: 500px;\n    }\n    \n    .modal-panel.size-sm {\n      max-width: 400px;\n    }\n    \n    .modal-panel.size-base {\n      max-width: 500px;\n    }\n    \n    .modal-panel.size-lg {\n      max-width: 700px;\n    }\n    \n    .modal-panel.size-xl {\n      max-width: 900px;\n    }\n    \n    .modal-header {\n      display: flex;\n      align-items: flex-start;\n      justify-content: space-between;\n      padding: 24px 24px 16px 24px;\n      border-bottom: 1px solid #ddd6e3;\n    }\n    \n    .modal-header-content {\n      flex: 1;\n      margin-right: 16px;\n    }\n    \n    .modal-title {\n      margin: 0 0 4px 0;\n      color: #2a1f35;\n      font-size: 18px;\n      font-weight: 600;\n      line-height: 1.4;\n    }\n    \n    .modal-description {\n      margin: 0;\n      color: #6b5671;\n      font-size: 14px;\n      line-height: 1.4;\n    }\n    \n    .modal-close-button {\n      width: 40px;\n      height: 40px;\n      border: none;\n      background: transparent;\n      border-radius: 8px;\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: #6b5671;\n      transition: all 200ms ease;\n      flex-shrink: 0;\n    }\n    \n    .modal-close-button:hover {\n      background: #efebf2;\n      color: #2a1f35;\n    }\n    \n    .modal-body {\n      padding: 24px;\n      color: #2a1f35;\n      line-height: 1.5;\n    }\n    \n    .modal-footer {\n      padding: 16px 24px 24px 24px;\n      border-top: 1px solid #ddd6e3;\n      display: flex;\n      gap: 12px;\n      justify-content: flex-end;\n      background: #f8f6fa;\n      border-radius: 0 0 12px 12px;\n    }\n    \n    @media (max-width: 768px) {\n      .modal-backdrop {\n        padding: 8px;\n      }\n      \n      .modal-panel {\n        max-width: 100%;\n        max-height: calc(100vh - 16px);\n      }\n      \n      .modal-header,\n      .modal-body,\n      .modal-footer {\n        padding-left: 16px;\n        padding-right: 16px;\n      }\n    }\n  \n",
            "extends": [],
            "accessors": {
                "modalSizeClass": {
                    "name": "modalSizeClass",
                    "getSignature": {
                        "name": "modalSizeClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 177
                    }
                }
            }
        },
        {
            "name": "ModalDemoComponent",
            "id": "component-ModalDemoComponent-4769489f58401f00645c59e957e1e6d346d4f18a8a9fa3af77b4a7379cb68924d72db9e31e91f31968205050ec6302d5ab2747b34109a59292ac513de504d284",
            "file": "src/app/modal-demo/modal-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal-demo",
            "styleUrls": [],
            "styles": [
                "\n    .demo-container {\n      padding: 2rem;\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n    \n    .demo-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n      gap: 2rem;\n      margin-top: 2rem;\n    }\n    \n    .demo-section {\n      padding: 1.5rem;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      background: #f8f6fa;\n    }\n    \n    .demo-section h3 {\n      margin: 0 0 1rem 0;\n      color: #2a1f35;\n    }\n    \n    .button-group {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 0.5rem;\n      margin-bottom: 1rem;\n    }\n    \n    .demo-button {\n      padding: 0.5rem 1rem;\n      background: #611F69;\n      color: white;\n      border: none;\n      border-radius: 8px;\n      cursor: pointer;\n      font-size: 14px;\n      transition: background-color 0.2s;\n    }\n    \n    .demo-button:hover {\n      background: #5a1f60;\n    }\n    \n    .btn-danger {\n      background: #d92d20;\n    }\n    \n    .btn-success {\n      background: #12b76a;\n    }\n    \n    .btn-warning {\n      background: #f59e0b;\n    }\n    \n    .modal-actions {\n      display: flex;\n      gap: 0.75rem;\n      justify-content: flex-end;\n    }\n    \n    .modal-form {\n      display: flex;\n      flex-direction: column;\n      gap: 1rem;\n    }\n    \n    .form-group {\n      display: flex;\n      flex-direction: column;\n      gap: 0.25rem;\n    }\n    \n    .form-group label {\n      font-size: 14px;\n      font-weight: 500;\n      color: #2a1f35;\n    }\n    \n    .form-group input,\n    .form-group textarea {\n      padding: 0.5rem;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      font-size: 16px;\n    }\n    \n    .form-group input:focus,\n    .form-group textarea:focus {\n      outline: none;\n      border-color: #611F69;\n      box-shadow: 0 0 0 4px #ebd4ef;\n    }\n  "
            ],
            "template": "<div class=\"demo-container\">\n  <h1>Modal Component Demo</h1>\n  <p>Test the Angular Modal component with various configurations.</p>\n\n  <div class=\"demo-grid\">\n    <!-- Basic Modal -->\n    <div class=\"demo-section\">\n      <h3>Basic Modal</h3>\n      <button class=\"demo-button\" (click)=\"basicModalOpen = true\">\n        Open Basic Modal\n      </button>\n\n      <app-modal\n        [isOpen]=\"basicModalOpen\"\n        title=\"Basic Modal\"\n        description=\"This is a basic modal example.\"\n        (onClose)=\"basicModalOpen = false\">\n\n        <p>This is the modal content. You can put any content here including forms, images, or other components.</p>\n\n        <div slot=\"footer\" class=\"modal-actions\">\n          <app-button variant=\"secondary\" (onClick)=\"basicModalOpen = false\">Cancel</app-button>\n          <app-button variant=\"primary\" (onClick)=\"basicModalOpen = false\">Save</app-button>\n        </div>\n      </app-modal>\n    </div>\n\n    <!-- Different Sizes -->\n    <div class=\"demo-section\">\n      <h3>Size Variants</h3>\n      <div class=\"button-group\">\n        <button class=\"demo-button\" (click)=\"openSizeModal('sm')\">Small</button>\n        <button class=\"demo-button\" (click)=\"openSizeModal('base')\">Base</button>\n        <button class=\"demo-button\" (click)=\"openSizeModal('lg')\">Large</button>\n        <button class=\"demo-button\" (click)=\"openSizeModal('xl')\">Extra Large</button>\n      </div>\n\n      <app-modal\n        [isOpen]=\"sizeModalOpen\"\n        [size]=\"selectedSize\"\n        [title]=\"'Modal Size: ' + selectedSize\"\n        description=\"This modal demonstrates different size variants.\"\n        (onClose)=\"sizeModalOpen = false\">\n\n        <p>This modal is using the <strong>{{ selectedSize }}</strong> size variant.</p>\n        <p>You can adjust the modal size based on your content requirements.</p>\n\n        <div slot=\"footer\" class=\"modal-actions\">\n          <app-button variant=\"primary\" (onClick)=\"sizeModalOpen = false\">Close</app-button>\n        </div>\n      </app-modal>\n    </div>\n\n    <!-- Position Variants -->\n    <div class=\"demo-section\">\n      <h3>Position Variants</h3>\n      <div class=\"button-group\">\n        <button class=\"demo-button\" (click)=\"openPositionModal('center')\">Center</button>\n        <button class=\"demo-button\" (click)=\"openPositionModal('top')\">Top</button>\n        <button class=\"demo-button\" (click)=\"openPositionModal('bottom')\">Bottom</button>\n      </div>\n\n      <app-modal\n        [isOpen]=\"positionModalOpen\"\n        [position]=\"selectedPosition\"\n        [title]=\"'Position: ' + selectedPosition\"\n        description=\"This modal demonstrates different position variants.\"\n        (onClose)=\"positionModalOpen = false\">\n\n        <p>This modal is positioned at the <strong>{{ selectedPosition }}</strong> of the viewport.</p>\n\n        <div slot=\"footer\" class=\"modal-actions\">\n          <app-button variant=\"primary\" (onClick)=\"positionModalOpen = false\">Close</app-button>\n        </div>\n      </app-modal>\n    </div>\n\n    <!-- Variant Styles -->\n    <div class=\"demo-section\">\n      <h3>Style Variants</h3>\n      <div class=\"button-group\">\n        <button class=\"demo-button\" (click)=\"openVariantModal('default')\">Default</button>\n        <button class=\"demo-button btn-danger\" (click)=\"openVariantModal('danger')\">Danger</button>\n        <button class=\"demo-button btn-success\" (click)=\"openVariantModal('success')\">Success</button>\n        <button class=\"demo-button btn-warning\" (click)=\"openVariantModal('warning')\">Warning</button>\n      </div>\n\n      <app-modal\n        [isOpen]=\"variantModalOpen\"\n        [variant]=\"selectedVariant\"\n        [title]=\"getVariantTitle()\"\n        [description]=\"getVariantDescription()\"\n        (onClose)=\"variantModalOpen = false\">\n\n        <p>This modal uses the <strong>{{ selectedVariant }}</strong> variant styling.</p>\n\n        <div slot=\"footer\" class=\"modal-actions\">\n          <app-button variant=\"secondary\" (onClick)=\"variantModalOpen = false\">Cancel</app-button>\n          <app-button variant=\"primary\" (onClick)=\"variantModalOpen = false\">\n            {{ getVariantAction() }}\n          </app-button>\n        </div>\n      </app-modal>\n    </div>\n\n    <!-- Behavior Options -->\n    <div class=\"demo-section\">\n      <h3>Behavior Options</h3>\n      <div class=\"button-group\">\n        <button class=\"demo-button\" (click)=\"openBehaviorModal('no-backdrop')\">No Backdrop Close</button>\n        <button class=\"demo-button\" (click)=\"openBehaviorModal('no-escape')\">No Escape Close</button>\n        <button class=\"demo-button\" (click)=\"openBehaviorModal('no-animation')\">No Animation</button>\n      </div>\n\n      <app-modal\n        [isOpen]=\"behaviorModalOpen\"\n        [title]=\"getBehaviorTitle()\"\n        [description]=\"getBehaviorDescription()\"\n        [closeOnBackdropClick]=\"behaviorType !== 'no-backdrop'\"\n        [closeOnEscape]=\"behaviorType !== 'no-escape'\"\n        [animationEnabled]=\"behaviorType !== 'no-animation'\"\n        (onClose)=\"behaviorModalOpen = false\">\n\n        <p>{{ getBehaviorContent() }}</p>\n\n        <div slot=\"footer\" class=\"modal-actions\">\n          <app-button variant=\"primary\" (onClick)=\"behaviorModalOpen = false\">Close</app-button>\n        </div>\n      </app-modal>\n    </div>\n\n    <!-- Form Modal -->\n    <div class=\"demo-section\">\n      <h3>Form Modal</h3>\n      <button class=\"demo-button\" (click)=\"formModalOpen = true\">\n        Open Contact Form\n      </button>\n\n      <app-modal\n        [isOpen]=\"formModalOpen\"\n        size=\"lg\"\n        title=\"Contact Form\"\n        description=\"Please fill out the form below.\"\n        (onClose)=\"formModalOpen = false\">\n\n        <form class=\"modal-form\" (ngSubmit)=\"submitForm()\">\n          <div class=\"form-group\">\n            <label for=\"name\">Name *</label>\n            <input type=\"text\" id=\"name\" [(ngModel)]=\"formData.name\" required>\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"email\">Email *</label>\n            <input type=\"email\" id=\"email\" [(ngModel)]=\"formData.email\" required>\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"message\">Message</label>\n            <textarea id=\"message\" rows=\"4\" [(ngModel)]=\"formData.message\"></textarea>\n          </div>\n        </form>\n\n        <div slot=\"footer\" class=\"modal-actions\">\n          <app-button variant=\"secondary\" (onClick)=\"formModalOpen = false\">Cancel</app-button>\n          <app-button variant=\"primary\" (onClick)=\"submitForm()\">Send Message</app-button>\n        </div>\n      </app-modal>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "basicModalOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 285
                },
                {
                    "name": "behaviorModalOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 300
                },
                {
                    "name": "behaviorType",
                    "defaultValue": "'no-backdrop'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"no-backdrop\" | \"no-escape\" | \"no-animation\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 301
                },
                {
                    "name": "formData",
                    "defaultValue": "{\n    name: '',\n    email: '',\n    message: ''\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 305
                },
                {
                    "name": "formModalOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 304
                },
                {
                    "name": "positionModalOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 292
                },
                {
                    "name": "selectedPosition",
                    "defaultValue": "'center'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"center\" | \"top\" | \"bottom\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 293
                },
                {
                    "name": "selectedSize",
                    "defaultValue": "'base'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"sm\" | \"base\" | \"lg\" | \"xl\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 289
                },
                {
                    "name": "selectedVariant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"default\" | \"danger\" | \"success\" | \"warning\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 297
                },
                {
                    "name": "sizeModalOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 288
                },
                {
                    "name": "variantModalOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 296
                }
            ],
            "methodsClass": [
                {
                    "name": "getBehaviorContent",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 379,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getBehaviorDescription",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 370,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getBehaviorTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 361,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getVariantAction",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 351,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getVariantDescription",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 341,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getVariantTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 331,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openBehaviorModal",
                    "args": [
                        {
                            "name": "type",
                            "type": "\"no-backdrop\" | \"no-escape\" | \"no-animation\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 326,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "\"no-backdrop\" | \"no-escape\" | \"no-animation\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openPositionModal",
                    "args": [
                        {
                            "name": "position",
                            "type": "\"center\" | \"top\" | \"bottom\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 316,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "\"center\" | \"top\" | \"bottom\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSizeModal",
                    "args": [
                        {
                            "name": "size",
                            "type": "\"sm\" | \"base\" | \"lg\" | \"xl\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 311,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "\"sm\" | \"base\" | \"lg\" | \"xl\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openVariantModal",
                    "args": [
                        {
                            "name": "variant",
                            "type": "\"default\" | \"danger\" | \"success\" | \"warning\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 321,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "variant",
                            "type": "\"default\" | \"danger\" | \"success\" | \"warning\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submitForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 388,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ModalComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ModalComponent } from '../components/modal/modal.component';\nimport { ButtonComponent } from '../components/button/button.component';\n\n@Component({\n  selector: 'app-modal-demo',\n  standalone: true,\n  imports: [CommonModule, FormsModule, ModalComponent, ButtonComponent],\n  template: `\n    <div class=\"demo-container\">\n      <h1>Modal Component Demo</h1>\n      <p>Test the Angular Modal component with various configurations.</p>\n      \n      <div class=\"demo-grid\">\n        <!-- Basic Modal -->\n        <div class=\"demo-section\">\n          <h3>Basic Modal</h3>\n          <button class=\"demo-button\" (click)=\"basicModalOpen = true\">\n            Open Basic Modal\n          </button>\n          \n          <app-modal\n            [isOpen]=\"basicModalOpen\"\n            title=\"Basic Modal\"\n            description=\"This is a basic modal example.\"\n            (onClose)=\"basicModalOpen = false\">\n            \n            <p>This is the modal content. You can put any content here including forms, images, or other components.</p>\n            \n            <div slot=\"footer\" class=\"modal-actions\">\n              <app-button variant=\"secondary\" (onClick)=\"basicModalOpen = false\">Cancel</app-button>\n              <app-button variant=\"primary\" (onClick)=\"basicModalOpen = false\">Save</app-button>\n            </div>\n          </app-modal>\n        </div>\n        \n        <!-- Different Sizes -->\n        <div class=\"demo-section\">\n          <h3>Size Variants</h3>\n          <div class=\"button-group\">\n            <button class=\"demo-button\" (click)=\"openSizeModal('sm')\">Small</button>\n            <button class=\"demo-button\" (click)=\"openSizeModal('base')\">Base</button>\n            <button class=\"demo-button\" (click)=\"openSizeModal('lg')\">Large</button>\n            <button class=\"demo-button\" (click)=\"openSizeModal('xl')\">Extra Large</button>\n          </div>\n          \n          <app-modal\n            [isOpen]=\"sizeModalOpen\"\n            [size]=\"selectedSize\"\n            [title]=\"'Modal Size: ' + selectedSize\"\n            description=\"This modal demonstrates different size variants.\"\n            (onClose)=\"sizeModalOpen = false\">\n            \n            <p>This modal is using the <strong>{{ selectedSize }}</strong> size variant.</p>\n            <p>You can adjust the modal size based on your content requirements.</p>\n            \n            <div slot=\"footer\" class=\"modal-actions\">\n              <app-button variant=\"primary\" (onClick)=\"sizeModalOpen = false\">Close</app-button>\n            </div>\n          </app-modal>\n        </div>\n        \n        <!-- Position Variants -->\n        <div class=\"demo-section\">\n          <h3>Position Variants</h3>\n          <div class=\"button-group\">\n            <button class=\"demo-button\" (click)=\"openPositionModal('center')\">Center</button>\n            <button class=\"demo-button\" (click)=\"openPositionModal('top')\">Top</button>\n            <button class=\"demo-button\" (click)=\"openPositionModal('bottom')\">Bottom</button>\n          </div>\n          \n          <app-modal\n            [isOpen]=\"positionModalOpen\"\n            [position]=\"selectedPosition\"\n            [title]=\"'Position: ' + selectedPosition\"\n            description=\"This modal demonstrates different position variants.\"\n            (onClose)=\"positionModalOpen = false\">\n            \n            <p>This modal is positioned at the <strong>{{ selectedPosition }}</strong> of the viewport.</p>\n            \n            <div slot=\"footer\" class=\"modal-actions\">\n              <app-button variant=\"primary\" (onClick)=\"positionModalOpen = false\">Close</app-button>\n            </div>\n          </app-modal>\n        </div>\n        \n        <!-- Variant Styles -->\n        <div class=\"demo-section\">\n          <h3>Style Variants</h3>\n          <div class=\"button-group\">\n            <button class=\"demo-button\" (click)=\"openVariantModal('default')\">Default</button>\n            <button class=\"demo-button btn-danger\" (click)=\"openVariantModal('danger')\">Danger</button>\n            <button class=\"demo-button btn-success\" (click)=\"openVariantModal('success')\">Success</button>\n            <button class=\"demo-button btn-warning\" (click)=\"openVariantModal('warning')\">Warning</button>\n          </div>\n          \n          <app-modal\n            [isOpen]=\"variantModalOpen\"\n            [variant]=\"selectedVariant\"\n            [title]=\"getVariantTitle()\"\n            [description]=\"getVariantDescription()\"\n            (onClose)=\"variantModalOpen = false\">\n            \n            <p>This modal uses the <strong>{{ selectedVariant }}</strong> variant styling.</p>\n            \n            <div slot=\"footer\" class=\"modal-actions\">\n              <app-button variant=\"secondary\" (onClick)=\"variantModalOpen = false\">Cancel</app-button>\n              <app-button variant=\"primary\" (onClick)=\"variantModalOpen = false\">\n                {{ getVariantAction() }}\n              </app-button>\n            </div>\n          </app-modal>\n        </div>\n        \n        <!-- Behavior Options -->\n        <div class=\"demo-section\">\n          <h3>Behavior Options</h3>\n          <div class=\"button-group\">\n            <button class=\"demo-button\" (click)=\"openBehaviorModal('no-backdrop')\">No Backdrop Close</button>\n            <button class=\"demo-button\" (click)=\"openBehaviorModal('no-escape')\">No Escape Close</button>\n            <button class=\"demo-button\" (click)=\"openBehaviorModal('no-animation')\">No Animation</button>\n          </div>\n          \n          <app-modal\n            [isOpen]=\"behaviorModalOpen\"\n            [title]=\"getBehaviorTitle()\"\n            [description]=\"getBehaviorDescription()\"\n            [closeOnBackdropClick]=\"behaviorType !== 'no-backdrop'\"\n            [closeOnEscape]=\"behaviorType !== 'no-escape'\"\n            [animationEnabled]=\"behaviorType !== 'no-animation'\"\n            (onClose)=\"behaviorModalOpen = false\">\n            \n            <p>{{ getBehaviorContent() }}</p>\n            \n            <div slot=\"footer\" class=\"modal-actions\">\n              <app-button variant=\"primary\" (onClick)=\"behaviorModalOpen = false\">Close</app-button>\n            </div>\n          </app-modal>\n        </div>\n        \n        <!-- Form Modal -->\n        <div class=\"demo-section\">\n          <h3>Form Modal</h3>\n          <button class=\"demo-button\" (click)=\"formModalOpen = true\">\n            Open Contact Form\n          </button>\n          \n          <app-modal\n            [isOpen]=\"formModalOpen\"\n            size=\"lg\"\n            title=\"Contact Form\"\n            description=\"Please fill out the form below.\"\n            (onClose)=\"formModalOpen = false\">\n            \n            <form class=\"modal-form\" (ngSubmit)=\"submitForm()\">\n              <div class=\"form-group\">\n                <label for=\"name\">Name *</label>\n                <input type=\"text\" id=\"name\" [(ngModel)]=\"formData.name\" required>\n              </div>\n              \n              <div class=\"form-group\">\n                <label for=\"email\">Email *</label>\n                <input type=\"email\" id=\"email\" [(ngModel)]=\"formData.email\" required>\n              </div>\n              \n              <div class=\"form-group\">\n                <label for=\"message\">Message</label>\n                <textarea id=\"message\" rows=\"4\" [(ngModel)]=\"formData.message\"></textarea>\n              </div>\n            </form>\n            \n            <div slot=\"footer\" class=\"modal-actions\">\n              <app-button variant=\"secondary\" (onClick)=\"formModalOpen = false\">Cancel</app-button>\n              <app-button variant=\"primary\" (onClick)=\"submitForm()\">Send Message</app-button>\n            </div>\n          </app-modal>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .demo-container {\n      padding: 2rem;\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n    \n    .demo-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n      gap: 2rem;\n      margin-top: 2rem;\n    }\n    \n    .demo-section {\n      padding: 1.5rem;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      background: #f8f6fa;\n    }\n    \n    .demo-section h3 {\n      margin: 0 0 1rem 0;\n      color: #2a1f35;\n    }\n    \n    .button-group {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 0.5rem;\n      margin-bottom: 1rem;\n    }\n    \n    .demo-button {\n      padding: 0.5rem 1rem;\n      background: #611F69;\n      color: white;\n      border: none;\n      border-radius: 8px;\n      cursor: pointer;\n      font-size: 14px;\n      transition: background-color 0.2s;\n    }\n    \n    .demo-button:hover {\n      background: #5a1f60;\n    }\n    \n    .btn-danger {\n      background: #d92d20;\n    }\n    \n    .btn-success {\n      background: #12b76a;\n    }\n    \n    .btn-warning {\n      background: #f59e0b;\n    }\n    \n    .modal-actions {\n      display: flex;\n      gap: 0.75rem;\n      justify-content: flex-end;\n    }\n    \n    .modal-form {\n      display: flex;\n      flex-direction: column;\n      gap: 1rem;\n    }\n    \n    .form-group {\n      display: flex;\n      flex-direction: column;\n      gap: 0.25rem;\n    }\n    \n    .form-group label {\n      font-size: 14px;\n      font-weight: 500;\n      color: #2a1f35;\n    }\n    \n    .form-group input,\n    .form-group textarea {\n      padding: 0.5rem;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      font-size: 16px;\n    }\n    \n    .form-group input:focus,\n    .form-group textarea:focus {\n      outline: none;\n      border-color: #611F69;\n      box-shadow: 0 0 0 4px #ebd4ef;\n    }\n  `]\n})\nexport class ModalDemoComponent {\n  // Basic Modal\n  basicModalOpen = false;\n  \n  // Size Modal\n  sizeModalOpen = false;\n  selectedSize: 'sm' | 'base' | 'lg' | 'xl' = 'base';\n  \n  // Position Modal\n  positionModalOpen = false;\n  selectedPosition: 'center' | 'top' | 'bottom' = 'center';\n  \n  // Variant Modal\n  variantModalOpen = false;\n  selectedVariant: 'default' | 'danger' | 'success' | 'warning' = 'default';\n  \n  // Behavior Modal\n  behaviorModalOpen = false;\n  behaviorType: 'no-backdrop' | 'no-escape' | 'no-animation' = 'no-backdrop';\n  \n  // Form Modal\n  formModalOpen = false;\n  formData = {\n    name: '',\n    email: '',\n    message: ''\n  };\n  \n  openSizeModal(size: 'sm' | 'base' | 'lg' | 'xl') {\n    this.selectedSize = size;\n    this.sizeModalOpen = true;\n  }\n  \n  openPositionModal(position: 'center' | 'top' | 'bottom') {\n    this.selectedPosition = position;\n    this.positionModalOpen = true;\n  }\n  \n  openVariantModal(variant: 'default' | 'danger' | 'success' | 'warning') {\n    this.selectedVariant = variant;\n    this.variantModalOpen = true;\n  }\n  \n  openBehaviorModal(type: 'no-backdrop' | 'no-escape' | 'no-animation') {\n    this.behaviorType = type;\n    this.behaviorModalOpen = true;\n  }\n  \n  getVariantTitle(): string {\n    const titles = {\n      default: 'Default Modal',\n      danger: 'Delete Confirmation',\n      success: 'Success!',\n      warning: 'Warning Notice'\n    };\n    return titles[this.selectedVariant];\n  }\n  \n  getVariantDescription(): string {\n    const descriptions = {\n      default: 'This is a standard modal with default styling.',\n      danger: 'Are you sure you want to delete this item?',\n      success: 'Your action has been completed successfully.',\n      warning: 'Please review the following information before proceeding.'\n    };\n    return descriptions[this.selectedVariant];\n  }\n  \n  getVariantAction(): string {\n    const actions = {\n      default: 'Confirm',\n      danger: 'Delete',\n      success: 'Continue',\n      warning: 'Proceed'\n    };\n    return actions[this.selectedVariant];\n  }\n  \n  getBehaviorTitle(): string {\n    const titles = {\n      'no-backdrop': 'No Backdrop Close',\n      'no-escape': 'No Escape Close',\n      'no-animation': 'No Animation'\n    };\n    return titles[this.behaviorType];\n  }\n  \n  getBehaviorDescription(): string {\n    const descriptions = {\n      'no-backdrop': 'This modal cannot be closed by clicking the backdrop.',\n      'no-escape': 'This modal cannot be closed with the Escape key.',\n      'no-animation': 'This modal opens without animations.'\n    };\n    return descriptions[this.behaviorType];\n  }\n  \n  getBehaviorContent(): string {\n    const content = {\n      'no-backdrop': 'Try clicking outside the modal - it won\\'t close. Use the close button instead.',\n      'no-escape': 'Try pressing the Escape key - it won\\'t close. Use the close button instead.',\n      'no-animation': 'This modal appeared instantly without any transition animations.'\n    };\n    return content[this.behaviorType];\n  }\n  \n  submitForm() {\n    console.log('Form submitted:', this.formData);\n    this.formModalOpen = false;\n    // Reset form\n    this.formData = { name: '', email: '', message: '' };\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .demo-container {\n      padding: 2rem;\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n    \n    .demo-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n      gap: 2rem;\n      margin-top: 2rem;\n    }\n    \n    .demo-section {\n      padding: 1.5rem;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      background: #f8f6fa;\n    }\n    \n    .demo-section h3 {\n      margin: 0 0 1rem 0;\n      color: #2a1f35;\n    }\n    \n    .button-group {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 0.5rem;\n      margin-bottom: 1rem;\n    }\n    \n    .demo-button {\n      padding: 0.5rem 1rem;\n      background: #611F69;\n      color: white;\n      border: none;\n      border-radius: 8px;\n      cursor: pointer;\n      font-size: 14px;\n      transition: background-color 0.2s;\n    }\n    \n    .demo-button:hover {\n      background: #5a1f60;\n    }\n    \n    .btn-danger {\n      background: #d92d20;\n    }\n    \n    .btn-success {\n      background: #12b76a;\n    }\n    \n    .btn-warning {\n      background: #f59e0b;\n    }\n    \n    .modal-actions {\n      display: flex;\n      gap: 0.75rem;\n      justify-content: flex-end;\n    }\n    \n    .modal-form {\n      display: flex;\n      flex-direction: column;\n      gap: 1rem;\n    }\n    \n    .form-group {\n      display: flex;\n      flex-direction: column;\n      gap: 0.25rem;\n    }\n    \n    .form-group label {\n      font-size: 14px;\n      font-weight: 500;\n      color: #2a1f35;\n    }\n    \n    .form-group input,\n    .form-group textarea {\n      padding: 0.5rem;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      font-size: 16px;\n    }\n    \n    .form-group input:focus,\n    .form-group textarea:focus {\n      outline: none;\n      border-color: #611F69;\n      box-shadow: 0 0 0 4px #ebd4ef;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ProgressStepsComponent",
            "id": "component-ProgressStepsComponent-b48e66680a6390dbde2279f2e7f7cb5f953a6a96ef3302103937cbc28258894aaed259ed7d01c0a287696d98f7da9804020474191de4cc6f0a8610c5e9b15b00",
            "file": "src/app/components/progress-steps/progress-steps.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-progress-steps",
            "styleUrls": [
                "./progress-steps.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-steps.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "allowNavigation",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "currentStep",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "orientation",
                    "defaultValue": "'horizontal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "StepOrientation",
                    "decorators": []
                },
                {
                    "name": "responsive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showDescriptions",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showLabels",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "StepSize",
                    "decorators": []
                },
                {
                    "name": "steps",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "StepConfig[]",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "StepVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "complete",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter"
                },
                {
                    "name": "stepChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter"
                },
                {
                    "name": "stepClick",
                    "defaultValue": "new EventEmitter<StepClickEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getStepAriaLabel",
                    "args": [
                        {
                            "name": "step",
                            "type": "StepConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "step",
                            "type": "StepConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStepClasses",
                    "args": [
                        {
                            "name": "step",
                            "type": "StepConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "step",
                            "type": "StepConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onStepClick",
                    "args": [
                        {
                            "name": "step",
                            "type": "StepConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "step",
                            "type": "StepConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { \n  Component, \n  Input, \n  Output, \n  EventEmitter, \n  ViewEncapsulation\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { \n  StepConfig, \n  StepClickEvent,\n  StepOrientation,\n  StepVariant,\n  StepSize \n} from './progress-steps.types';\n\n@Component({\n  selector: 'app-progress-steps',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './progress-steps.component.html',\n  styleUrls: ['./progress-steps.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ProgressStepsComponent {\n  @Input() steps: StepConfig[] = [];\n  @Input() currentStep: number = 0;\n  @Input() allowNavigation: boolean = false;\n  @Input() showLabels: boolean = true;\n  @Input() showDescriptions: boolean = false;\n  @Input() orientation: StepOrientation = 'horizontal';\n  @Input() variant: StepVariant = 'default';\n  @Input() size: StepSize = 'medium';\n  @Input() responsive: boolean = true;\n\n  @Output() stepClick = new EventEmitter<StepClickEvent>();\n  @Output() stepChange = new EventEmitter<number>();\n  @Output() complete = new EventEmitter<void>();\n\n  get computedClasses(): string {\n    return [\n      `progress-steps-${this.orientation}`,\n      `progress-steps-${this.variant}`,\n      `progress-steps-${this.size}`,\n      this.responsive ? 'progress-steps-responsive' : ''\n    ].filter(Boolean).join(' ');\n  }\n\n  getStepClasses(step: StepConfig, index: number): string {\n    const classes = [];\n    \n    if (step.completed) classes.push('completed');\n    if (step.error) classes.push('error');\n    if (step.disabled) classes.push('disabled');\n    if (index === this.currentStep) classes.push('current');\n    if (this.allowNavigation && !step.disabled) classes.push('clickable');\n    \n    return classes.join(' ');\n  }\n\n  getStepAriaLabel(step: StepConfig, index: number): string {\n    let label = `Step ${index + 1}: ${step.label}`;\n    \n    if (step.completed) label += ', completed';\n    if (step.error) label += ', error';\n    if (step.disabled) label += ', disabled';\n    if (step.optional) label += ', optional';\n    if (index === this.currentStep) label += ', current step';\n    \n    return label;\n  }\n\n  onStepClick(step: StepConfig, index: number): void {\n    if (!this.allowNavigation || step.disabled) return;\n    \n    const previousIndex = this.currentStep;\n    this.stepClick.emit({ step, index, previousIndex });\n    \n    if (index !== this.currentStep) {\n      this.stepChange.emit(index);\n    }\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* ProgressSteps Component Styles */\n\n.progress-steps {\n  width: 100%;\n  font-family: var(--font-family-base);\n}\n\n.steps-container {\n  display: flex;\n  align-items: flex-start;\n  position: relative;\n  width: 100%;\n  justify-content: space-between;\n}\n\n.step-item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  position: relative;\n  flex: 1;\n  max-width: 200px;\n}\n\n.step-item.clickable {\n  cursor: pointer;\n}\n\n.step-circle {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  border: 2px solid var(--color-border-primary);\n  background: var(--color-background-primary);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  z-index: 2;\n  transition: all var(--animation-duration-base) var(--animation-ease-in-out);\n}\n\n.step-number {\n  font-size: var(--font-size-sm);\n  font-weight: var(--font-weight-semibold);\n  color: var(--color-text-secondary);\n}\n\n.step-icon {\n  font-size: 16px;\n  font-weight: bold;\n  color: white;\n}\n\n/* Step States */\n.step-item.completed .step-circle {\n  background: var(--color-success-600);\n  border-color: var(--color-success-600);\n}\n\n.step-item.current .step-circle {\n  background: var(--color-primary-600);\n  border-color: var(--color-primary-600);\n  box-shadow: var(--shadow-focus);\n}\n\n.step-item.current .step-number {\n  color: white;\n}\n\n.step-item.error .step-circle {\n  background: var(--color-error-600);\n  border-color: var(--color-error-600);\n}\n\n.step-item.disabled .step-circle {\n  background: var(--color-background-disabled);\n  border-color: var(--color-border-disabled);\n  opacity: 0.6;\n}\n\n.step-item.disabled .step-number {\n  color: var(--color-text-disabled);\n}\n\n/* Step Content */\n.step-content {\n  margin-top: var(--spacing-3);\n  text-align: center;\n  max-width: 120px;\n}\n\n.step-label {\n  font-size: var(--font-size-sm);\n  font-weight: var(--font-weight-medium);\n  color: var(--color-text-primary);\n  line-height: 1.4;\n  margin-bottom: var(--spacing-1);\n}\n\n.step-description {\n  font-size: var(--font-size-xs);\n  color: var(--color-text-secondary);\n  line-height: 1.4;\n}\n\n.step-optional {\n  font-size: var(--font-size-xs);\n  color: var(--color-text-tertiary);\n  font-weight: normal;\n}\n\n/* Connector Lines */\n.step-connector {\n  position: absolute;\n  top: 20px;\n  left: 50%;\n  width: 100%;\n  height: 2px;\n  background: var(--color-border-primary);\n  z-index: 1;\n}\n\n.step-item.completed .step-connector {\n  background: var(--color-success-600);\n}\n\n/* Hover Effects */\n.step-item.clickable:hover .step-circle {\n  transform: scale(1.05);\n}\n\n.step-item.clickable:hover .step-label {\n  color: var(--color-primary-600);\n}\n\n/* Responsive */\n@media (max-width: 768px) {\n  .step-content {\n    max-width: 80px;\n  }\n  \n  .step-label {\n    font-size: var(--font-size-xs);\n  }\n  \n  .step-description {\n    font-size: 10px;\n  }\n  \n  .step-circle {\n    width: 32px;\n    height: 32px;\n  }\n  \n  .step-number {\n    font-size: 12px;\n  }\n  \n  .step-icon {\n    font-size: 14px;\n  }\n  \n  .step-connector {\n    top: 16px;\n  }\n}",
                    "styleUrl": "./progress-steps.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "computedClasses": {
                    "name": "computedClasses",
                    "getSignature": {
                        "name": "computedClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 40
                    }
                }
            },
            "templateData": "<div class=\"progress-steps\" [ngClass]=\"computedClasses\">\n  <div class=\"steps-container\">\n    <div \n      *ngFor=\"let step of steps; let i = index\"\n      class=\"step-item\"\n      [ngClass]=\"getStepClasses(step, i)\"\n      [attr.aria-current]=\"i === currentStep ? 'step' : null\"\n      [attr.aria-label]=\"getStepAriaLabel(step, i)\"\n      (click)=\"onStepClick(step, i)\">\n      \n      <!-- Step Circle -->\n      <div class=\"step-circle\">\n        <span *ngIf=\"step.completed\" class=\"step-icon\">✓</span>\n        <span *ngIf=\"step.error\" class=\"step-icon\">✗</span>\n        <span *ngIf=\"!step.completed && !step.error\" class=\"step-number\">{{ i + 1 }}</span>\n      </div>\n      \n      <!-- Step Content -->\n      <div class=\"step-content\" *ngIf=\"showLabels || showDescriptions\">\n        <div class=\"step-label\" *ngIf=\"showLabels\">\n          {{ step.label }}\n          <span *ngIf=\"step.optional\" class=\"step-optional\">(optional)</span>\n        </div>\n        <div class=\"step-description\" *ngIf=\"showDescriptions && step.description\">\n          {{ step.description }}\n        </div>\n      </div>\n      \n      <!-- Connector Line -->\n      <div class=\"step-connector\" *ngIf=\"i < steps.length - 1\"></div>\n    </div>\n  </div>\n</div>"
        },
        {
            "name": "SelectorComponent",
            "id": "component-SelectorComponent-cd0fbf9dec1a28e6877900a934856f8fb0e3de03b24906b66acbdce503b1b409281a5fb9bab13acd619795aa8c15a6e4a04667d703f30268fcb39c39e6f7b155",
            "file": "src/app/components/selector/selector.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectorComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-selector",
            "styleUrls": [],
            "styles": [
                "\n    .selector-wrapper {\n      width: 100%;\n    }\n    \n    .selector-label {\n      display: block;\n      font-size: 14px;\n      font-weight: 500;\n      color: #2a1f35;\n      margin-bottom: 8px;\n    }\n    \n    .required-asterisk {\n      color: #d92d20;\n      margin-left: 4px;\n    }\n    \n    .selector-helper {\n      font-size: 12px;\n      color: #6b5671;\n      margin: 0 0 12px 0;\n    }\n    \n    .selector-error {\n      font-size: 12px;\n      color: #d92d20;\n      margin: 8px 0 0 0;\n    }\n    \n    /* Dropdown Styles */\n    .selector-select {\n      width: 100%;\n      padding: 12px;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      font-size: 16px;\n      color: #2a1f35;\n      background: white;\n      appearance: none;\n      background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b5671' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e\");\n      background-position: right 12px center;\n      background-repeat: no-repeat;\n      background-size: 16px;\n    }\n    \n    .selector-select:focus {\n      outline: none;\n      border-color: #611F69;\n      box-shadow: 0 0 0 4px #ebd4ef;\n    }\n    \n    .selector-select:disabled {\n      background-color: #efebf2;\n      color: #a695b0;\n      cursor: not-allowed;\n    }\n    \n    /* Grid Layout */\n    .selector-grid {\n      display: grid;\n      gap: 16px;\n    }\n    \n    .selector-grid.columns-1 { grid-template-columns: 1fr; }\n    .selector-grid.columns-2 { grid-template-columns: repeat(2, 1fr); }\n    .selector-grid.columns-3 { grid-template-columns: repeat(3, 1fr); }\n    .selector-grid.columns-4 { grid-template-columns: repeat(4, 1fr); }\n    \n    .selector-option-card {\n      position: relative;\n      padding: 16px;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      background: white;\n      cursor: pointer;\n      transition: all 200ms ease;\n    }\n    \n    .selector-option-card:hover {\n      border-color: #611F69;\n      box-shadow: 0 2px 8px rgba(97, 31, 105, 0.1);\n    }\n    \n    .selector-option-card.selected {\n      border-color: #611F69;\n      background: #f7edf8;\n    }\n    \n    .selector-option-card.disabled {\n      background: #efebf2;\n      cursor: not-allowed;\n      opacity: 0.6;\n    }\n    \n    /* List Layout */\n    .selector-list {\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n    }\n    \n    .selector-option-item {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      padding: 12px 16px;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      background: white;\n      cursor: pointer;\n      transition: all 200ms ease;\n    }\n    \n    .selector-option-item:hover {\n      border-color: #611F69;\n      background: #f7edf8;\n    }\n    \n    .selector-option-item.selected {\n      border-color: #611F69;\n      background: #f7edf8;\n    }\n    \n    .selector-option-item.disabled {\n      background: #efebf2;\n      cursor: not-allowed;\n      opacity: 0.6;\n    }\n    \n    /* Option Content */\n    .option-content {\n      flex: 1;\n    }\n    \n    .option-header {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 4px;\n    }\n    \n    .option-label {\n      font-size: 16px;\n      font-weight: 500;\n      color: #2a1f35;\n    }\n    \n    .option-badge {\n      background: #611F69;\n      color: white;\n      font-size: 11px;\n      font-weight: 500;\n      padding: 2px 6px;\n      border-radius: 4px;\n      text-transform: uppercase;\n    }\n    \n    .option-description {\n      font-size: 14px;\n      color: #6b5671;\n      margin: 0;\n      line-height: 1.4;\n    }\n    \n    /* Selection Indicator */\n    .selection-indicator {\n      width: 24px;\n      height: 24px;\n      border-radius: 50%;\n      background: #611F69;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-shrink: 0;\n    }\n    \n    .checkmark {\n      color: white;\n      font-size: 14px;\n      font-weight: bold;\n    }\n    \n    /* Selected Items */\n    .selected-items {\n      margin-top: 12px;\n    }\n    \n    .selected-count {\n      font-size: 14px;\n      color: #6b5671;\n      margin-bottom: 8px;\n      display: block;\n    }\n    \n    .selected-tags {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 8px;\n    }\n    \n    .selected-tag {\n      display: flex;\n      align-items: center;\n      gap: 6px;\n      background: #f7edf8;\n      color: #611F69;\n      padding: 6px 10px;\n      border-radius: 16px;\n      font-size: 14px;\n      border: 1px solid #ebd4ef;\n    }\n    \n    .tag-remove {\n      background: none;\n      border: none;\n      color: #611F69;\n      cursor: pointer;\n      font-size: 16px;\n      padding: 0;\n      line-height: 1;\n    }\n    \n    .tag-remove:hover {\n      color: #d92d20;\n    }\n    \n    /* Responsive */\n    @media (max-width: 768px) {\n      .selector-grid.columns-3,\n      .selector-grid.columns-4 {\n        grid-template-columns: repeat(2, 1fr);\n      }\n      \n      .selector-grid.columns-2 {\n        grid-template-columns: 1fr;\n      }\n      \n      .option-label {\n        font-size: 14px;\n      }\n      \n      .option-description {\n        font-size: 12px;\n      }\n    }\n  "
            ],
            "template": "<div class=\"selector-wrapper\">\n  <!-- Label -->\n  <label *ngIf=\"label\" class=\"selector-label\">\n    {{ label }}\n    <span *ngIf=\"required\" class=\"required-asterisk\">*</span>\n  </label>\n\n  <!-- Helper Text -->\n  <p *ngIf=\"helperText\" class=\"selector-helper\">{{ helperText }}</p>\n\n  <!-- Single Select Dropdown -->\n  <div *ngIf=\"mode === 'single' && layout === 'dropdown'\" class=\"selector-dropdown\">\n    <select\n      [value]=\"selectedValue?.value || ''\"\n      (change)=\"onSingleSelect($event)\"\n      [disabled]=\"disabled\"\n      class=\"selector-select\">\n      <option value=\"\" disabled>{{ placeholder || 'Select an option...' }}</option>\n      <option\n        *ngFor=\"let option of options\"\n        [value]=\"option.value\"\n        [disabled]=\"option.disabled\">\n        {{ option.label }}\n        <span *ngIf=\"option.badge\"> ({{ option.badge }})</span>\n      </option>\n    </select>\n  </div>\n\n  <!-- Grid Layout -->\n  <div *ngIf=\"layout === 'grid'\" class=\"selector-grid\" [class]=\"'columns-' + gridColumns\">\n    <div\n      *ngFor=\"let option of options\"\n      class=\"selector-option-card\"\n      [class]=\"getOptionClasses(option)\"\n      (click)=\"onOptionClick(option)\">\n\n      <div class=\"option-content\">\n        <div class=\"option-header\">\n          <span class=\"option-label\">{{ option.label }}</span>\n          <span *ngIf=\"option.badge\" class=\"option-badge\">{{ option.badge }}</span>\n        </div>\n        <p *ngIf=\"option.description\" class=\"option-description\">{{ option.description }}</p>\n      </div>\n\n      <!-- Selection indicator -->\n      <div class=\"selection-indicator\" *ngIf=\"isSelected(option)\">\n        <span class=\"checkmark\">✓</span>\n      </div>\n    </div>\n  </div>\n\n  <!-- List Layout -->\n  <div *ngIf=\"layout === 'list'\" class=\"selector-list\">\n    <div\n      *ngFor=\"let option of options\"\n      class=\"selector-option-item\"\n      [class]=\"getOptionClasses(option)\"\n      (click)=\"onOptionClick(option)\">\n\n      <div class=\"option-content\">\n        <span class=\"option-label\">{{ option.label }}</span>\n        <span *ngIf=\"option.badge\" class=\"option-badge\">{{ option.badge }}</span>\n        <p *ngIf=\"option.description\" class=\"option-description\">{{ option.description }}</p>\n      </div>\n\n      <div class=\"selection-indicator\" *ngIf=\"isSelected(option)\">\n        <span class=\"checkmark\">✓</span>\n      </div>\n    </div>\n  </div>\n\n  <!-- Multiple Selection Display -->\n  <div *ngIf=\"mode === 'multiple' && selectedValues.length > 0\" class=\"selected-items\">\n    <span class=\"selected-count\">{{ selectedValues.length }} selected</span>\n    <div class=\"selected-tags\">\n      <span\n        *ngFor=\"let item of selectedValues\"\n        class=\"selected-tag\">\n        {{ item.label }}\n        <button class=\"tag-remove\" (click)=\"removeSelected(item)\">×</button>\n      </span>\n    </div>\n  </div>\n\n  <!-- Error Message -->\n  <p *ngIf=\"errorMessage\" class=\"selector-error\">{{ errorMessage }}</p>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "clearable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 376,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 374,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 372,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "gridColumns",
                    "defaultValue": "2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 366,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "helperText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 371,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 369,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "layout",
                    "defaultValue": "'dropdown'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 365,
                    "type": "\"dropdown\" | \"grid\" | \"list\"",
                    "decorators": []
                },
                {
                    "name": "maxSelection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 377,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'single'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 364,
                    "type": "\"single\" | \"multiple\"",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 363,
                    "type": "SelectorOption[]",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 370,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 373,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "searchable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 375,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'base'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 368,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 367,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectionChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 379,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 384,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 385,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectedValue",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectorOption | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 381
                },
                {
                    "name": "selectedValues",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectorOption[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 382
                }
            ],
            "methodsClass": [
                {
                    "name": "getOptionClasses",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectorOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 387,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SelectorOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectorOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 394,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SelectorOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOptionClick",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectorOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 413,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SelectorOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSingleSelect",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 402,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 455,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 459,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeSelected",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectorOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 435,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SelectorOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 463,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 443,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport interface SelectorOption {\n  id: string;\n  label: string;\n  value: any;\n  description?: string;\n  badge?: string;\n  disabled?: boolean;\n}\n\n@Component({\n  selector: 'app-selector',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SelectorComponent),\n      multi: true\n    }\n  ],\n  template: `\n    <div class=\"selector-wrapper\">\n      <!-- Label -->\n      <label *ngIf=\"label\" class=\"selector-label\">\n        {{ label }}\n        <span *ngIf=\"required\" class=\"required-asterisk\">*</span>\n      </label>\n      \n      <!-- Helper Text -->\n      <p *ngIf=\"helperText\" class=\"selector-helper\">{{ helperText }}</p>\n      \n      <!-- Single Select Dropdown -->\n      <div *ngIf=\"mode === 'single' && layout === 'dropdown'\" class=\"selector-dropdown\">\n        <select \n          [value]=\"selectedValue?.value || ''\"\n          (change)=\"onSingleSelect($event)\"\n          [disabled]=\"disabled\"\n          class=\"selector-select\">\n          <option value=\"\" disabled>{{ placeholder || 'Select an option...' }}</option>\n          <option \n            *ngFor=\"let option of options\" \n            [value]=\"option.value\"\n            [disabled]=\"option.disabled\">\n            {{ option.label }}\n            <span *ngIf=\"option.badge\"> ({{ option.badge }})</span>\n          </option>\n        </select>\n      </div>\n      \n      <!-- Grid Layout -->\n      <div *ngIf=\"layout === 'grid'\" class=\"selector-grid\" [class]=\"'columns-' + gridColumns\">\n        <div \n          *ngFor=\"let option of options\"\n          class=\"selector-option-card\"\n          [class]=\"getOptionClasses(option)\"\n          (click)=\"onOptionClick(option)\">\n          \n          <div class=\"option-content\">\n            <div class=\"option-header\">\n              <span class=\"option-label\">{{ option.label }}</span>\n              <span *ngIf=\"option.badge\" class=\"option-badge\">{{ option.badge }}</span>\n            </div>\n            <p *ngIf=\"option.description\" class=\"option-description\">{{ option.description }}</p>\n          </div>\n          \n          <!-- Selection indicator -->\n          <div class=\"selection-indicator\" *ngIf=\"isSelected(option)\">\n            <span class=\"checkmark\">✓</span>\n          </div>\n        </div>\n      </div>\n      \n      <!-- List Layout -->\n      <div *ngIf=\"layout === 'list'\" class=\"selector-list\">\n        <div \n          *ngFor=\"let option of options\"\n          class=\"selector-option-item\"\n          [class]=\"getOptionClasses(option)\"\n          (click)=\"onOptionClick(option)\">\n          \n          <div class=\"option-content\">\n            <span class=\"option-label\">{{ option.label }}</span>\n            <span *ngIf=\"option.badge\" class=\"option-badge\">{{ option.badge }}</span>\n            <p *ngIf=\"option.description\" class=\"option-description\">{{ option.description }}</p>\n          </div>\n          \n          <div class=\"selection-indicator\" *ngIf=\"isSelected(option)\">\n            <span class=\"checkmark\">✓</span>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Multiple Selection Display -->\n      <div *ngIf=\"mode === 'multiple' && selectedValues.length > 0\" class=\"selected-items\">\n        <span class=\"selected-count\">{{ selectedValues.length }} selected</span>\n        <div class=\"selected-tags\">\n          <span \n            *ngFor=\"let item of selectedValues\" \n            class=\"selected-tag\">\n            {{ item.label }}\n            <button class=\"tag-remove\" (click)=\"removeSelected(item)\">×</button>\n          </span>\n        </div>\n      </div>\n      \n      <!-- Error Message -->\n      <p *ngIf=\"errorMessage\" class=\"selector-error\">{{ errorMessage }}</p>\n    </div>\n  `,\n  styles: [`\n    .selector-wrapper {\n      width: 100%;\n    }\n    \n    .selector-label {\n      display: block;\n      font-size: 14px;\n      font-weight: 500;\n      color: #2a1f35;\n      margin-bottom: 8px;\n    }\n    \n    .required-asterisk {\n      color: #d92d20;\n      margin-left: 4px;\n    }\n    \n    .selector-helper {\n      font-size: 12px;\n      color: #6b5671;\n      margin: 0 0 12px 0;\n    }\n    \n    .selector-error {\n      font-size: 12px;\n      color: #d92d20;\n      margin: 8px 0 0 0;\n    }\n    \n    /* Dropdown Styles */\n    .selector-select {\n      width: 100%;\n      padding: 12px;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      font-size: 16px;\n      color: #2a1f35;\n      background: white;\n      appearance: none;\n      background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b5671' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e\");\n      background-position: right 12px center;\n      background-repeat: no-repeat;\n      background-size: 16px;\n    }\n    \n    .selector-select:focus {\n      outline: none;\n      border-color: #611F69;\n      box-shadow: 0 0 0 4px #ebd4ef;\n    }\n    \n    .selector-select:disabled {\n      background-color: #efebf2;\n      color: #a695b0;\n      cursor: not-allowed;\n    }\n    \n    /* Grid Layout */\n    .selector-grid {\n      display: grid;\n      gap: 16px;\n    }\n    \n    .selector-grid.columns-1 { grid-template-columns: 1fr; }\n    .selector-grid.columns-2 { grid-template-columns: repeat(2, 1fr); }\n    .selector-grid.columns-3 { grid-template-columns: repeat(3, 1fr); }\n    .selector-grid.columns-4 { grid-template-columns: repeat(4, 1fr); }\n    \n    .selector-option-card {\n      position: relative;\n      padding: 16px;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      background: white;\n      cursor: pointer;\n      transition: all 200ms ease;\n    }\n    \n    .selector-option-card:hover {\n      border-color: #611F69;\n      box-shadow: 0 2px 8px rgba(97, 31, 105, 0.1);\n    }\n    \n    .selector-option-card.selected {\n      border-color: #611F69;\n      background: #f7edf8;\n    }\n    \n    .selector-option-card.disabled {\n      background: #efebf2;\n      cursor: not-allowed;\n      opacity: 0.6;\n    }\n    \n    /* List Layout */\n    .selector-list {\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n    }\n    \n    .selector-option-item {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      padding: 12px 16px;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      background: white;\n      cursor: pointer;\n      transition: all 200ms ease;\n    }\n    \n    .selector-option-item:hover {\n      border-color: #611F69;\n      background: #f7edf8;\n    }\n    \n    .selector-option-item.selected {\n      border-color: #611F69;\n      background: #f7edf8;\n    }\n    \n    .selector-option-item.disabled {\n      background: #efebf2;\n      cursor: not-allowed;\n      opacity: 0.6;\n    }\n    \n    /* Option Content */\n    .option-content {\n      flex: 1;\n    }\n    \n    .option-header {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 4px;\n    }\n    \n    .option-label {\n      font-size: 16px;\n      font-weight: 500;\n      color: #2a1f35;\n    }\n    \n    .option-badge {\n      background: #611F69;\n      color: white;\n      font-size: 11px;\n      font-weight: 500;\n      padding: 2px 6px;\n      border-radius: 4px;\n      text-transform: uppercase;\n    }\n    \n    .option-description {\n      font-size: 14px;\n      color: #6b5671;\n      margin: 0;\n      line-height: 1.4;\n    }\n    \n    /* Selection Indicator */\n    .selection-indicator {\n      width: 24px;\n      height: 24px;\n      border-radius: 50%;\n      background: #611F69;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-shrink: 0;\n    }\n    \n    .checkmark {\n      color: white;\n      font-size: 14px;\n      font-weight: bold;\n    }\n    \n    /* Selected Items */\n    .selected-items {\n      margin-top: 12px;\n    }\n    \n    .selected-count {\n      font-size: 14px;\n      color: #6b5671;\n      margin-bottom: 8px;\n      display: block;\n    }\n    \n    .selected-tags {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 8px;\n    }\n    \n    .selected-tag {\n      display: flex;\n      align-items: center;\n      gap: 6px;\n      background: #f7edf8;\n      color: #611F69;\n      padding: 6px 10px;\n      border-radius: 16px;\n      font-size: 14px;\n      border: 1px solid #ebd4ef;\n    }\n    \n    .tag-remove {\n      background: none;\n      border: none;\n      color: #611F69;\n      cursor: pointer;\n      font-size: 16px;\n      padding: 0;\n      line-height: 1;\n    }\n    \n    .tag-remove:hover {\n      color: #d92d20;\n    }\n    \n    /* Responsive */\n    @media (max-width: 768px) {\n      .selector-grid.columns-3,\n      .selector-grid.columns-4 {\n        grid-template-columns: repeat(2, 1fr);\n      }\n      \n      .selector-grid.columns-2 {\n        grid-template-columns: 1fr;\n      }\n      \n      .option-label {\n        font-size: 14px;\n      }\n      \n      .option-description {\n        font-size: 12px;\n      }\n    }\n  `]\n})\nexport class SelectorComponent implements ControlValueAccessor {\n  @Input() options: SelectorOption[] = [];\n  @Input() mode: 'single' | 'multiple' = 'single';\n  @Input() layout: 'dropdown' | 'grid' | 'list' = 'dropdown';\n  @Input() gridColumns: number = 2;\n  @Input() variant: string = 'default';\n  @Input() size: string = 'base';\n  @Input() label?: string;\n  @Input() placeholder?: string;\n  @Input() helperText?: string;\n  @Input() errorMessage?: string;\n  @Input() required: boolean = false;\n  @Input() disabled: boolean = false;\n  @Input() searchable: boolean = false;\n  @Input() clearable: boolean = false;\n  @Input() maxSelection?: number;\n\n  @Output() selectionChange = new EventEmitter<any>();\n\n  selectedValue: SelectorOption | null = null;\n  selectedValues: SelectorOption[] = [];\n\n  private onChange = (value: any) => {};\n  private onTouched = () => {};\n\n  getOptionClasses(option: SelectorOption): string {\n    const classes = [];\n    if (this.isSelected(option)) classes.push('selected');\n    if (option.disabled) classes.push('disabled');\n    return classes.join(' ');\n  }\n\n  isSelected(option: SelectorOption): boolean {\n    if (this.mode === 'single') {\n      return this.selectedValue?.id === option.id;\n    } else {\n      return this.selectedValues.some(item => item.id === option.id);\n    }\n  }\n\n  onSingleSelect(event: Event): void {\n    const select = event.target as HTMLSelectElement;\n    const selectedOption = this.options.find(option => option.value === select.value);\n    \n    if (selectedOption) {\n      this.selectedValue = selectedOption;\n      this.onChange(selectedOption.value);\n      this.selectionChange.emit(selectedOption.value);\n    }\n  }\n\n  onOptionClick(option: SelectorOption): void {\n    if (option.disabled) return;\n\n    if (this.mode === 'single') {\n      this.selectedValue = option;\n      this.onChange(option.value);\n      this.selectionChange.emit(option.value);\n    } else {\n      if (this.isSelected(option)) {\n        this.selectedValues = this.selectedValues.filter(item => item.id !== option.id);\n      } else {\n        if (!this.maxSelection || this.selectedValues.length < this.maxSelection) {\n          this.selectedValues = [...this.selectedValues, option];\n        }\n      }\n      \n      const values = this.selectedValues.map(item => item.value);\n      this.onChange(values);\n      this.selectionChange.emit(values);\n    }\n  }\n\n  removeSelected(option: SelectorOption): void {\n    this.selectedValues = this.selectedValues.filter(item => item.id !== option.id);\n    const values = this.selectedValues.map(item => item.value);\n    this.onChange(values);\n    this.selectionChange.emit(values);\n  }\n\n  // ControlValueAccessor implementation\n  writeValue(value: any): void {\n    if (this.mode === 'single') {\n      this.selectedValue = this.options.find(option => option.value === value) || null;\n    } else {\n      if (Array.isArray(value)) {\n        this.selectedValues = this.options.filter(option => value.includes(option.value));\n      } else {\n        this.selectedValues = [];\n      }\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .selector-wrapper {\n      width: 100%;\n    }\n    \n    .selector-label {\n      display: block;\n      font-size: 14px;\n      font-weight: 500;\n      color: #2a1f35;\n      margin-bottom: 8px;\n    }\n    \n    .required-asterisk {\n      color: #d92d20;\n      margin-left: 4px;\n    }\n    \n    .selector-helper {\n      font-size: 12px;\n      color: #6b5671;\n      margin: 0 0 12px 0;\n    }\n    \n    .selector-error {\n      font-size: 12px;\n      color: #d92d20;\n      margin: 8px 0 0 0;\n    }\n    \n    /* Dropdown Styles */\n    .selector-select {\n      width: 100%;\n      padding: 12px;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      font-size: 16px;\n      color: #2a1f35;\n      background: white;\n      appearance: none;\n      background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b5671' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e\");\n      background-position: right 12px center;\n      background-repeat: no-repeat;\n      background-size: 16px;\n    }\n    \n    .selector-select:focus {\n      outline: none;\n      border-color: #611F69;\n      box-shadow: 0 0 0 4px #ebd4ef;\n    }\n    \n    .selector-select:disabled {\n      background-color: #efebf2;\n      color: #a695b0;\n      cursor: not-allowed;\n    }\n    \n    /* Grid Layout */\n    .selector-grid {\n      display: grid;\n      gap: 16px;\n    }\n    \n    .selector-grid.columns-1 { grid-template-columns: 1fr; }\n    .selector-grid.columns-2 { grid-template-columns: repeat(2, 1fr); }\n    .selector-grid.columns-3 { grid-template-columns: repeat(3, 1fr); }\n    .selector-grid.columns-4 { grid-template-columns: repeat(4, 1fr); }\n    \n    .selector-option-card {\n      position: relative;\n      padding: 16px;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      background: white;\n      cursor: pointer;\n      transition: all 200ms ease;\n    }\n    \n    .selector-option-card:hover {\n      border-color: #611F69;\n      box-shadow: 0 2px 8px rgba(97, 31, 105, 0.1);\n    }\n    \n    .selector-option-card.selected {\n      border-color: #611F69;\n      background: #f7edf8;\n    }\n    \n    .selector-option-card.disabled {\n      background: #efebf2;\n      cursor: not-allowed;\n      opacity: 0.6;\n    }\n    \n    /* List Layout */\n    .selector-list {\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n    }\n    \n    .selector-option-item {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      padding: 12px 16px;\n      border: 1px solid #ddd6e3;\n      border-radius: 8px;\n      background: white;\n      cursor: pointer;\n      transition: all 200ms ease;\n    }\n    \n    .selector-option-item:hover {\n      border-color: #611F69;\n      background: #f7edf8;\n    }\n    \n    .selector-option-item.selected {\n      border-color: #611F69;\n      background: #f7edf8;\n    }\n    \n    .selector-option-item.disabled {\n      background: #efebf2;\n      cursor: not-allowed;\n      opacity: 0.6;\n    }\n    \n    /* Option Content */\n    .option-content {\n      flex: 1;\n    }\n    \n    .option-header {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      margin-bottom: 4px;\n    }\n    \n    .option-label {\n      font-size: 16px;\n      font-weight: 500;\n      color: #2a1f35;\n    }\n    \n    .option-badge {\n      background: #611F69;\n      color: white;\n      font-size: 11px;\n      font-weight: 500;\n      padding: 2px 6px;\n      border-radius: 4px;\n      text-transform: uppercase;\n    }\n    \n    .option-description {\n      font-size: 14px;\n      color: #6b5671;\n      margin: 0;\n      line-height: 1.4;\n    }\n    \n    /* Selection Indicator */\n    .selection-indicator {\n      width: 24px;\n      height: 24px;\n      border-radius: 50%;\n      background: #611F69;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-shrink: 0;\n    }\n    \n    .checkmark {\n      color: white;\n      font-size: 14px;\n      font-weight: bold;\n    }\n    \n    /* Selected Items */\n    .selected-items {\n      margin-top: 12px;\n    }\n    \n    .selected-count {\n      font-size: 14px;\n      color: #6b5671;\n      margin-bottom: 8px;\n      display: block;\n    }\n    \n    .selected-tags {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 8px;\n    }\n    \n    .selected-tag {\n      display: flex;\n      align-items: center;\n      gap: 6px;\n      background: #f7edf8;\n      color: #611F69;\n      padding: 6px 10px;\n      border-radius: 16px;\n      font-size: 14px;\n      border: 1px solid #ebd4ef;\n    }\n    \n    .tag-remove {\n      background: none;\n      border: none;\n      color: #611F69;\n      cursor: pointer;\n      font-size: 16px;\n      padding: 0;\n      line-height: 1;\n    }\n    \n    .tag-remove:hover {\n      color: #d92d20;\n    }\n    \n    /* Responsive */\n    @media (max-width: 768px) {\n      .selector-grid.columns-3,\n      .selector-grid.columns-4 {\n        grid-template-columns: repeat(2, 1fr);\n      }\n      \n      .selector-grid.columns-2 {\n        grid-template-columns: 1fr;\n      }\n      \n      .option-label {\n        font-size: 14px;\n      }\n      \n      .option-description {\n        font-size: 12px;\n      }\n    }\n  \n",
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ]
        },
        {
            "name": "TabComponent",
            "id": "component-TabComponent-133cbdc9b6c17c0f907375b257c56401c97c4e669ab44a1e6e6af08a453ec168db2706e50527d2b8f48dddd7b98ab688e9caba1ca0655f2e7b694048cf81dba2",
            "file": "src/app/components/tab/tab.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TabService",
                    "type": "injectable"
                }
            ],
            "selector": "app-tab",
            "styleUrls": [
                "./tab.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "alignment",
                    "defaultValue": "'start'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "TabAlignment",
                    "decorators": []
                },
                {
                    "name": "animated",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "ariaLabelledBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 97,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "defaultActiveTab",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "keepAlive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "lazyMount",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "orientation",
                    "defaultValue": "'horizontal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "TabOrientation",
                    "decorators": []
                },
                {
                    "name": "scrollable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "TabSize",
                    "decorators": []
                },
                {
                    "name": "tabListClassName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabPanelClassName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 99,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "TabItem[]",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'line'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "TabVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "tabBlur",
                    "defaultValue": "new EventEmitter<{ index: number; tabId: string; event: FocusEvent }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "EventEmitter"
                },
                {
                    "name": "tabChange",
                    "defaultValue": "new EventEmitter<{ index: number; tabId: string; previousIndex: number }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 102,
                    "type": "EventEmitter"
                },
                {
                    "name": "tabClick",
                    "defaultValue": "new EventEmitter<{ index: number; tabId: string; event: Event }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 103,
                    "type": "EventEmitter"
                },
                {
                    "name": "tabFocus",
                    "defaultValue": "new EventEmitter<{ index: number; tabId: string; event: FocusEvent }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 104,
                    "type": "EventEmitter"
                },
                {
                    "name": "tabKeyDown",
                    "defaultValue": "new EventEmitter<{ index: number; tabId: string; event: KeyboardEvent }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 106,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_initialized",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 142,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_uniqueId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 141,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "accessibility",
                    "defaultValue": "{\n    tabListId: '',\n    tabPrefix: '',\n    panelPrefix: '',\n    ariaLabel: '',\n    ariaLabelledBy: ''\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabAccessibility",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 131,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "contentTemplates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TemplateRef<any>>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 114,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 140,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "keyboardNavigation",
                    "defaultValue": "{\n    focusedIndex: -1,\n    isKeyboardActive: false\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabKeyboardNavigation",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 125,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "{\n    activeTab: 0,\n    previousTab: -1,\n    isAnimating: false,\n    mountedTabs: new Set()\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabState",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 117,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "tabContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tabContainer', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "tabContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tabContent', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "tabList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tabList', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "trackByTabId",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TrackByFunction<TabItem>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 518,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "TabItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 537,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "TabItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focusTab",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 397,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getActiveTab",
                    "args": [],
                    "optional": false,
                    "returnType": "TabItem | null",
                    "typeParameters": [],
                    "line": 521,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getActiveTabIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 525,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getAllTabs",
                    "args": [],
                    "optional": false,
                    "returnType": "TabItem[]",
                    "typeParameters": [],
                    "line": 529,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getIconClass",
                    "args": [
                        {
                            "name": "tab",
                            "type": "TabItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 584,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "TabItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTabClasses",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 477,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTabId",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 503,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTabIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 511,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTabPanelClasses",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 492,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTabPanelId",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 507,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasIcon",
                    "args": [
                        {
                            "name": "tab",
                            "type": "TabItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 580,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "TabItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initializeTabState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isString",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 576,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isTabActive",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 272,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isTabMounted",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 276,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isTemplate",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 572,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateToFirstTab",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 371,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "navigateToLastTab",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 384,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "navigateToNextTab",
                    "args": [
                        {
                            "name": "currentIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 329,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "currentIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateToPreviousTab",
                    "args": [
                        {
                            "name": "currentIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 350,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "currentIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onKeyDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 288,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keydown', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTabBlur",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 427,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTabClick",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 415,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTabFocus",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 419,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTab",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 546,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetKeyboardNavigation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 409,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectTab",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setActiveTab",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 533,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupAccessibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "shouldShowTabContent",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 281,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToStateChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateTab",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tab",
                            "type": "Partial<TabItem>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 564,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tab",
                            "type": "Partial<TabItem>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 288
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { \n  Component, \n  Input, \n  Output, \n  EventEmitter, \n  ChangeDetectionStrategy, \n  ViewEncapsulation,\n  OnInit,\n  OnDestroy,\n  ChangeDetectorRef,\n  HostListener,\n  ViewChild,\n  ElementRef,\n  ContentChildren,\n  QueryList,\n  TemplateRef,\n  AfterContentInit,\n  TrackByFunction\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Subject, takeUntil } from 'rxjs';\n\nimport { \n  TabItem, \n  TabConfig, \n  TabState, \n  TabKeyboardNavigation, \n  TabAccessibility,\n  TabEvents,\n  TabSize,\n  TabVariant,\n  TabOrientation,\n  TabAlignment\n} from './tab.types';\nimport { TabService } from './tab.service';\n\n@Component({\n  selector: 'app-tab',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './tab.component.html',\n  styleUrls: ['./tab.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('fadeIn', [\n      state('void', style({ opacity: 0 })),\n      state('*', style({ opacity: 1 })),\n      transition('void => *', [\n        animate('400ms cubic-bezier(0, 0, 0.2, 1)')\n      ])\n    ]),\n    trigger('slideIn', [\n      state('void', style({ \n        opacity: 0, \n        transform: 'translateY(8px)' \n      })),\n      state('*', style({ \n        opacity: 1, \n        transform: 'translateY(0)' \n      })),\n      transition('void => *', [\n        animate('400ms cubic-bezier(0, 0, 0.2, 1)')\n      ]),\n      transition('* => void', [\n        animate('150ms cubic-bezier(0.4, 0, 1, 1)', style({\n          opacity: 0,\n          transform: 'translateY(-8px)'\n        }))\n      ])\n    ])\n  ],\n  providers: [TabService]\n})\nexport class TabComponent implements OnInit, OnDestroy, AfterContentInit {\n  \n  // Primary Configuration\n  @Input() tabs: TabItem[] = [];\n  @Input() defaultActiveTab: number = 0;\n  @Input() variant: TabVariant = 'line';\n  @Input() size: TabSize = 'medium';\n  @Input() orientation: TabOrientation = 'horizontal';\n  @Input() alignment: TabAlignment = 'start';\n  \n  // Behavior Configuration\n  @Input() lazyMount: boolean = false;\n  @Input() keepAlive: boolean = false;\n  @Input() scrollable: boolean = false;\n  @Input() animated: boolean = true;\n  \n  // Accessibility\n  @Input() ariaLabel?: string;\n  @Input() ariaLabelledBy?: string;\n  \n  // Styling\n  @Input() className?: string;\n  @Input() tabListClassName?: string;\n  @Input() tabPanelClassName?: string;\n  \n  // Output Events\n  @Output() tabChange = new EventEmitter<{ index: number; tabId: string; previousIndex: number }>();\n  @Output() tabClick = new EventEmitter<{ index: number; tabId: string; event: Event }>();\n  @Output() tabFocus = new EventEmitter<{ index: number; tabId: string; event: FocusEvent }>();\n  @Output() tabBlur = new EventEmitter<{ index: number; tabId: string; event: FocusEvent }>();\n  @Output() tabKeyDown = new EventEmitter<{ index: number; tabId: string; event: KeyboardEvent }>();\n  \n  // ViewChild References\n  @ViewChild('tabContainer', { static: true }) tabContainer!: ElementRef<HTMLDivElement>;\n  @ViewChild('tabList', { static: true }) tabList!: ElementRef<HTMLDivElement>;\n  @ViewChild('tabContent', { static: true }) tabContent!: ElementRef<HTMLDivElement>;\n  \n  // ContentChildren for custom content\n  @ContentChildren(TemplateRef) contentTemplates!: QueryList<TemplateRef<any>>;\n  \n  // Internal State\n  public state: TabState = {\n    activeTab: 0,\n    previousTab: -1,\n    isAnimating: false,\n    mountedTabs: new Set()\n  };\n  \n  // Keyboard Navigation\n  public keyboardNavigation: TabKeyboardNavigation = {\n    focusedIndex: -1,\n    isKeyboardActive: false\n  };\n  \n  // Accessibility\n  public accessibility: TabAccessibility = {\n    tabListId: '',\n    tabPrefix: '',\n    panelPrefix: '',\n    ariaLabel: '',\n    ariaLabelledBy: ''\n  };\n  \n  // Internal Properties\n  private destroy$ = new Subject<void>();\n  public _uniqueId: string = '';\n  private _initialized = false;\n  \n  constructor(\n    private cdr: ChangeDetectorRef,\n    private tabService: TabService\n  ) {\n    this._uniqueId = `tab-${Math.random().toString(36).substr(2, 9)}`;\n    this.accessibility.tabListId = `${this._uniqueId}-list`;\n    this.accessibility.tabPrefix = `${this._uniqueId}-tab`;\n    this.accessibility.panelPrefix = `${this._uniqueId}-panel`;\n  }\n  \n  ngOnInit(): void {\n    this.initializeComponent();\n    this.setupAccessibility();\n    this.subscribeToStateChanges();\n  }\n  \n  ngAfterContentInit(): void {\n    this.initializeTabState();\n    this._initialized = true;\n    this.cdr.markForCheck();\n  }\n  \n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  \n  // Initialization Methods\n  private initializeComponent(): void {\n    const config: TabConfig = {\n      tabs: this.tabs,\n      defaultActiveTab: this.defaultActiveTab,\n      variant: this.variant,\n      size: this.size,\n      orientation: this.orientation,\n      alignment: this.alignment,\n      lazyMount: this.lazyMount,\n      keepAlive: this.keepAlive,\n      scrollable: this.scrollable,\n      animated: this.animated,\n      ariaLabel: this.ariaLabel,\n      ariaLabelledBy: this.ariaLabelledBy,\n      className: this.className,\n      tabListClassName: this.tabListClassName,\n      tabPanelClassName: this.tabPanelClassName\n    };\n    \n    this.tabService.initialize(config);\n  }\n  \n  private setupAccessibility(): void {\n    this.accessibility.ariaLabel = this.ariaLabel || 'Tabs';\n    this.accessibility.ariaLabelledBy = this.ariaLabelledBy || '';\n  }\n  \n  private subscribeToStateChanges(): void {\n    this.tabService.state$.pipe(\n      takeUntil(this.destroy$)\n    ).subscribe(state => {\n      this.state = state;\n      this.cdr.markForCheck();\n    });\n  }\n  \n  private initializeTabState(): void {\n    // Validate default active tab\n    const validIndex = Math.max(0, Math.min(this.defaultActiveTab, this.tabs.length - 1));\n    this.state.activeTab = validIndex;\n    this.state.previousTab = -1;\n    \n    // Initialize mounted tabs for lazy loading\n    if (this.lazyMount) {\n      this.state.mountedTabs.add(validIndex);\n    } else {\n      // Mount all tabs if not lazy loading\n      for (let i = 0; i < this.tabs.length; i++) {\n        this.state.mountedTabs.add(i);\n      }\n    }\n  }\n  \n  // Tab Management Methods\n  public selectTab(index: number, event?: Event): void {\n    if (!this._initialized || index < 0 || index >= this.tabs.length) return;\n    \n    const tab = this.tabs[index];\n    if (tab.disabled) return;\n    \n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    \n    const previousIndex = this.state.activeTab;\n    \n    if (index === previousIndex) return;\n    \n    // Update state\n    this.state.previousTab = previousIndex;\n    this.state.activeTab = index;\n    this.state.isAnimating = this.animated;\n    \n    // Mount tab if lazy loading\n    if (this.lazyMount) {\n      this.state.mountedTabs.add(index);\n    }\n    \n    // Reset keyboard navigation\n    this.resetKeyboardNavigation();\n    \n    // Emit events\n    this.tabChange.emit({ index, tabId: tab.id, previousIndex });\n    \n    if (event) {\n      this.tabClick.emit({ index, tabId: tab.id, event });\n    }\n    \n    // Handle animation timing\n    if (this.animated) {\n      setTimeout(() => {\n        this.state.isAnimating = false;\n        this.cdr.markForCheck();\n      }, 400);\n    }\n    \n    this.cdr.markForCheck();\n  }\n  \n  public isTabActive(index: number): boolean {\n    return this.state.activeTab === index;\n  }\n  \n  public isTabMounted(index: number): boolean {\n    if (!this.lazyMount) return true;\n    return this.state.mountedTabs.has(index);\n  }\n  \n  public shouldShowTabContent(index: number): boolean {\n    if (!this.keepAlive && !this.isTabActive(index)) return false;\n    return this.isTabMounted(index);\n  }\n  \n  // Keyboard Navigation\n  @HostListener('keydown', ['$event'])\n  onKeyDown(event: KeyboardEvent): void {\n    const target = event.target as HTMLElement;\n    const tabButton = target.closest('[role=\"tab\"]');\n    \n    if (!tabButton) return;\n    \n    const tabIndex = parseInt(tabButton.getAttribute('data-tab-index') || '0', 10);\n    const tab = this.tabs[tabIndex];\n    \n    if (!tab) return;\n    \n    // Emit keydown event\n    this.tabKeyDown.emit({ index: tabIndex, tabId: tab.id, event });\n    \n    switch (event.key) {\n      case 'ArrowRight':\n      case 'ArrowDown':\n        event.preventDefault();\n        this.navigateToNextTab(tabIndex);\n        break;\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        event.preventDefault();\n        this.navigateToPreviousTab(tabIndex);\n        break;\n      case 'Home':\n        event.preventDefault();\n        this.navigateToFirstTab();\n        break;\n      case 'End':\n        event.preventDefault();\n        this.navigateToLastTab();\n        break;\n      case 'Enter':\n      case ' ':\n        event.preventDefault();\n        this.selectTab(tabIndex, event);\n        break;\n    }\n  }\n  \n  private navigateToNextTab(currentIndex: number): void {\n    this.keyboardNavigation.isKeyboardActive = true;\n    \n    let nextIndex = currentIndex + 1;\n    while (nextIndex < this.tabs.length && this.tabs[nextIndex].disabled) {\n      nextIndex++;\n    }\n    \n    if (nextIndex >= this.tabs.length) {\n      // Wrap to beginning\n      nextIndex = 0;\n      while (nextIndex < this.tabs.length && this.tabs[nextIndex].disabled) {\n        nextIndex++;\n      }\n    }\n    \n    if (nextIndex < this.tabs.length) {\n      this.focusTab(nextIndex);\n    }\n  }\n  \n  private navigateToPreviousTab(currentIndex: number): void {\n    this.keyboardNavigation.isKeyboardActive = true;\n    \n    let prevIndex = currentIndex - 1;\n    while (prevIndex >= 0 && this.tabs[prevIndex].disabled) {\n      prevIndex--;\n    }\n    \n    if (prevIndex < 0) {\n      // Wrap to end\n      prevIndex = this.tabs.length - 1;\n      while (prevIndex >= 0 && this.tabs[prevIndex].disabled) {\n        prevIndex--;\n      }\n    }\n    \n    if (prevIndex >= 0) {\n      this.focusTab(prevIndex);\n    }\n  }\n  \n  private navigateToFirstTab(): void {\n    this.keyboardNavigation.isKeyboardActive = true;\n    \n    let firstIndex = 0;\n    while (firstIndex < this.tabs.length && this.tabs[firstIndex].disabled) {\n      firstIndex++;\n    }\n    \n    if (firstIndex < this.tabs.length) {\n      this.focusTab(firstIndex);\n    }\n  }\n  \n  private navigateToLastTab(): void {\n    this.keyboardNavigation.isKeyboardActive = true;\n    \n    let lastIndex = this.tabs.length - 1;\n    while (lastIndex >= 0 && this.tabs[lastIndex].disabled) {\n      lastIndex--;\n    }\n    \n    if (lastIndex >= 0) {\n      this.focusTab(lastIndex);\n    }\n  }\n  \n  private focusTab(index: number): void {\n    this.keyboardNavigation.focusedIndex = index;\n    \n    const tabButton = this.tabList.nativeElement.querySelector(\n      `[data-tab-index=\"${index}\"]`\n    ) as HTMLElement;\n    \n    if (tabButton) {\n      tabButton.focus();\n    }\n  }\n  \n  private resetKeyboardNavigation(): void {\n    this.keyboardNavigation.focusedIndex = -1;\n    this.keyboardNavigation.isKeyboardActive = false;\n  }\n  \n  // Event Handlers\n  public onTabClick(index: number, event: Event): void {\n    this.selectTab(index, event);\n  }\n  \n  public onTabFocus(index: number, event: FocusEvent): void {\n    this.keyboardNavigation.focusedIndex = index;\n    const tab = this.tabs[index];\n    if (tab) {\n      this.tabFocus.emit({ index, tabId: tab.id, event });\n    }\n  }\n  \n  public onTabBlur(index: number, event: FocusEvent): void {\n    // Don't reset focused index immediately to handle keyboard navigation\n    const tab = this.tabs[index];\n    if (tab) {\n      this.tabBlur.emit({ index, tabId: tab.id, event });\n    }\n    \n    // Reset after a short delay to allow for keyboard navigation\n    setTimeout(() => {\n      if (!this.tabList.nativeElement.contains(document.activeElement)) {\n        this.resetKeyboardNavigation();\n      }\n    }, 100);\n  }\n  \n  // Template Helper Methods\n  public get containerClasses(): string {\n    return [\n      'tab-container',\n      this.variant,\n      this.size,\n      this.orientation,\n      this.alignment,\n      this.scrollable && 'scrollable',\n      this.animated && 'animated',\n      this.state.isAnimating && 'animating',\n      this.className\n    ].filter(Boolean).join(' ');\n  }\n  \n  public get tabListClasses(): string {\n    return [\n      'tab-list',\n      this.variant,\n      this.size,\n      this.orientation,\n      this.alignment,\n      this.scrollable && 'scrollable',\n      this.tabListClassName\n    ].filter(Boolean).join(' ');\n  }\n  \n  public get tabContentClasses(): string {\n    return [\n      'tab-content',\n      this.orientation,\n      this.tabPanelClassName\n    ].filter(Boolean).join(' ');\n  }\n  \n  public getTabClasses(index: number): { [key: string]: boolean } {\n    const tab = this.tabs[index];\n    const isActive = this.isTabActive(index);\n    const isFocused = this.keyboardNavigation.focusedIndex === index;\n    \n    return {\n      'tab-item': true,\n      'active': isActive,\n      'disabled': tab.disabled || false,\n      'focused': isFocused && this.keyboardNavigation.isKeyboardActive,\n      [this.variant]: true,\n      [this.size]: true\n    };\n  }\n  \n  public getTabPanelClasses(index: number): { [key: string]: boolean } {\n    const isActive = this.isTabActive(index);\n    \n    return {\n      'tab-panel': true,\n      'active': isActive,\n      'animated': this.animated,\n      'keep-alive': this.keepAlive\n    };\n  }\n  \n  public getTabId(index: number): string {\n    return `${this.accessibility.tabPrefix}-${index}`;\n  }\n  \n  public getTabPanelId(index: number): string {\n    return `${this.accessibility.panelPrefix}-${index}`;\n  }\n  \n  public getTabIndex(index: number): number {\n    const tab = this.tabs[index];\n    if (tab.disabled) return -1;\n    return this.isTabActive(index) ? 0 : -1;\n  }\n  \n  // TrackBy Functions\n  public trackByTabId: TrackByFunction<TabItem> = (index, tab) => tab.id;\n  \n  // Public API Methods\n  public getActiveTab(): TabItem | null {\n    return this.tabs[this.state.activeTab] || null;\n  }\n  \n  public getActiveTabIndex(): number {\n    return this.state.activeTab;\n  }\n  \n  public getAllTabs(): TabItem[] {\n    return this.tabs;\n  }\n  \n  public setActiveTab(index: number): void {\n    this.selectTab(index);\n  }\n  \n  public addTab(tab: TabItem, index?: number): void {\n    if (index !== undefined) {\n      this.tabs.splice(index, 0, tab);\n    } else {\n      this.tabs.push(tab);\n    }\n    this.cdr.markForCheck();\n  }\n  \n  public removeTab(index: number): void {\n    if (index < 0 || index >= this.tabs.length) return;\n    \n    this.tabs.splice(index, 1);\n    \n    // Adjust active tab if necessary\n    if (this.state.activeTab >= index && this.state.activeTab > 0) {\n      this.state.activeTab--;\n    } else if (this.state.activeTab >= this.tabs.length) {\n      this.state.activeTab = Math.max(0, this.tabs.length - 1);\n    }\n    \n    // Remove from mounted tabs\n    this.state.mountedTabs.delete(index);\n    \n    this.cdr.markForCheck();\n  }\n  \n  public updateTab(index: number, tab: Partial<TabItem>): void {\n    if (index < 0 || index >= this.tabs.length) return;\n    \n    this.tabs[index] = { ...this.tabs[index], ...tab };\n    this.cdr.markForCheck();\n  }\n  \n  // Utility Methods\n  public isTemplate(content: any): boolean {\n    return content instanceof TemplateRef;\n  }\n  \n  public isString(content: any): boolean {\n    return typeof content === 'string';\n  }\n  \n  public hasIcon(tab: TabItem): boolean {\n    return !!tab.icon;\n  }\n  \n  public getIconClass(tab: TabItem): string {\n    if (typeof tab.icon === 'string') {\n      return tab.icon;\n    }\n    return '';\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// Tab Component Styles - Pixel-perfect match with React version\n\n.tab-container {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  font-family: var(--font-family-base);\n  \n  &.vertical {\n    flex-direction: row;\n  }\n  \n  &.scrollable {\n    overflow: hidden;\n  }\n}\n\n// Tab List Styles\n.tab-list {\n  display: flex;\n  background-color: var(--color-background-secondary); // #f8f6fa\n  border-radius: var(--radius-lg); // 12px\n  padding: var(--spacing-1); // 4px\n  margin-bottom: var(--spacing-6); // 24px\n  position: relative;\n  box-shadow: var(--shadow-xs); // 0 1px 2px rgba(16, 24, 40, 0.05)\n  \n  &.vertical {\n    flex-direction: column;\n    margin-bottom: 0;\n    margin-right: var(--spacing-6);\n    min-width: 200px;\n  }\n  \n  &.scrollable {\n    overflow-x: auto;\n    scrollbar-width: none;\n    -ms-overflow-style: none;\n    \n    &::-webkit-scrollbar {\n      display: none;\n    }\n    \n    &.vertical {\n      overflow-y: auto;\n      overflow-x: hidden;\n    }\n  }\n  \n  // Alignment variants\n  &.center {\n    justify-content: center;\n  }\n  \n  &.end {\n    justify-content: flex-end;\n  }\n  \n  &.stretch .tab-item {\n    flex: 1;\n  }\n}\n\n// Tab Item Styles\n.tab-item {\n  flex: 1;\n  background: none;\n  border: none;\n  padding: var(--spacing-3) var(--spacing-5); // 12px 20px\n  font-size: var(--font-size-sm); // 14px\n  font-weight: var(--font-weight-medium); // 500\n  color: var(--color-text-secondary); // #6b5671\n  border-radius: var(--radius-md); // 8px\n  cursor: pointer;\n  transition: all var(--animation-duration-base) var(--animation-ease-in-out); // 200ms cubic-bezier(0.4, 0, 0.2, 1)\n  position: relative;\n  z-index: 2;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: var(--spacing-2); // 8px\n  white-space: nowrap;\n  user-select: none;\n  outline: none;\n  line-height: 1;\n  box-sizing: border-box;\n  \n  // Hover state\n  &:hover:not(.disabled) {\n    color: var(--color-text-primary); // #2a1f35\n  }\n  \n  // Focus state\n  &:focus {\n    outline: 2px solid var(--color-primary-400); // #8b5a97\n    outline-offset: 2px;\n  }\n  \n  // Active state\n  &.active {\n    background-color: var(--color-background-primary); // #ffffff\n    color: var(--color-primary-600); // #611F69\n    box-shadow: var(--shadow-sm); // 0 1px 3px rgba(16, 24, 40, 0.1), 0 1px 2px rgba(16, 24, 40, 0.06)\n    font-weight: var(--font-weight-semibold); // 600\n  }\n  \n  // Disabled state\n  &.disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    color: var(--color-text-tertiary); // #8a7490\n    \n    &:hover {\n      color: var(--color-text-tertiary);\n    }\n  }\n  \n  // Size variants\n  &.small {\n    padding: var(--spacing-2) var(--spacing-3); // 8px 12px\n    font-size: var(--font-size-xs); // 12px\n    min-height: 32px;\n    \n    .tab-icon {\n      width: 14px;\n      height: 14px;\n    }\n  }\n  \n  &.medium {\n    // Default styles already applied\n    min-height: 40px;\n  }\n  \n  &.large {\n    padding: var(--spacing-4) var(--spacing-6); // 16px 24px\n    font-size: var(--font-size-base); // 16px\n    min-height: 48px;\n    \n    .tab-icon {\n      width: 20px;\n      height: 20px;\n    }\n  }\n}\n\n// Tab Icon\n.tab-icon {\n  width: 16px;\n  height: 16px;\n  flex-shrink: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  \n  svg {\n    width: 100%;\n    height: 100%;\n    fill: currentColor;\n  }\n  \n  i {\n    font-size: inherit;\n  }\n}\n\n// Tab Label\n.tab-label {\n  flex-shrink: 0;\n}\n\n// Tab Content Styles\n.tab-content {\n  flex: 1;\n  overflow: hidden;\n  position: relative;\n  \n  .vertical & {\n    margin-left: 0;\n  }\n}\n\n// Tab Panel Styles\n.tab-panel {\n  height: 100%;\n  overflow: hidden;\n  outline: none;\n  \n  &:not(.active):not(.keep-alive) {\n    display: none !important;\n  }\n  \n  &.keep-alive:not(.active) {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    visibility: hidden;\n    z-index: -1;\n  }\n  \n  &.active {\n    display: block;\n    visibility: visible;\n    z-index: 1;\n  }\n}\n\n.tab-panel-inner {\n  height: 100%;\n  overflow-y: auto;\n  padding-right: var(--spacing-2); // 8px\n  \n  // Custom scrollbar styling\n  &::-webkit-scrollbar {\n    width: 6px;\n  }\n  \n  &::-webkit-scrollbar-track {\n    background: var(--color-background-secondary); // #f8f6fa\n    border-radius: 3px;\n  }\n  \n  &::-webkit-scrollbar-thumb {\n    background: var(--color-border-secondary); // #c4b8cd\n    border-radius: 3px;\n  }\n  \n  &::-webkit-scrollbar-thumb:hover {\n    background: var(--color-text-tertiary); // #8a7490\n  }\n}\n\n// Variant Styles\n// Line variant (default) - includes the sliding indicator\n.tab-container.line {\n  .tab-list {\n    background: transparent;\n    box-shadow: none;\n    border-bottom: 1px solid var(--color-border-primary);\n    border-radius: 0;\n    padding: 0;\n    \n    &.vertical {\n      border-bottom: none;\n      border-right: 1px solid var(--color-border-primary);\n    }\n  }\n  \n  .tab-item {\n    background: transparent;\n    border-radius: 0;\n    position: relative;\n    \n    &.active {\n      background: transparent;\n      box-shadow: none;\n      \n      &::after {\n        content: '';\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        height: 2px;\n        background: var(--color-primary-600);\n        border-radius: 1px;\n      }\n    }\n  }\n  \n  &.vertical .tab-item.active::after {\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: auto;\n    width: 2px;\n    height: auto;\n  }\n}\n\n// Enclosed variant\n.tab-container.enclosed {\n  .tab-list {\n    background: transparent;\n    box-shadow: none;\n    border-bottom: 1px solid var(--color-border-primary);\n    border-radius: 0;\n    padding: 0;\n    gap: 2px;\n  }\n  \n  .tab-item {\n    border: 1px solid transparent;\n    border-bottom: none;\n    border-radius: var(--radius-md) var(--radius-md) 0 0;\n    margin-bottom: -1px;\n    background: transparent;\n    \n    &.active {\n      background: var(--color-background-primary);\n      border-color: var(--color-border-primary);\n      border-bottom: 1px solid var(--color-background-primary);\n      box-shadow: none;\n    }\n  }\n}\n\n// Soft rounded variant\n.tab-container.soft-rounded {\n  .tab-list {\n    background: transparent;\n    box-shadow: none;\n    padding: 0;\n    gap: var(--spacing-1);\n  }\n  \n  .tab-item {\n    border-radius: var(--radius-md);\n    background: transparent;\n    \n    &:hover:not(.disabled):not(.active) {\n      background: var(--color-background-secondary);\n    }\n    \n    &.active {\n      background: var(--color-primary-50);\n      color: var(--color-primary-700);\n      box-shadow: none;\n    }\n  }\n}\n\n// Solid rounded variant\n.tab-container.solid-rounded {\n  .tab-list {\n    background: transparent;\n    box-shadow: none;\n    padding: 0;\n    gap: var(--spacing-1);\n  }\n  \n  .tab-item {\n    border-radius: var(--radius-md);\n    background: transparent;\n    \n    &:hover:not(.disabled):not(.active) {\n      background: var(--color-background-secondary);\n    }\n    \n    &.active {\n      background: var(--color-primary-600);\n      color: white;\n      box-shadow: none;\n    }\n  }\n}\n\n// Animation Classes\n.tab-container.animated {\n  .tab-panel {\n    transition: opacity var(--animation-duration-slow) var(--animation-ease-out);\n  }\n  \n  .tab-panel-inner {\n    transition: transform var(--animation-duration-slow) var(--animation-ease-out);\n  }\n}\n\n// Responsive Design\n@media (max-width: 640px) {\n  .tab-container.vertical {\n    flex-direction: column;\n    \n    .tab-list {\n      flex-direction: row;\n      margin-right: 0;\n      margin-bottom: var(--spacing-4);\n      min-width: auto;\n      overflow-x: auto;\n      \n      &.line {\n        border-right: none;\n        border-bottom: 1px solid var(--color-border-primary);\n      }\n    }\n  }\n  \n  .tab-item {\n    padding: var(--spacing-2) var(--spacing-3) !important;\n    font-size: var(--font-size-xs) !important;\n    \n    &.small {\n      padding: var(--spacing-1) var(--spacing-2) !important;\n    }\n  }\n  \n  .tab-content .vertical & {\n    margin-left: 0;\n    margin-top: 0;\n  }\n  \n  .tab-panel-inner {\n    padding-right: var(--spacing-1);\n  }\n}\n\n// Focus management\n.tab-item.focused {\n  outline: 2px solid var(--color-primary-400);\n  outline-offset: 2px;\n}\n\n// Loading state (for future enhancement)\n.tab-container.loading {\n  pointer-events: none;\n  opacity: 0.7;\n}\n\n// Empty state\n.tab-container:not(:has(.tab-item)) {\n  .tab-list {\n    display: none;\n  }\n  \n  .tab-content::before {\n    content: 'No tabs available';\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100px;\n    color: var(--color-text-secondary);\n    font-style: italic;\n  }\n}\n\n// High contrast mode support\n@media (prefers-contrast: high) {\n  .tab-item {\n    border: 1px solid transparent;\n    \n    &.active {\n      border-color: currentColor;\n    }\n    \n    &:focus {\n      outline-width: 3px;\n    }\n  }\n}\n\n// Reduced motion support\n@media (prefers-reduced-motion: reduce) {\n  .tab-item,\n  .tab-panel,\n  .tab-panel-inner {\n    transition: none !important;\n    animation: none !important;\n  }\n}\n\n// Print styles\n@media print {\n  .tab-container {\n    .tab-list {\n      display: none;\n    }\n    \n    .tab-panel {\n      display: block !important;\n      visibility: visible !important;\n      position: static !important;\n      height: auto !important;\n      \n      &::before {\n        content: attr(aria-labelledby) ': ';\n        font-weight: bold;\n        display: block;\n        margin-bottom: 1em;\n      }\n    }\n  }\n}",
                    "styleUrl": "./tab.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tabService",
                        "type": "TabService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 142,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tabService",
                        "type": "TabService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterContentInit"
            ],
            "accessors": {
                "containerClasses": {
                    "name": "containerClasses",
                    "getSignature": {
                        "name": "containerClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 443
                    }
                },
                "tabListClasses": {
                    "name": "tabListClasses",
                    "getSignature": {
                        "name": "tabListClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 457
                    }
                },
                "tabContentClasses": {
                    "name": "tabContentClasses",
                    "getSignature": {
                        "name": "tabContentClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 469
                    }
                }
            },
            "templateData": "<!-- Main Tab Container -->\n<div \n  #tabContainer\n  class=\"tab-container\"\n  [ngClass]=\"containerClasses\"\n  [attr.data-orientation]=\"orientation\"\n  [attr.data-variant]=\"variant\"\n  [attr.data-size]=\"size\">\n  \n  <!-- Tab List Navigation -->\n  <div \n    #tabList\n    class=\"tab-list\"\n    [ngClass]=\"tabListClasses\"\n    [id]=\"accessibility.tabListId\"\n    role=\"tablist\"\n    [attr.aria-label]=\"accessibility.ariaLabel\"\n    [attr.aria-labelledby]=\"accessibility.ariaLabelledBy\"\n    [attr.aria-orientation]=\"orientation\">\n    \n    <!-- Individual Tab Buttons -->\n    <button\n      *ngFor=\"let tab of tabs; let i = index; trackBy: trackByTabId\"\n      type=\"button\"\n      class=\"tab-item\"\n      [ngClass]=\"getTabClasses(i)\"\n      [id]=\"getTabId(i)\"\n      [attr.data-tab-index]=\"i\"\n      [attr.data-tab-id]=\"tab.id\"\n      role=\"tab\"\n      [attr.aria-selected]=\"isTabActive(i)\"\n      [attr.aria-controls]=\"getTabPanelId(i)\"\n      [attr.aria-disabled]=\"tab.disabled\"\n      [attr.tabindex]=\"getTabIndex(i)\"\n      [disabled]=\"tab.disabled\"\n      (click)=\"onTabClick(i, $event)\"\n      (focus)=\"onTabFocus(i, $event)\"\n      (blur)=\"onTabBlur(i, $event)\">\n      \n      <!-- Tab Icon -->\n      <span *ngIf=\"hasIcon(tab)\" class=\"tab-icon\">\n        <ng-container *ngIf=\"isString(tab.icon); else iconTemplate\">\n          <i [class]=\"getIconClass(tab)\"></i>\n        </ng-container>\n        <ng-template #iconTemplate>\n          <ng-container *ngTemplateOutlet=\"$any(tab.icon)\"></ng-container>\n        </ng-template>\n      </span>\n      \n      <!-- Tab Label -->\n      <span class=\"tab-label\">{{ tab.label }}</span>\n    </button>\n  </div>\n  \n  <!-- Tab Content Panels -->\n  <div \n    #tabContent\n    class=\"tab-content\"\n    [ngClass]=\"tabContentClasses\">\n    \n    <!-- Individual Tab Panels -->\n    <div\n      *ngFor=\"let tab of tabs; let i = index; trackBy: trackByTabId\"\n      class=\"tab-panel\"\n      [ngClass]=\"getTabPanelClasses(i)\"\n      [id]=\"getTabPanelId(i)\"\n      role=\"tabpanel\"\n      [attr.aria-labelledby]=\"getTabId(i)\"\n      [attr.tabindex]=\"isTabActive(i) ? 0 : -1\"\n      [attr.hidden]=\"!isTabActive(i) && !keepAlive\"\n      [style.display]=\"!shouldShowTabContent(i) ? 'none' : null\">\n      \n      <!-- Tab Panel Content -->\n      <div \n        *ngIf=\"shouldShowTabContent(i)\"\n        class=\"tab-panel-inner\"\n        [@fadeIn]=\"animated && isTabActive(i)\"\n        [@slideIn]=\"animated && isTabActive(i)\">\n        \n        <!-- Custom Content Template -->\n        <ng-container *ngIf=\"isTemplate(tab.content); else defaultContent\">\n          <ng-container *ngTemplateOutlet=\"$any(tab.content); context: { \n            $implicit: tab, \n            index: i,\n            active: isTabActive(i)\n          }\"></ng-container>\n        </ng-container>\n        \n        <!-- Default Content -->\n        <ng-template #defaultContent>\n          <ng-container *ngIf=\"tab.content\">\n            {{ tab.content }}\n          </ng-container>\n        </ng-template>\n        \n        <!-- Content Children (if no tab.content) -->\n        <ng-container *ngIf=\"!tab.content && contentTemplates && contentTemplates.get(i)\">\n          <ng-container *ngTemplateOutlet=\"contentTemplates.get(i); context: { \n            $implicit: tab, \n            index: i,\n            active: isTabActive(i)\n          }\"></ng-container>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n</div>"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [provideZoneChangeDetection({ eventCoalescing: true })]\n}"
            },
            {
                "name": "stepTransitions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/progress-steps/progress-steps.animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  trigger('stepState', [\n    state('pending', style({\n      transform: 'scale(1)',\n      opacity: 1\n    })),\n    state('active', style({\n      transform: 'scale(1.1)',\n      opacity: 1\n    })),\n    state('completed', style({\n      transform: 'scale(1)',\n      opacity: 1\n    })),\n    state('error', style({\n      transform: 'scale(1)',\n      opacity: 1\n    })),\n    state('disabled', style({\n      transform: 'scale(1)',\n      opacity: 0.5\n    })),\n    transition('* => active', [\n      animate('0.3s ease-out')\n    ]),\n    transition('active => completed', [\n      animate('0.2s ease-in')\n    ]),\n    transition('* => error', [\n      animate('0.2s ease-out')\n    ])\n  ]),\n  \n  trigger('progressLine', [\n    state('incomplete', style({\n      width: '0%'\n    })),\n    state('partial', style({\n      width: '50%'\n    })),\n    state('complete', style({\n      width: '100%'\n    })),\n    transition('incomplete => partial', [\n      animate('0.5s ease-out')\n    ]),\n    transition('partial => complete', [\n      animate('0.5s ease-out')\n    ]),\n    transition('complete => incomplete', [\n      animate('0.3s ease-in')\n    ])\n  ]),\n\n  trigger('iconAnimation', [\n    transition(':enter', [\n      style({ transform: 'scale(0)', opacity: 0 }),\n      animate('0.6s ease', keyframes([\n        style({ transform: 'scale(0)', opacity: 0, offset: 0 }),\n        style({ transform: 'scale(1.2)', opacity: 1, offset: 0.5 }),\n        style({ transform: 'scale(1)', opacity: 1, offset: 1 })\n      ]))\n    ]),\n    transition(':leave', [\n      animate('0.2s ease-out', style({ transform: 'scale(0)', opacity: 0 }))\n    ])\n  ]),\n\n  trigger('stepContent', [\n    transition(':enter', [\n      style({ opacity: 0, transform: 'translateY(10px)' }),\n      animate('0.3s ease-out', style({ opacity: 1, transform: 'translateY(0)' }))\n    ]),\n    transition(':leave', [\n      animate('0.2s ease-in', style({ opacity: 0, transform: 'translateY(-10px)' }))\n    ])\n  ])\n]"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\" | \"xlarge\"",
                "file": "src/app/components/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ButtonType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"button\" | \"submit\" | \"reset\"",
                "file": "src/app/components/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ButtonVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"ghost\" | \"destructive\" | \"success\" | \"outline\"",
                "file": "src/app/components/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "FormLayout",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"single\" | \"two-column\" | \"grid\" | \"inline\"",
                "file": "src/app/components/form/form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "FormSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sm\" | \"base\" | \"lg\"",
                "file": "src/app/components/form/form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "FormValidationMode",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"onSubmit\" | \"onChange\" | \"onBlur\"",
                "file": "src/app/components/form/form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IconPosition",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"left\" | \"right\"",
                "file": "src/app/components/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "InputSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sm\" | \"base\" | \"lg\"",
                "file": "src/app/components/input/input.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "InputState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"error\" | \"success\"",
                "file": "src/app/components/input/input.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "InputType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"text\" | \"email\" | \"password\" | \"number\" | \"search\" | \"tel\" | \"url\"",
                "file": "src/app/components/input/input.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "InputVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"filled\" | \"ghost\"",
                "file": "src/app/components/input/input.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "SelectorLayout",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"grid\" | \"list\"",
                "file": "src/app/components/selector/selector.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "SelectorMode",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"single\" | \"multiple\"",
                "file": "src/app/components/selector/selector.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "SelectorSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sm\" | \"base\" | \"lg\"",
                "file": "src/app/components/selector/selector.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "SelectorVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"card\" | \"minimal\"",
                "file": "src/app/components/selector/selector.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "StepOrientation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"horizontal\" | \"vertical\"",
                "file": "src/app/components/progress-steps/progress-steps.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "StepSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\"",
                "file": "src/app/components/progress-steps/progress-steps.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "StepState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"pending\" | \"active\" | \"completed\" | \"error\" | \"disabled\" | \"optional\"",
                "file": "src/app/components/progress-steps/progress-steps.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "StepVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"compact\" | \"minimal\"",
                "file": "src/app/components/progress-steps/progress-steps.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "SubmitState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"idle\" | \"loading\" | \"success\" | \"error\"",
                "file": "src/app/components/form/form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TabAlignment",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"start\" | \"center\" | \"end\" | \"stretch\"",
                "file": "src/app/components/tab/tab.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TabOrientation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"horizontal\" | \"vertical\"",
                "file": "src/app/components/tab/tab.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TabSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\"",
                "file": "src/app/components/tab/tab.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TabVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"line\" | \"enclosed\" | \"soft-rounded\" | \"solid-rounded\"",
                "file": "src/app/components/tab/tab.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [provideZoneChangeDetection({ eventCoalescing: true })]\n}"
                }
            ],
            "src/app/components/progress-steps/progress-steps.animations.ts": [
                {
                    "name": "stepTransitions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/progress-steps/progress-steps.animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  trigger('stepState', [\n    state('pending', style({\n      transform: 'scale(1)',\n      opacity: 1\n    })),\n    state('active', style({\n      transform: 'scale(1.1)',\n      opacity: 1\n    })),\n    state('completed', style({\n      transform: 'scale(1)',\n      opacity: 1\n    })),\n    state('error', style({\n      transform: 'scale(1)',\n      opacity: 1\n    })),\n    state('disabled', style({\n      transform: 'scale(1)',\n      opacity: 0.5\n    })),\n    transition('* => active', [\n      animate('0.3s ease-out')\n    ]),\n    transition('active => completed', [\n      animate('0.2s ease-in')\n    ]),\n    transition('* => error', [\n      animate('0.2s ease-out')\n    ])\n  ]),\n  \n  trigger('progressLine', [\n    state('incomplete', style({\n      width: '0%'\n    })),\n    state('partial', style({\n      width: '50%'\n    })),\n    state('complete', style({\n      width: '100%'\n    })),\n    transition('incomplete => partial', [\n      animate('0.5s ease-out')\n    ]),\n    transition('partial => complete', [\n      animate('0.5s ease-out')\n    ]),\n    transition('complete => incomplete', [\n      animate('0.3s ease-in')\n    ])\n  ]),\n\n  trigger('iconAnimation', [\n    transition(':enter', [\n      style({ transform: 'scale(0)', opacity: 0 }),\n      animate('0.6s ease', keyframes([\n        style({ transform: 'scale(0)', opacity: 0, offset: 0 }),\n        style({ transform: 'scale(1.2)', opacity: 1, offset: 0.5 }),\n        style({ transform: 'scale(1)', opacity: 1, offset: 1 })\n      ]))\n    ]),\n    transition(':leave', [\n      animate('0.2s ease-out', style({ transform: 'scale(0)', opacity: 0 }))\n    ])\n  ]),\n\n  trigger('stepContent', [\n    transition(':enter', [\n      style({ opacity: 0, transform: 'translateY(10px)' }),\n      animate('0.3s ease-out', style({ opacity: 1, transform: 'translateY(0)' }))\n    ]),\n    transition(':leave', [\n      animate('0.2s ease-in', style({ opacity: 0, transform: 'translateY(-10px)' }))\n    ])\n  ])\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/components/button/button.component.ts": [
                {
                    "name": "ButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\" | \"xlarge\"",
                    "file": "src/app/components/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ButtonType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"button\" | \"submit\" | \"reset\"",
                    "file": "src/app/components/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ButtonVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"ghost\" | \"destructive\" | \"success\" | \"outline\"",
                    "file": "src/app/components/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IconPosition",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"left\" | \"right\"",
                    "file": "src/app/components/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/components/form/form.component.ts": [
                {
                    "name": "FormLayout",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"single\" | \"two-column\" | \"grid\" | \"inline\"",
                    "file": "src/app/components/form/form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "FormSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sm\" | \"base\" | \"lg\"",
                    "file": "src/app/components/form/form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "FormValidationMode",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"onSubmit\" | \"onChange\" | \"onBlur\"",
                    "file": "src/app/components/form/form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "SubmitState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"idle\" | \"loading\" | \"success\" | \"error\"",
                    "file": "src/app/components/form/form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/components/input/input.component.ts": [
                {
                    "name": "InputSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sm\" | \"base\" | \"lg\"",
                    "file": "src/app/components/input/input.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "InputState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"error\" | \"success\"",
                    "file": "src/app/components/input/input.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "InputType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"text\" | \"email\" | \"password\" | \"number\" | \"search\" | \"tel\" | \"url\"",
                    "file": "src/app/components/input/input.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "InputVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"filled\" | \"ghost\"",
                    "file": "src/app/components/input/input.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/components/selector/selector.types.ts": [
                {
                    "name": "SelectorLayout",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"grid\" | \"list\"",
                    "file": "src/app/components/selector/selector.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "SelectorMode",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"single\" | \"multiple\"",
                    "file": "src/app/components/selector/selector.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "SelectorSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sm\" | \"base\" | \"lg\"",
                    "file": "src/app/components/selector/selector.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "SelectorVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"card\" | \"minimal\"",
                    "file": "src/app/components/selector/selector.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/components/progress-steps/progress-steps.types.ts": [
                {
                    "name": "StepOrientation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"horizontal\" | \"vertical\"",
                    "file": "src/app/components/progress-steps/progress-steps.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "StepSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\"",
                    "file": "src/app/components/progress-steps/progress-steps.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "StepState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"pending\" | \"active\" | \"completed\" | \"error\" | \"disabled\" | \"optional\"",
                    "file": "src/app/components/progress-steps/progress-steps.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "StepVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"compact\" | \"minimal\"",
                    "file": "src/app/components/progress-steps/progress-steps.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/components/tab/tab.types.ts": [
                {
                    "name": "TabAlignment",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"start\" | \"center\" | \"end\" | \"stretch\"",
                    "file": "src/app/components/tab/tab.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TabOrientation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"horizontal\" | \"vertical\"",
                    "file": "src/app/components/tab/tab.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TabSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\"",
                    "file": "src/app/components/tab/tab.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TabVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"line\" | \"enclosed\" | \"soft-rounded\" | \"solid-rounded\"",
                    "file": "src/app/components/tab/tab.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ButtonSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ButtonType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ButtonVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IconPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/44",
                "status": "low"
            },
            {
                "filePath": "src/app/components/form/form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormComponentEvents",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/form/form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormComponentProps",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/components/form/form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormSection",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/form/form.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "FormLayout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/form/form.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "FormSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/form/form.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "FormValidationMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/form/form.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "SubmitState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/46",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InputComponentEvents",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InputComponentProps",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "InputSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "InputState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "InputType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "InputVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modal/modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalService",
                "coveragePercent": 52,
                "coverageCount": "9/17",
                "status": "good"
            },
            {
                "filePath": "src/app/components/modal/modal.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ModalData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modal/modal.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ModalOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modal/modal.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ModalRef",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/progress-steps/progress-steps.animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stepTransitions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/progress-steps/progress-steps.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressStepsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/progress-steps/progress-steps.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProgressStepsService",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/components/progress-steps/progress-steps.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProgressStepsConfig",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/progress-steps/progress-steps.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StepClickEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/progress-steps/progress-steps.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StepConfig",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/progress-steps/progress-steps.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "StepOrientation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/progress-steps/progress-steps.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "StepSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/progress-steps/progress-steps.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "StepState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/progress-steps/progress-steps.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "StepVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selector/selector.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selector/selector.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectorOption",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selector/selector.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SelectorService",
                "coveragePercent": 64,
                "coverageCount": "18/28",
                "status": "good"
            },
            {
                "filePath": "src/app/components/selector/selector.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectorAccessibility",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selector/selector.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectorAsyncConfig",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selector/selector.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectorConfig",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selector/selector.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectorCustomization",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selector/selector.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectorEvents",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selector/selector.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectorGroup",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selector/selector.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectorHighlight",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selector/selector.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectorKeyboardNavigation",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selector/selector.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectorOption",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selector/selector.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectorPerformance",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selector/selector.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectorState",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selector/selector.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectorTheme",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selector/selector.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectorValidation",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selector/selector.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "SelectorLayout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selector/selector.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "SelectorMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selector/selector.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "SelectorSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/selector/selector.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "SelectorVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/71",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/tab.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TabService",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/tab.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TabAccessibility",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/tab.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TabAnimationConfig",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/tab.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TabConfig",
                "coveragePercent": 93,
                "coverageCount": "15/16",
                "status": "very-good"
            },
            {
                "filePath": "src/app/components/tab/tab.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TabCustomization",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/tab.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TabEvents",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/tab.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TabItem",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/app/components/tab/tab.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TabKeyboardNavigation",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/tab.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TabScrollConfig",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/tab.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TabState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/tab.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TabAlignment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/tab.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TabOrientation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/tab.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TabSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/tab.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TabVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/form-demo/form-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/modal-demo/modal-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}