name: Deploy Angular Storybook to GitHub Pages

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'stories/**'
      - '.storybook/**'
      - 'package.json'
      - 'package-lock.json'
      - 'angular.json'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "storybook-pages"
  cancel-in-progress: false

env:
  NODE_OPTIONS: '--max-old-space-size=8192'
  CI: true
  NPM_CONFIG_PROGRESS: false
  NPM_CONFIG_AUDIT: false
  NPM_CONFIG_FUND: false

jobs:
  # Job 1: Check for changes (optimization for large projects)
  changes:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.changes.outputs.should_deploy }}
      stories_changed: ${{ steps.changes.outputs.stories }}
      config_changed: ${{ steps.changes.outputs.config }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for relevant changes
        id: changes
        run: |
          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "stories=true" >> $GITHUB_OUTPUT
            echo "config=true" >> $GITHUB_OUTPUT
            echo "Force deployment requested"
            exit 0
          fi
          
          # Check if this is the first commit
          if [ $(git rev-list --count HEAD) -eq 1 ]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "stories=true" >> $GITHUB_OUTPUT
            echo "config=true" >> $GITHUB_OUTPUT
            echo "Initial commit - deploying"
            exit 0
          fi
          
          # Check for changes in relevant paths
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          
          STORIES_CHANGED=false
          CONFIG_CHANGED=false
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          if echo "$CHANGED_FILES" | grep -E '^(src/.*\.(stories|spec)\.(ts|js|jsx|tsx|mdx)|stories/.*\.(ts|js|jsx|tsx|mdx))$'; then
            STORIES_CHANGED=true
          fi
          
          if echo "$CHANGED_FILES" | grep -E '^(\.storybook/.*|package\.json|package-lock\.json|angular\.json|\.github/workflows/.*)$'; then
            CONFIG_CHANGED=true
          fi
          
          if [ "$STORIES_CHANGED" = "true" ] || [ "$CONFIG_CHANGED" = "true" ]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi
          
          echo "stories=$STORIES_CHANGED" >> $GITHUB_OUTPUT
          echo "config=$CONFIG_CHANGED" >> $GITHUB_OUTPUT

  # Job 2: Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.should_deploy == 'true'
    timeout-minutes: 30
    outputs:
      build_size: ${{ steps.analyze.outputs.build_size }}
      story_count: ${{ steps.analyze.outputs.story_count }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache Angular build
        uses: actions/cache@v4
        with:
          path: |
            .angular/cache
            dist
          key: ${{ runner.os }}-angular-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('src/**', '.storybook/**') }}
          restore-keys: |
            ${{ runner.os }}-angular-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-angular-

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-optional
          echo "Dependencies installed successfully"

      - name: Lint code (if available)
        run: |
          if npm run lint --silent 2>/dev/null; then
            echo "Linting passed"
          else
            echo "Linting not available or failed - continuing"
          fi
        continue-on-error: true

      - name: Build Storybook
        run: |
          echo "Starting Storybook build for large project..."
          echo "Memory limit: $NODE_OPTIONS"
          
          # Build with error handling
          if npm run build-storybook; then
            echo "‚úÖ Storybook build completed successfully"
          else
            echo "‚ùå Storybook build failed"
            exit 1
          fi

      - name: Verify build output
        id: verify
        run: |
          echo "Verifying build output..."
          
          if [ ! -d "storybook-static" ]; then
            echo "‚ùå Build directory 'storybook-static' not found"
            exit 1
          fi
          
          if [ ! -f "storybook-static/index.html" ]; then
            echo "‚ùå Main index.html not found"
            exit 1
          fi
          
          # Check for critical files
          CRITICAL_FILES=("index.html" "iframe.html")
          for file in "${CRITICAL_FILES[@]}"; do
            if [ ! -f "storybook-static/$file" ]; then
              echo "‚ùå Critical file missing: $file"
              exit 1
            fi
          done
          
          # Basic HTML validation
          if grep -q "<html" storybook-static/index.html && grep -q "</html>" storybook-static/index.html; then
            echo "‚úÖ HTML structure looks valid"
          else
            echo "‚ö†Ô∏è HTML structure may be invalid"
          fi
          
          # Check for JavaScript errors in built files
          if find storybook-static -name "*.js" -exec grep -l "console\.error\|throw new Error" {} \; | head -5; then
            echo "‚ö†Ô∏è Found potential JavaScript errors in build"
          fi
          
          echo "‚úÖ Build verification completed"

      - name: Analyze build
        id: analyze
        run: |
          # Calculate build size
          BUILD_SIZE=$(du -sh storybook-static | cut -f1)
          echo "build_size=$BUILD_SIZE" >> $GITHUB_OUTPUT
          echo "üìä Build size: $BUILD_SIZE"
          
          # Count story files
          STORY_COUNT=$(find storybook-static -name "*.js" -exec grep -l "stories\|story" {} \; | wc -l)
          echo "story_count=$STORY_COUNT" >> $GITHUB_OUTPUT
          echo "üìö Estimated story count: $STORY_COUNT"
          
          # List asset files
          echo "üìÅ Asset summary:"
          find storybook-static -type f -name "*.js" | wc -l | xargs echo "JavaScript files:"
          find storybook-static -type f -name "*.css" | wc -l | xargs echo "CSS files:"
          find storybook-static -type f -name "*.html" | wc -l | xargs echo "HTML files:"

      - name: Add deployment metadata
        run: |
          # Create deployment info file
          cat > storybook-static/deployment-info.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "build_size": "${{ steps.analyze.outputs.build_size }}",
            "story_count": "${{ steps.analyze.outputs.story_count }}",
            "node_version": "$(node --version)",
            "npm_version": "$(npm --version)",
            "workflow_run": "${{ github.run_number }}"
          }
          EOF
          
          # Add .nojekyll for GitHub Pages
          touch storybook-static/.nojekyll
          
          # Add custom 404 page
          cp storybook-static/index.html storybook-static/404.html

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./storybook-static

      - name: Store build info
        run: |
          echo "üéâ Build Summary:"
          echo "- Build Size: ${{ steps.analyze.outputs.build_size }}"
          echo "- Story Count: ${{ steps.analyze.outputs.story_count }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Workflow: #${{ github.run_number }}"

  # Job 3: Deploy to GitHub Pages
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [changes, build-and-test]
    if: needs.changes.outputs.should_deploy == 'true'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Verify deployment
        run: |
          echo "üöÄ Deployment completed!"
          echo "üìç URL: ${{ steps.deployment.outputs.page_url }}"
          
          # Wait a moment for deployment to propagate
          sleep 30
          
          # Basic health check
          if curl -sSf "${{ steps.deployment.outputs.page_url }}" > /dev/null; then
            echo "‚úÖ Site is responding"
          else
            echo "‚ö†Ô∏è Site may not be immediately available"
          fi

      - name: Deployment summary
        run: |
          echo "## üéâ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Size**: ${{ needs.build-and-test.outputs.build_size }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Stories**: ~${{ needs.build-and-test.outputs.story_count }} files" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed**: $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)" >> $GITHUB_STEP_SUMMARY

  # Job 4: Cleanup old artifacts (resource management)
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && needs.deploy.result == 'success'
    steps:
      - name: Cleanup old artifacts
        run: |
          echo "üßπ Cleanup completed (artifacts auto-expire in 30 days)"